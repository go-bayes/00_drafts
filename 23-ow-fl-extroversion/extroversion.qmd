---
title: "Causal Effect of extraversion on multi-dimensionsal well-being"
subtitle: ""
author: 
  - name: Zoe Greer
    affiliation: Victoria University of Wellington
  - name: Chris G. Sibley
    affiliation: School of Psychology, University of Auckland
    orcid_id: 0000-0002-4064-8800
  - name: Joseph A. Bulbulia
    affiliation: Victoria University of Wellington, New Zealand
    orcid_id: 0000-0002-5861-2056
    email: joseph.bulbulia@vuw.ac.nz
    corresponding: yes
abstract: |
  We combine national panel data with a potential outcomes framework to estimate the causal effects of extraversion on multidimensional well-being. We find evidence for a one-year causal effect of extraversion on many domains for psychological and especially social well-being, although with no evidence for causal effects on health. 
execute:
  warning: false
  eval: false
  include: false
keywords:
  - measurement
date: last-modified
editor_options: 
  chunk_output_type: console
---

```{r}
#| label: load-libraries
#| echo: false
#| include: false
#| eval: true

# uncomment and use these links to load your functions
# source("https://raw.githubusercontent.com/go-bayes/templates/main/functions/libs2.R")

# # read functions
# source("https://raw.githubusercontent.com/go-bayes/templates/main/functions/funs.R")


# libraries for jb (when internet is not accessible)
# read libraries
source("/Users/joseph/GIT/templates/functions/libs2.R")

# read functions
source("/Users/joseph/GIT/templates/functions/funs.R")

# experimental functions (more functions)
source(
  "https://raw.githubusercontent.com/go-bayes/templates/main/functions/experimental_funs.R"
)


# read data/ set to path in your computer
pull_path <-
  fs::path_expand(
    "/Users/joseph/v-project\ Dropbox/data/current/nzavs_13_arrow"
  )

# for saving models. # set path fo your computer
push_mods <-
  fs::path_expand(
    "/Users/joseph/v-project\ Dropbox/data/nzvs_mods/00drafts/23_extraversion"
  )
# check path
push_mods
```

```{r}
#| label: read-data
#| echo: false
#| include: false
#| eval: false

# read data: note that you need use the arrow package in R
dat <- arrow::read_parquet(pull_path)



```

```{r}
#| label: clean data
#| echo: false
#| include: false
#| eval: false

# Note: read this: # create dataframes, one for each level of the factor.  This allows valid multiple imputation see: 
# https://bmcmedresmethodol.biomedcentral.com/articles/10.1186/s12874-023-01843-6

dat_long <- dat |>
  arrange(id, wave) |>
  mutate(urban = factor(ifelse(
      rural_gch2018 == "Medium Urban Accessibility" |
        # Define urban condition
        rural_gch2018 == "High Urban Accessibility",
      "urban",
      # Label 'urban' if condition is met
      "rural"  # Label 'rural' if condition is not met
    ) ))|> 
  # select variables
  # mutate(across(where(is.double), as.numeric)) |>
  mutate(male = as.numeric(male) - 1) |>
  rename(religion_religious = religious) |>  # religious yes/no
  mutate(religion_church_binary2 = ifelse(religion_church2 > 0, 1, 0)) |>
  mutate(religion_religious = as.numeric(religion_religious) - 1) |>
  #mutate(rural_gch2018 = as.integer(as.factor(rural_gch2018))) |>
 # mutate(eth_cat = as.integer(as.factor(eth_cat))) |>
  # mutate(perfectionism_high = ifelse(perfectionism > 4, 1, 0 )) |>
  select(
    "wave",
    "year_measured",
    "id",
    # "edu",
    "sample_origin_names_combined",
    # Sample origin names combined
    #"alert_level_combined_lead",  not needed because all receive all levels by the point the outcome is measured
    # covid alert levels -> 2019-2020
    "education_level_coarsen",
    # Ordinal-Rank 0-10 NZREG codes (with overseas school quals coded as Level 3, and all other ancillary categories coded as missing)  Combined highschool levels See:https://www.nzqa.govt.nz/assets/Studying-in-NZ/New-Zealand-Qualification-Framework/requirements-nzqf.pdf
    "male",
    # 0 = female, 0.5 = neither female nor male, 1 = male.
    "age",
    "born_nz",
    # value label 0    No 1   Yes
    "eth_cat",
    #factor(EthCat, labels = c("Euro", "Maori", "Pacific", "Asian")),
    "employed",
    # Are you currently employed? (this includes self-employment or casual work)
   # "gen_cohort",
    "household_inc",
    # Please estimate your total household income (before tax) for the last year.
    "nz_dep2018",
    # see nzavs materials
    "nzsei13",
    # see nzavs materials
    "partner",
    # 0 = no, 1 = yes
    "parent",
    # 0 = no, 1 = yes
    "pol_orient",
    #Please rate how politically liberal versus conservative you see yourself as being.
    "pol_wing",
    # Please rate how politically left-wing versus right-wing you see yourself as being.
    "urban",
    # see NZAVS
    "agreeableness",
    # Mini-IPIP6 Agreeableness (also modelled as empathy facet)
    # Sympathize with others' feelings.
    # Am not interested in other people's problems.
    # Feel others' emotions.
    # Am not really interested in others.
    "conscientiousness",
    # see mini ipip6
    # Get chores done right away.
    # Like order.
    # Make a mess of things.
    # Often forget to put things back in their proper place.
    "extraversion",
    # Mini-IPIP6 Extraversion
    # Am the life of the party.
    # Don't talk a lot.
    # Keep in the background.
    # Talk to a lot of different people at parties.
    "honesty_humility",
    # see mini ipip6
    # Would like to be seen driving around in a very expensive car.
    # Would get a lot of pleasure from owning expensive luxury goods.
    # Feel entitled to more of everything.
    # Deserve more things in life.
    "openness",
    # see mini ipip6
    # Have a vivid imagination.
    # Have difficulty understanding abstract ideas.
    # Do not have a good imagination.
    # Am not interested in abstract ideas.
    "neuroticism",
    # see mini ipip6
    # Have frequent mood swings.
    # Am relaxed most of the time.
    # Get upset easily.
    # Seldom feel blue.
    "modesty",
    # see mini ipip6
    # I want people to know that I am an important person of high status,
    # I am an ordinary person who is no better than others.
    # I wouldn’t want people to treat me as though I were superior to them.
    # I think that I am entitled to more respect than the average person is
    # "sdo",
    # "rwa",
    # "brk_relationship",
    # "began_relationship",
    "religion_religious",
    # Do you identify with a religion and/or spiritual group?
    "religion_identification_level",
    #How important is your religion to how you see yourself?"
    "religion_church_binary2",
    "religion_prayer",
    # How many times did you pray in the last week?
    "religion_scripture",
    # How many times did you read religious scripture in the last week?
    "religion_church2",
    # How many times did you attend a church or place of worship in the last month?
    "religion_believe_spirit",
    #Do you believe in some form of spirit or lifeforce?
    "religion_believe_god",
    #Do you believe in a God
    "religion_spiritual_identification",
    #w8,w10,w12-13 "I identify as a spiritual person."
    "religion_perceive_religious_discrim",
    #	I feel that I am often discriminated against because of my religious/spiritual beliefs.
    # "bigger_doms", #What religion or spiritual group?#  Not_Rel, Anglican , Buddist, Catholic , Christian_nfd, Christian_Others, Hindu, Jewish           Muslim, PresbyCongReform, TheOthers
    "w_gend_age_euro",
    # sample_weights
    "alcohol_frequency",
    #"How often do you have a drink containing alcohol?"
    "alcohol_intensity",
    # How many drinks containing alcohol do you have on a typical day when drinking?
    "hlth_bmi",
    # " What is your height? (metres)\nWhat is your weight? (kg)\nKg
    "hours_exercise",
    # Hours spent … exercising/physical activity
    # "sfhealth",
    "sfhealth_your_health",
    # "In general, would you say your health is...
    "sfhealth_get_sick_easier",
    #\nI seem to get sick a little easier than other people.
    "sfhealth_expect_worse_health",
    #\nI expect my health to get worse." ****
    "hlth_sleep_hours",
    #During the past month, on average, how many hours of actual sleep did you get per night?
    "smoker",
    #Do you currently smoke?
    "hlth_fatigue",
    #During the last 30 days, how often did.... you feel exhausted?
    "rumination",
    # During the last 30 days, how often did.... you have negative thoughts that repeated over and over?
    "kessler_depressed",
    #During the last 30 days, how often did.... you feel so depressed that nothing could cheer you up?
    "kessler_effort",
    #During the last 30 days, how often did.... you feel that everything was an effort?
    "kessler_hopeless",
    # During the last 30 days, how often did.... you feel hopeless?
    "kessler_nervous",
    #During the last 30 days, how often did.... you feel nervous?
    "kessler_restless",
    #During the last 30 days, how often did.... you feel restless or fidgety?
    "kessler_worthless",
    # During the last 30 days, how often did.... you feel worthless?
    "sexual_satisfaction",
    #  How satisfied are you with your sex life?
    "bodysat",
    ## Am satisfied with the appearance, size and shape of my body.
    "vengeful_rumin",
    # Sometimes I can't sleep because of thinking about past wrongs I have suffered.//# I can usually forgive and forget when someone does me wrong.# I find myself regularly thinking about past times that I have been wronged.
    "perfectionism",
    # # Doing my best never seems to be enough./# My performance rarely measures up to my standards.
    # I am hardly ever satisfied with my performance.
    "power_self_nocontrol",
    # I do not have enough power or control over\nimportant parts of my life.
    "power_others_control",
    # Other people have too much power or control over\nimportant parts of my life
    "self_esteem",
    "selfesteem_satself",
    #  On the whole am satisfied with myself.
    "selfesteem_postiveself",
    # Take a positive attitude toward myself
    "selfesteem_rfailure",
    # Am inclined to feel that I am a failure.
  #  "self_control",
    "self_control_have_lots",
    #In general, I have a lot of self-control.
    "self_control_wish_more_r",
    #I wish I had more self-discipline.(r)
    "emotion_regulation_out_control",
    # When I feel negative emotions, my emotions feel out of control. w10 - w13
    "emotion_regulation_hide_neg_emotions",
    # When I feel negative emotions, I suppress or hide my emotions. w10 - w13
    "emotion_regulation_change_thinking_to_calm",
    # When I feel negative emotions, I change the way I think to help me stay calm. w10 - w13
    # "emp_work_life_balance",# I have a good balance between work and other important things in my life. # not measured at baseline
    "gratitude",
    ## I have much in my life to be thankful for. # When I look at the world, I don’t see much to be grateful for. # I am grateful to a wide variety of people.
    "pwi_health",
    #Your health.
    "pwi_relationships",
    #Your personal relationships.
    "pwi_security",
    #Your future security.
    "pwi_standardliving",
    #Your standard of living.
    "lifesat",
    "lifesat_satlife",
    # I am satisfied with my life.
    "lifesat_ideal",
    # In most ways my life is close to ideal.
    "meaning_purpose",
    # My life has a clear sense of purpose.
    "meaning_sense",
    # I have a good sense of what makes my life meaningful.
    "permeability_individual",
    #I believe I am capable, as an individual\nof improving my status in society.
    "impermeability_group",
    #The current income gap between New Zealand Europeans and other ethnic groups would be very hard to change.
    "neighbourhood_community",
    #I feel a sense of community with others in my local neighbourhood.
   "support",
    "support_help",
    # 'There are people I can depend on to help me if I really need it.
    "support_turnto",
    # There is no one I can turn to for guidance in times of stress.
    "support_rnoguidance",
    #There is no one I can turn to for guidance in times of stress.
    "belong",
    "belong_accept",
    #Know that people in my life accept and value me.
    "belong_routsider",
    # Feel like an outsider.
    "belong_beliefs",
    # Know that people around me share my attitudes and beliefs.
    "charity_donate",
    #How much money have you donated to charity in the last year?
    "hours_charity"#,#Hours spent in activities/Hours spent … voluntary/charitable work
    # "nwi", # The economic situation in New Zealand./# The social conditions in New Zealand. # Business in New Zealand.
  ) |>
  dplyr::rename(sample_weights = w_gend_age_euro) |>
  dplyr::filter((wave == 2018 & year_measured  == 1) |
                  (wave == 2019  &
                     year_measured  == 1) |
                  (wave == 2020)) |>  # Eligibility criteria  Observed in 2018/2019 & Outcomes in 2020 or 2021
  group_by(id) |>
  dplyr::mutate(k_18 =  ifelse(wave == 2018 &
                                 !is.na(extraversion), 1, 0)) |>   # creating an indicator for the first wave
  dplyr::mutate(h_18 = mean(k_18, na.rm = TRUE)) |>   # Hack
  dplyr::mutate(k_19 =  ifelse(
    wave == 2019 &
      year_measured == 1 &
      !is.na(extraversion),
    1,
    0)) |>   # creating an indicator for the first wave; note that we allow people t
  dplyr::mutate(h_19 = mean(k_19, na.rm = TRUE)) |>  # Hack
  dplyr::filter(h_18 > 0) |>  # hack to enable repeat of baseline
  dplyr::filter(h_19 > 0) |>  # hack to enable repeat of baseline
  # mutate(perfectionism_coarsen = cut(perfectionism, 4)) |>
  droplevels() |>
  select(-c("h_19", "k_19", "h_18", "k_18")) |>
  data.frame()

str(dat_long)


## Tests 
# 
# dt_test <- dat_long |> 
#   filter(wave == 2018 | wave == 2019) |> 
#   select(id, wave, "kessler_depressed", #During the last 30 days, how often did.... you feel so depressed that nothing could cheer you up?
#     "kessler_effort",#During the last 30 days, how often did.... you feel that everything was an effort?
#     "kessler_hopeless",# During the last 30 days, how often did.... you feel hopeless?
#     "kessler_nervous",#During the last 30 days, how often did.... you feel nervous?
#     "kessler_restless", #During the last 30 days, how often did.... you feel restless or fidgety?
#     "kessler_worthless",# During the last 30 days, how often did.... you feel worthless?
#     ) |> 
#   group_by( id, wave) |> 
#   mutate(kessler_depression_1 = mean( c( kessler_hopeless, kessler_depressed,kessler_worthless, na.rm=TRUE))) |> 
#   ungroup() |> 
#   group_by(wave) |> 
#   rowwise() |> 
#   mutate(kessler_depression_2 = mean( c( kessler_hopeless, kessler_depressed, kessler_worthless,  na.rm=TRUE)))|> 
#   ungroup()
# 
# min( dt_test$kessler_depression_1, na.rm =TRUE) # equivalant
# 
# table ( dt_test$kessler_depression_1 == dt_test$kessler_depression_2 )



length(unique(dat_long$id))# 34189

str(dat_long$education_level_coarsen)
### Find quantile for T1 (wave 2019) and then look at change

# first filter the exposure wave
dt_19 <- dat_long |> 
  filter( wave == "2019") |> 
  select(id, wave, extraversion) #|> 
  # mutate(perfectionism_coarsen_n = as.numeric(perfectionism_coarsen),
  #        perfectionism_coarsen_crude_n = as.numeric( perfectionism_coarsen_crude))
quantile_breaks <- quantile(dt_19$extraversion, probs = seq(0, 1, 1/4), na.rm = TRUE)

# Create labels based on the cut points in the desired format
cut_labels <- paste0(quantile_breaks[-length(quantile_breaks)], "_", quantile_breaks[-1])

quantile_breaks

dt_19$extraversion_quartile <- cut(dt_19$extraversion,
                                        breaks = quantile_breaks,
                                        labels = cut_labels,
                                        ordered_result = TRUE,
                                        include.lowest = TRUE)

# create coarsened variable 
table(dt_19$extraversion_quartile)

dt_18_19 <- dat_long |> 
  filter(wave == "2018" | wave == "2019") |> 
  mutate(
     extraversion_quantile =  cut(
      extraversion,
      breaks = c(1, 3, 3.75, 4.75, 7),
      include.lowest = TRUE,
      include.highest = TRUE,
      na.rm = TRUE,
      right = FALSE
    ))|>
  mutate(extraversion_quantile = factor(
      extraversion_quantile,
      levels = c("[1,3)", "[3,3.75)", "[3.75,4.75)", "[4.75,7]"),
      labels = c("q_1", "q_2", "q_3", "q_4"),
      ordered = TRUE
    )  ) |> 
  mutate(extraversion_quantile_n = as.numeric( extraversion_quantile)) |> 
  select(id, wave, extraversion_quantile, extraversion_quantile_n) 

table(dt_18_19$extraversion_quantile)
here_save(dt_18_19, "dt_18_19")
out <- msm::statetable.msm(round(extraversion_quantile_n, 0), id, data = dt_18_19)

# for a function I wrote to create state tables
state_names <- c("q_1", "q_2", "q_3", "q_4")

# transition table

t_tab <- transition_table(out, state_names)

cat(t_tab$explanation)
print(t_tab$table, state_names)


n_unique(dat_long$id)

### DECISION -- GO WITH QUARTILES


dat_long <- dat_long|> 
  mutate(
     extraversion_quantile =  cut(
      extraversion,
      breaks = c(1, 3, 3.75, 4.75, 7),
      include.lowest = TRUE,
      include.highest = TRUE,
      na.rm = TRUE,
      right = FALSE
    ))|>
  mutate(extraversion_quantile = factor(
      extraversion_quantile,
      levels = c("[1,3)", "[3,3.75)", "[3.75,4.75)", "[4.75,7]"),
      labels = c("q_1", "q_2", "q_3", "q_4"),
      ordered = TRUE
    )  ) |> 
  droplevels() |> 
  arrange(id, wave)


# only look at vars at baseline
dat_18 <- dat_long |> 
  dplyr::filter(wave == 2018)

#saveRDS(dat_18, here::here(push_mods, "dat_18"))


dat_long <- dat_long |> 
  mutate( eth_cat = as.integer( eth_cat),
          urban = as.numeric(urban),
          education_level_coarsen = as.integer(education_level_coarsen))


#saveRDS(dat_long, here::here(push_mods, "dat_long"))

#dat_long <- readRDS(here::here(push_mods, "dat_long"))

```

```{r}
#|label: create-wide-data
# Create wide data frame
baseline_vars = c(
    "male",
    "age",
    "education_level_coarsen", # factors
    "eth_cat", #factor(EthCat, labels = c("Euro", "Maori", "Pacific", "Asian")),
   # "employed", # Are you currently employed? (this includes self-employment or casual work) # we have work hours
    #"gen_cohort", #age
    "nz_dep2018",
    "nzsei13",
    "total_siblings",# added: needed because we are dealing with family giving/receiving
    "born_nz",  # added 
    "hlth_disability",  # added 
    "household_inc_log", # added: measured with error but OK for imputations
    "partner",
    "religion_church_binary2",
    "religion_identification_level",
   # "parent",  # newly changed - have information in child number
    "pol_orient", #Please rate how politically liberal versus conservative you see yourself as being.
    "pol_wing", # Please rate how politically left-wing versus right-wing you see yourself as being.
    "sample_origin",    # Sample origin names combined
    "urban",
    "children_num",
   # "household_inc_log", # new from previous study. needed because we are dealing with family giving/receiving. # measured error
    "hours_children_log", # new
    "hours_work_log", # new
    "hours_housework_log", #new
    "agreeableness",
    "conscientiousness",
    "extraversion",
    "honesty_humility",
    "openness",
    "neuroticism",
    "modesty", # I want people to know that I am an important person of high status, I am an ordinary person who is no better than others. , I wouldn’t want people to treat me as though I were superior to them. I think that I am entitled to more respect than the average person is.
  #  "religion_religious", # Do you identify with a religion and/or spiritual group?
    #"religion_identification_level", #How important is your religion to how you see yourself?"
    "sample_weights",
    "sample_origin_names_combined"

)

baseline_vars

exposure_var = c("extraversion_quantile", "extraversion") # we could construct this after imputation. # "perfectionism_high" to be replace by "perfectionism_coarsen" - do the data wrangling after imputation.

outcome_vars_health = c(
    "alcohol_frequency",
    "alcohol_intensity",
    "hlth_bmi",
    "hours_exercise",
    "sfhealth_your_health",# "In general, would you say your health is...
    "sfhealth_get_sick_easier",#\nI seem to get sick a little easier than other people.
    "sfhealth_expect_worse_health",
    "hlth_sleep_hours",
    "smoker"
  )

outcome_vars_embodied = c(
    "hlth_fatigue",
    "rumination",
    "kessler_depressed",
    "kessler_effort",
    "kessler_hopeless",
    "kessler_nervous",
    "kessler_restless",
    "kessler_worthless"
  )

#rm(outcome_vars_social)
# nzsei
outcome_vars_practical = c(
    "nzsei13", # objective job success
    "bodysat", ## Am satisfied with the appearance, size and shape of my body.
    "vengeful_rumin",# Sometimes I can't sleep because of thinking about past wrongs I have suffered.//# I can usually forgive and forget when someone does me wrong.# I find myself regularly thinking about past times that I have been wronged.
    "perfectionism",  # # Doing my best never seems to be enough./# My performance rarely measures up to my standards.
# I am hardly ever satisfied with my performance.
    "power_self_nocontrol",# I do not have enough power or control over\nimportant parts of my life.
    "power_others_control", # Other people have too much power or control over\nimportant parts of my life
    "selfesteem_satself", #  On the whole am satisfied with myself.
    "selfesteem_postiveself",# Take a positive attitude toward myself
    "selfesteem_rfailure", # Am inclined to feel that I am a failure.
    "sexual_satisfaction",
    "self_control_have_lots",#In general, I have a lot of self-control.
    "self_control_wish_more_r",#I wish I had more self-discipline.(r)
    "emotion_regulation_out_control", # When I feel negative emotions, my emotions feel out of control. w10 - w13
    "emotion_regulation_hide_neg_emotions", # When I feel negative emotions, I suppress or hide my emotions. w10 - w13
    "emotion_regulation_change_thinking_to_calm"#, # When I feel negative emotions, I change the way I think to help me stay calm. w10 - w13
   # "emp_work_life_balance"# I have a good balance between work and other important things in my life.
  )
  
outcome_vars_reflective = c(
    "gratitude", ## I have much in my life to be thankful for. # When I look at the world, I don’t see much to be grateful for. # I am grateful to a wide variety of people.
    "pwi_health",#Your health.
    "pwi_relationships",#Your personal relationships.
    "pwi_security",#Your future security.
    "pwi_standardliving",#Your standard of living.
    "lifesat_satlife",# I am satisfied with my life.
    "lifesat_ideal",# In most ways my life is close to ideal.
    "meaning_purpose",# My life has a clear sense of purpose.
    "meaning_sense"# I have a good sense of what makes my life meaningful.
  )


outcome_vars_social = c(
    "permeability_individual",#I believe I am capable, as an individual\nof improving my status in society.
    "impermeability_group", #The current income gap between New Zealand Europeans and other ethnic groups would be very hard to change.
    "neighbourhood_community", #I feel a sense of community with others in my local neighbourhood.
    "support_help",# 'There are people I can depend on to help me if I really need it.
    "support_turnto",# There is no one I can turn to for guidance in times of stress.
    "support_rnoguidance", #There is no one I can turn to for guidance in times of stress.
    "belong_accept", #Know that people in my life accept and value me.
    "belong_routsider",# Feel like an outsider.
    "belong_beliefs",# Know that people around me share my attitudes and beliefs.
    "charity_donate",#How much money have you donated to charity in the last year?
    "hours_charity"#,#Hours spent in activities/Hours spent … voluntary/charitable work
  #  "nwi" # The economic situation in New Zealand./# The social conditions in New Zealand. # Business in New Zealand.
  )


# typically not needed -- optional 
#exclude_vars = c("year_measured")

# data for mice
prep_health <- create_wide_data_general(dat_long, 
  baseline_vars = baseline_vars, 
  exposure_var = exposure_var,
  outcome_vars = outcome_vars_health)

str(prep_health)
nrow(prep_health)
# 
# create_filtered_wide_dataframes <- function(dat_wide, exposure_vars) {
#   # Check if exposure_vars are in dat_wide
#   for (exposure_var in exposure_vars) {
#     if (!exposure_var %in% names(dat_wide)) {
#       stop(paste("exposure_var", exposure_var, "is not in the dataframe"))
#     }
#   }
# 
#   # Get factor and continuous exposure variables
#   factor_exposure_vars <- exposure_vars[sapply(dat_wide[exposure_vars], is.factor)]
#   continuous_exposure_vars <- setdiff(exposure_vars, factor_exposure_vars)
#   
#   if (length(factor_exposure_vars) > 1) {
#     stop("More than one factor exposure variable is not allowed")
#   }
#   
#   # Create a list to store the filtered dataframes
#   list_filtered_df <- list()
#   
#   if (length(factor_exposure_vars) == 1) {
#     # Get levels of the factor
#     factor_levels <- levels(dat_wide[[factor_exposure_vars]])
#     
#     # Loop over each level and filter the dataframe
#     for (level in factor_levels) {
#       filtered_df <- dat_wide %>% 
#         filter((!!rlang::sym(factor_exposure_vars)) == level) %>%
#         arrange(id)
#         
#       list_filtered_df[[level]] <- filtered_df
#     }
#   } else {
#     # If there are no factor exposure variables, just arrange by id
#     filtered_df <- dat_wide %>% arrange(id)
#     list_filtered_df[["data"]] <- filtered_df
#   }
#   
#   return(list_filtered_df)
# }
# 
# 

prep_health<- create_wide_data_general(dat_long, 
  baseline_vars = baseline_vars, 
  exposure_var = exposure_var,
  outcome_vars = outcome_vars_health)


## select variables for domains of outcome
## always to be determined with expert

# comment out what makes sense for a study
# household income not a great measurement




prep_embodied <- create_wide_data_general(dat_long, 
  baseline_vars = baseline_vars, 
  exposure_var = exposure_var,
  outcome_vars = outcome_vars_embodied)

str(prep_health)


prep_practical <- create_wide_data(dat_long, 
  baseline_vars = baseline_vars, 
  exposure_var = exposure_var,
  outcome_vars = outcome_vars_practical)

str(prep_practical)

prep_reflective <- create_wide_data(dat_long, 
  baseline_vars = baseline_vars, 
  exposure_var = exposure_var,
  outcome_vars = outcome_vars_reflective)

str(prep_reflective)

here_save(prep_reflective, "prep_reflective")

prep_social <- create_wide_data(dat_long, 
  baseline_vars = baseline_vars, 
  exposure_var = exposure_var,
  outcome_vars = outcome_vars_social)

str(prep_social)

exposure_vars = "t1_extraversion_quantile"

# create dataframes, one for each level of the factor.  This allows valid multiple imputation see: 
# https://bmcmedresmethodol.biomedcentral.com/articles/10.1186/s12874-023-01843-6


prep_health_multiple <- create_filtered_wide_dataframes(prep_health, exposure_vars = "t1_extraversion_quantile") 
# table(prep_health_multiple$q4$t1_household_inc_quantile)
# table(prep_health_multiple$q3$t1_household_inc_quantile)
# table(prep_health_multiple$q2$t1_household_inc_quantile)
# table(prep_health_multiple$q1$t1_household_inc_quantile)


prep_embodied_multiple <- create_filtered_wide_dataframes(prep_embodied, exposure_vars = "t1_extraversion_quantile") 



prep_practical_multiple <- create_filtered_wide_dataframes(prep_practical, exposure_vars = "t1_extraversion_quantile") 



prep_reflective_multiple <- create_filtered_wide_dataframes(prep_reflective, exposure_vars = "t1_extraversion_quantile") 



prep_social_multiple <- create_filtered_wide_dataframes(prep_social, exposure_vars = "t1_extraversion_quantile") 


a <- nrow( prep_social_multiple$q_1)
b <-nrow( prep_social_multiple$q_2)
c <-nrow( prep_social_multiple$q_3)
d <-nrow( prep_social_multiple$q_4)
a
b
# check
a + b + c + d == nrow(prep_social)

str(prep_embodied)

```

```{r}
#| label: tables
#| echo: false
#| include: false
#| eval: false
# check 
#table
# functions for table
my_render_cont <- function(x) {
  with(stats.apply.rounding(stats.default(x), digits=3), c("",
                                                           "Mean (SD)"=sprintf("%s (&plusmn; %s)", MEAN, SD)))
}

my_render_cat <- function(x) {
  c("", sapply(stats.default(x), function(y) with(y,
                                                  sprintf("%d (%0.0f %%)", FREQ, PCT))))
}


table_baseline_vars <- paste(baseline_vars, collapse = "+")
formula_string_table_baseline <- paste("~", table_baseline_vars, "|wave")

#formula_string <- paste("~", output_string)
formula_obj_baseline <- as.formula(formula_string_table_baseline)


# baseline table 
table_baseline  <-
  table1::table1(
    formula_obj_baseline,
    data = dat_18,
    overall = FALSE,
    render.continuous = my_render_cont,
    render.categorical = my_render_cat
  )


# make demographic tablem markdown
table_baseline |> 
  as.data.frame() |> 
  kbl(format = "markdown")

```

```{r}
#| label: imputations-health
#| echo: false
#| include: false
#| eval: false

# reduce missingness by looking at +2 only , and remove factor for faster imputation


# check missing in all datasets
str(prep_health)

# check missing
naniar::vis_miss(prep_health, warn_large_data = FALSE)

# check for collinear vars
mice:::find.collinear(prep_health)

# impute  
mice_health <- impute_and_combine(prep_health_multiple,  m = 10 )

# save imputed data
saveRDS(mice_health,
        here::here(push_mods, "mice_health"))

mice_health <- readRDS(
        here::here(push_mods, "mice_health"))


mice_health_c <- mice::complete(mice_health, action = 'long', include = TRUE)

# remove bad cols
mice_health_c <- mice_health_c |> select(-c(.id.1, .imp.1))

#vis_miss(mice_health_c, warn_large_data = FALSE)
table(mice_health_c$t1_extraversion_quantile)
table(mice_health_c$.imp)


row.names(mice_health_c) <- NULL

mice_health_mids <- mice_health_c %>%
    arrange(.imp, id) |> 
  rename(sample_weights = t0_sample_weights) |> 
  mutate(t0_eth_cat = as.factor(t0_eth_cat),
         t0_education_level_coarsen = as.factor(t0_education_level_coarsen),
         t0_smoker = as.factor(t0_smoker),
         t2_smoker = as.factor(t2_smoker),
         t0_hours_exercise = log(t0_hours_exercise + 1),
         t2_hours_exercise =  log(t2_hours_exercise +1)) |>
  dplyr::group_by(.imp, id) |>
 # rowwise() |> # group by id within .imp 
  # dplyr::mutate(t0_sfhealth = mean(
  #   c(
  #     t0_sfhealth_your_health,
  #     t0_sfhealth_get_sick_easier,
  #     t0_sfhealth_expect_worse_health  ),
  #   na.rm = TRUE
  # # )) |>
  #   dplyr::mutate(t2_sfhealth = mean(
  #   c(
  #     t2_sfhealth_your_health,
  #     t2_sfhealth_get_sick_easier,
  #     t2_sfhealth_expect_worse_health  ),
  #   na.rm = TRUE
  # )) |>
  dplyr::ungroup() |>
  dplyr::mutate(across(where(is.numeric) & !sample_weights, ~ scale(.x), .names = "{col}_z")) %>%
  select(-c(.imp_z, .id_z)) %>%
   select(
    where(is.factor),
    sample_weights,
    ends_with("_z"),
    .imp,
    .id
  ) |> 
  relocate(sample_weights, .before = starts_with("t1_"))  %>%
  relocate(id, .before = sample_weights)  %>%
  relocate(starts_with("t0_"), .before = starts_with("t1_"))  %>%
  relocate(starts_with("t2_"), .after = starts_with("t1_"))  %>%
  relocate(starts_with("t3_"), .after = starts_with("t3_"))  %>%
  arrange(.imp, id) |> 
  droplevels() |> 
  mutate_if(is.matrix, as.vector) |> 
  as.mids()
  

mice_health_long <- mice::complete(mice_health_mids, "long", inc = TRUE)
warnings()

# correct
table(mice_health_long$.imp)
str(mice_health_long$t0_education_level_coarsen)
str(mice_health_long$t0_alert_level_combined_lead)
str(mice_health_long$t0_sample_origin_names_combined)

saveRDS(mice_health_mids, here::here(push_mods, "mice_health_mids"))
saveRDS(mice_health_long, here::here(push_mods, "mice_health_long"))
```

```{r}
#| label: imputations-embodied
#| echo: false
#| include: false
#| eval: false
# embodied
naniar::vis_miss(prep_embodied, warn_large_data = FALSE)

dev.off()

# check for collinear vars
mice:::find.collinear(prep_embodied)

colnames(prep_embodied_multiple)
# prep factors remove for speed

mice_embodied <- impute_and_combine(prep_embodied_multiple,  m=10)

# save imputed data
saveRDS(mice_embodied,
        here::here(push_mods, "mice_embodied"))

mice_embodied <- readRDS(
        here::here(push_mods, "mice_embodied"))


mice_embodied_c  <- mice::complete(mice_embodied, action = 'long', include = TRUE)

mice_embodied_c <- mice_embodied_c |> select(-c(.id.1, .imp.1))


# check data
skimr::skim(mice_embodied_c)

# checks
table(mice_embodied_c$t1_extraversion_quantile)
table(mice_embodied_c$.imp)



row.names(mice_embodied_c) <- NULL


mice_embodied_mids <- mice_embodied_c %>%
  arrange(.imp, id) |> 
  rename(sample_weights = t0_sample_weights) |> 
  mutate( 
         t0_eth_cat = as.factor(t0_eth_cat),
         t0_education_level_coarsen = as.factor(t0_education_level_coarsen)) |> 
  dplyr::group_by(.imp) |> # means within imputations 
  rowwise() |> 
  # dplyr::mutate(t0_kessler_6 = mean(
  #   c(
  #   t0_kessler_depressed,
  #   t0_kessler_effort,
  #   t0_kessler_hopeless,
  #   t0_kessler_nervous,
  #   t0_kessler_restless,
  #   t0_kessler_worthless ),
  #   na.rm = TRUE
  # )) |>
  #   dplyr::mutate(t2_kessler_6 = mean(
  #   c(
  #   t2_kessler_depressed,
  #   t2_kessler_effort,
  #   t2_kessler_hopeless,
  #   t2_kessler_nervous,
  #   t2_kessler_restless,
  #   t2_kessler_worthless ),
  #   na.rm = TRUE
  # )) |> 
  #   dplyr::mutate(t2_kessler_6_depression = mean(
  #   c(
  #   t2_kessler_depressed,
  #   t2_kessler_hopeless,
  #   t2_kessler_worthless ),
  #   na.rm = TRUE
  #   )) |>
  # dplyr::mutate(t2_kessler_6_anxiety = mean(
  #   c(t2_kessler_effort,
  #     t2_kessler_nervous,
  #     t2_kessler_restless ),
  #   na.rm = TRUE
  # )) |> 
  dplyr::ungroup() |> 
  dplyr::mutate(across(where(is.numeric) & !sample_weights, ~ scale(.x), .names = "{col}_z")) %>%
  select(-c(.imp_z, .id_z)) %>%
   select(
    where(is.factor),
    sample_weights,
    ends_with("_z"),
    .imp,
    .id
  ) |> 
  relocate(sample_weights, .before = starts_with("t1_"))  %>%
  relocate(id, .before = sample_weights)  %>%
  relocate(starts_with("t0_"), .before = starts_with("t1_"))  %>%
  relocate(starts_with("t2_"), .after = starts_with("t1_"))  %>%
  mutate_if(is.matrix, as.vector) %>%
  as.mids()
  

mice_embodied_long <- mice::complete(mice_embodied_mids, "long", inc = TRUE)

saveRDS(mice_embodied_mids, here::here(push_mods, "mice_embodied_mids"))
saveRDS(mice_embodied_long, here::here(push_mods, "mice_embodied_long"))

str(mice_embodied_long$t0_education_level_coarsen)

```

```{r}
#| label: imputations-practical
#| echo: false
#| include: false
#| eval: false

# embodied
naniar::vis_miss(prep_practical, warn_large_data = FALSE)


# check for collinear vars
mice:::find.collinear(prep_practical)


colnames(prep_practical)
# prep factors remove for speed

mice_practical <- impute_and_combine(prep_practical_multiple,  m=10)



# save imputed data
saveRDS(mice_practical,
        here::here(push_mods, "mice_practical"))

mice_practical <- readRDS(here::here(push_mods, "mice_practical"))


mice_practical  <- mice::complete(mice_practical, action = 'long', include = TRUE)

mice_practical <- mice_practical |> select(-c(.id.1, .imp.1))

table(mice_practical$.imp)

# check data
skimr::skim(mice_practical)

row.names(mice_practical) <- NULL

mice_practical_mids <- mice_practical %>%
  arrange(.imp, id) |>
  rename(sample_weights = t0_sample_weights) |>
  mutate(
    t0_eth_cat = as.factor(t0_eth_cat),
    t0_education_level_coarsen = as.factor(t0_education_level_coarsen)
  ) |>
  dplyr::group_by(.imp) |>
  rowwise() |>
  # dplyr::mutate(t0_powerdependence = mean(
  #   c(
  #   t0_power_self_nocontrol,
  #   t0_power_others_control),
  #   na.rm = TRUE
#  )) |>
  # dplyr::mutate(t0_selfesteem = mean(
  #   c(
  #     t0_selfesteem_satself,
  #     t0_selfesteem_postiveself,
  #     t0_selfesteem_rfailure
  #   ),
  #   na.rm = TRUE
  # )) |>
  # dplyr::select(-c(
  #   t0_selfesteem_satself,
  #   t0_selfesteem_postiveself,
  #   t0_selfesteem_rfailure
  # )) |>
  # dplyr::mutate(t0_self_control = mean(
  #   c(t0_self_control_have_lots,
  #     t0_self_control_wish_more_r),
  #   na.rm = TRUE
  # )) |>
  # dplyr::select(-c(t0_self_control_have_lots,
  #                  t0_self_control_wish_more_r)) |>
  # dplyr::mutate(t0_emotion_regulation = mean(
  #   c(
  #     t0_emotion_regulation_out_control,
  #     t0_emotion_regulation_hide_neg_emotions,
  #     t0_emotion_regulation_change_thinking_to_calm
  #   ),
  #   na.rm = TRUE
  # )) |>
  # dplyr::select(-c(
  #     t0_emotion_regulation_out_control,
  #     t0_emotion_regulation_hide_neg_emotions,
  #     t0_emotion_regulation_change_thinking_to_calm
  #   )
  # ) |>
  #   dplyr::mutate(t2_powerdependence = mean(
  #   c(
  #   t2_power_self_nocontrol,
  #   t2_power_others_control),
  #   na.rm = TRUE
  # )) |>
  # dplyr::mutate(t2_selfesteem = mean(
  #   c(
  #     t2_selfesteem_satself,
  #     t2_selfesteem_postiveself,
  #     t2_selfesteem_rfailure
  #   ),
  #   na.rm = TRUE
  # )) |>
  # dplyr::mutate(t2_self_control = mean(
  #   c(t2_self_control_have_lots,
  #     t2_self_control_wish_more_r),
  #   na.rm = TRUE
  # )) |>
  # dplyr::mutate(t2_emotion_regulation = mean(
  #   c(
  #     t2_emotion_regulation_out_control,
  #     t2_emotion_regulation_hide_neg_emotions,
  #     t2_emotion_regulation_change_thinking_to_calm
  #   ),
  #   na.rm = TRUE
  # )) |>
  dplyr::ungroup() |>
  dplyr::mutate(across(where(is.numeric) &
                         !sample_weights, ~ scale(.x), .names = "{col}_z")) %>%
  select(-c(.imp_z, .id_z)) %>%
  select(where(is.factor),
         sample_weights,
         ends_with("_z"),
         .imp,
         .id) |>
  relocate(sample_weights, .before = starts_with("t1_"))  %>%
  relocate(id, .before = sample_weights)  %>%
  relocate(starts_with("t0_"), .before = starts_with("t1_"))  %>%
  relocate(starts_with("t2_"), .after = starts_with("t1_"))  |>
  droplevels() |>
  mutate_if(is.matrix, as.vector) %>%
  as.mids()

mice_practical_long <- mice::complete(mice_practical_mids, "long", inc = TRUE)

saveRDS(mice_practical_mids, here::here(push_mods, "mice_practical_mids"))
saveRDS(mice_practical_long, here::here(push_mods, "mice_practical_long"))

```

```{r}
#| label: imputations-reflective
#| echo: false
#| include: false
#| eval: false

# reflective
naniar::vis_miss(prep_reflective, warn_large_data = FALSE)

# check for collinear vars
mice:::find.collinear(prep_reflective)

prep_reflective_multiple
colnames(prep_reflective)
str(prep_reflective)
prep_reflective<- data.frame(prep_reflective)
str(prep_reflective)
# impute

mice_reflective <- impute_and_combine(prep_reflective_multiple, m = 10)

# save imputed data
saveRDS(mice_reflective,
        here::here(push_mods, "mice_reflective"))

mice_reflective <- readRDS(here::here(push_mods, "mice_reflective"))


mice_reflective_c  <- mice::complete(mice_reflective, action = 'long', include = TRUE)

mice_reflective_c <- mice_reflective_c |> select(-c(.id.1, .imp.1))


# check data
skimr::skim(mice_reflective_c)

# check exposure
table(mice_reflective_c$t1_household_inc_quantile)

row.names(mice_reflective_c) <- NULL


mice_reflective_mids <- mice_reflective_c %>%
  arrange(.imp, id) |> 
  rename(sample_weights = t0_sample_weights) |> 
  mutate( t0_eth_cat = as.factor(t0_eth_cat),
         t0_education_level_coarsen = as.factor(t0_education_level_coarsen)) |> 
  dplyr::group_by(.imp) |>
  rowwise() |> 
  # dplyr::mutate(t0_pwi = mean(
  #   c(
  #   t0_pwi_health,
  #   t0_pwi_relationships,
  #   t0_pwi_security,
  #   t0_pwi_standardliving),
  #   na.rm = TRUE
  # )) |>
  #   dplyr::mutate(t0_lifesat = mean(
  #   c(
  #   t0_lifesat_satlife,
  #   t0_lifesat_ideal),
  #   na.rm = TRUE
  # )) |>
  #   dplyr::mutate(t0_meaning = mean(
  #   c(
  #   t0_meaning_purpose,
  #   t0_meaning_sense),
  #   na.rm = TRUE
  # )) |> 
  #   dplyr::mutate(t2_pwi = mean(
  #   c(
  #   t2_pwi_health,
  #   t2_pwi_relationships,
  #   t2_pwi_security,
  #   t2_pwi_standardliving),
  #   na.rm = TRUE
  # )) |>
  #   dplyr::mutate(t2_lifesat = mean(
  #   c(
  #   t2_lifesat_satlife,
  #   t2_lifesat_ideal),
  #   na.rm = TRUE
  # )) |>
  #   dplyr::mutate(t2_meaning = mean(
  #   c(
  #   t2_meaning_purpose,
  #   t2_meaning_sense),
  #   na.rm = TRUE
  # )) |> 
  dplyr::ungroup() |> 
  dplyr::mutate(across(where(is.numeric) & !sample_weights, ~ scale(.x), .names = "{col}_z")) %>%
  select(-c(.imp_z, .id_z)) %>%
   select(
    where(is.factor),
    sample_weights,
    ends_with("_z"),
    .imp,
    .id
  ) |> 
  relocate(sample_weights, .before = starts_with("t1_"))  %>%
  relocate(id, .before = sample_weights)  %>%
  relocate(starts_with("t0_"), .before = starts_with("t1_"))  %>%
  relocate(starts_with("t2_"), .after = starts_with("t1_"))  %>%
  mutate_if(is.matrix, as.vector) %>%
  droplevels() |> 
  as.mids()
  

# creat complete data frame (for viewing)
mice_reflective_long <- mice::complete(mice_reflective_mids, "long", inc = TRUE)


saveRDS(mice_reflective_mids, here::here(push_mods, "mice_reflective_mids"))
saveRDS(mice_reflective_long, here::here(push_mods, "mice_reflective_long"))
```

```{r}
#| label: imputations-social
#| echo: false
#| include: false
#| eval: false

naniar::vis_miss(prep_social, warn_large_data = FALSE)

dev.off()

# check for collinear vars
mice:::find.collinear(prep_social)


# impute
mice_social <- impute_and_combine(prep_social_multiple, m = 10)


# save imputed data
saveRDS(mice_social,
        here::here(push_mods, "mice_social"))


mice_social <- readRDS(here::here(push_mods, "mice_social"))



mice_social_c  <- mice::complete(mice_social, action = 'long', include = TRUE)

mice_social_c <- mice_social_c |> select(-c(.id.1, .imp.1))

# check data
skimr::skim(mice_social_c)

# check exposure
table(mice_social_c$t1_household_inc_quantile)

row.names(mice_social_c) <- NULL


mice_social_mids <- mice_social_c %>%
  arrange(.imp, id) |> 
  rename(sample_weights = t0_sample_weights) |> 
  mutate(t0_eth_cat = as.factor(t0_eth_cat),
         t0_education_level_coarsen = as.factor(t0_education_level_coarsen),
         t0_charity_donate = log(t0_charity_donate + 1),
         t2_charity_donate = log(t2_charity_donate + 1),
         t0_volunteers = as.factor(ifelse(t0_hours_charity > 1,1,0)),
         t2_volunteers = as.factor(ifelse(t2_hours_charity > 1,1,0)))|>
  dplyr::group_by(.imp) |>
  rowwise() |> 
  # dplyr::mutate(t0_support = mean(
  #   c(
  #   t0_support_help,
  #   t0_support_turnto,
  #   t0_support_rnoguidance),
  #   na.rm = TRUE
  # )) |>
  #   dplyr::mutate(t0_belong = mean(
  #   c(
  #   t0_belong_accept,
  #   t0_belong_routsider,
  #   t0_belong_beliefs),
  #   na.rm = TRUE
  # )) |> 
  #  dplyr::mutate(t2_support = mean(
  #   c(
  #   t2_support_help,
  #   t2_support_turnto,
  #   t2_support_rnoguidance),
  #   na.rm = TRUE
  # )) |>
  #   dplyr::mutate(t2_belong = mean(
  #   c(
  #   t2_belong_accept,
  #   t2_belong_routsider,
  #   t2_belong_beliefs),
  #   na.rm = TRUE
  # )) |> 
  dplyr::ungroup() |> 
  dplyr::mutate(across(where(is.numeric) & !sample_weights, ~ scale(.x), .names = "{col}_z")) %>%
  select(-c(.imp_z, .id_z)) %>%
   select(
    where(is.factor),
    sample_weights,
    ends_with("_z"),
    .imp,
    .id
  ) |> 
  relocate(id, .before = sample_weights)  %>%
  relocate(sample_weights, .before = starts_with("t1_"))  %>%
  relocate(starts_with("t0_"), .before = starts_with("t1_"))  %>%
  relocate(starts_with("t2_"), .after = starts_with("t1_"))  %>%
  mutate_if(is.matrix, as.vector) %>%
  droplevels() |> 
  as.mids()
  

mice_social_long <- mice::complete(mice_social_mids, "long", inc = TRUE)

# save
saveRDS(mice_social_mids, here::here(push_mods, "mice_social_mids"))
saveRDS(mice_social_long, here::here(push_mods, "mice_social_long"))
```

```{r}
#| label: models-health-quantile
#| eval: false

mice_health_mids <- readRDS(here::here(push_mods, "mice_health_mids"))


# longform data if necessary
mice_health_long <- readRDS(here::here(push_mods, "mice_health_long"))


# Set exposure 
X <- "t1_extraversion_quantile"

library(MatchThem)
baseline_vars_health = mice_health_long |> 
  dplyr::select(starts_with("t0"), -c("t0_extraversion_z",
))|> colnames() # strange to include these -- as they  are income by other names


#check
baseline_vars_health
str(mice_health_mids)

#vis_miss(mice_health_long, warn_large_data = FALSE)

baseline_vars_health

table( mice_health_long$sample_weights) # sparce urban
# ebalance
dt_match_health_ebal <- match_mi_general(data = mice_health_mids, 
                                 X = X, 
                                 baseline_vars = baseline_vars_health, 
                                 estimand = "ATE",  
                               #  focal = "q_2", # if using the ATE
                                 method = "ebal", 
                                 sample_weights = "sample_weights")

saveRDS(dt_match_health_ebal, here::here(push_mods, "dt_match_health_ebal"))

warnings()

# energy balance
# dt_match_health_energy <- match_mi(data = mice_health_mids, 
#                                    X = X, 
#                                    baseline_vars = baseline_vars_health, 
#                                    estimand = "ATE",  
#                                    method = "energy", 
# #                                    sample_weights = "sample_weights")
# 
# saveRDS(dt_match_health_energy, here::here(push_mods, "dt_match_health"))
# 
# # propensity score
# dt_match_health_ps <- match_mi(data = mice_health_mids, X = X, baseline_vars = baseline_vars_health, estimand = "ATE",  method = "ps", sample_weights = "sample_weights")
# saveRDS(dt_match_health_ps, here::here(push_mods, "dt_match_health"))
# 

sum_ebal <- summary(dt_match_health_ebal)
# sum_energy <- summary(dt_match_health_energy)
# sum_ps <- summary(dt_match_health_ps)

sum_ebal
plot(sum_ebal)
plot(sum_energy)
plot(sum_ps)


bal.tab(dt_match_health_ebal)
bal.tab(dt_match_health_energy)
bal.tab(dt_match_health_ps)


# if trim is needed



dt_match_health_ebal_trim <- WeightIt::trim(dt_match_health_ebal, at = .999)
here_save(dt_match_health_ebal_trim, "dt_match_health_ebal_trim")

plot( summary(dt_match_health_ebal_trim) )
 summary(dt_match_health_ebal_trim)

bt <- bal.tab(dt_match_health_ebal_trim, abs = TRUE)

# check
bt$Pair.Balance$`q_4 vs. q_2`


bal.tab(dt_match_health_ebal,stats = c("m", "ks", "v"), abs = TRUE)

love.plot(dt_match_health_ebal_trim, binary = "std", thresholds = c(m = .1))
#love.plot(dt_match_health_ps, binary = "std", thresholds = c(m = .1))

dev.off()

# settings 

# Set DF  
dt_health = dt_match_health_ebal


# bootstrap simulations
nsims <- 200

# cores
cl =  parallel::detectCores () 


# outcome 
Y = "t2_alcohol_frequency_z"


levels( prep_health$t1_household_inc_quantile )

treat_0 = "q_2"
treat_1 = "q_4"
# as specified
vcov = "HC2" # robust standard errors. 


# cores
cores = parallel::detectCores () # use all course
cores 

# outcomes

#################################### THIS IS HOW WE MODEL (UNDER THE HOOD) 
# X
# 
# Y = "t2_hours_exercise_z"
# #formula_str_A <- paste(X, "~", paste(baseline_vars_health, collapse = "+"))
# formula_str_Y <- paste(Y, "~", X , "*", "(", paste(baseline_vars_health, collapse = "+"), ")")
# 
# # check
# formula_str_Y
# 
# fits <- lapply(complete(dt_health, "all"), function(d) {
#   lm(formula_str_Y, data = d,
#       weights = weights
#      )
# })
# 
# #pool(fits) |> summary() |> select(term, estimate, std.error)
# 
# sim.imp <- misim(fits, n = 200, vcov = "HC2")
# 
# sim.att <- sim_ame(sim.imp, var = X,
#                    subset = t1_extraversion_quantile == treat_1, cl = 3,
#                    verbose = TRUE)
# 
# 
# est_1 <- transform(sim.att, RD = `E[Y(q_4)]` - `E[Y(q_2)]`)
# 
# sum_mod <- summary( est_1, level = .9) 
# sum_mod
# 
# plot(sim.att ,  ci = TRUE, level = .95, reference = FALSE, method = "wald")
# 

#outcome_vars_health

mod_health_alcohol_frequency  <- double_robust(
  df = dt_health,  # note change
  Y = "t2_alcohol_frequency_z",
  X = X,
  baseline_vars = baseline_vars_health,
  treat_1 = treat_1,
  treat_0 = treat_0,
  estimand = "ATE",
  scale = "RD",
  nsims = nsims,
  cores = cores,
  family = "gaussian",
  weights = TRUE,
  continuous_X = FALSE,
  splines = FALSE, 
  new_name = "alcohol frequency (sd)"
)

mod_health_alcohol_frequency
# save model
saveRDS(mod_health_alcohol_frequency, here::here(push_mods, "mod_health_alcohol_frequency"))

# other <- readRDS( here::here(push_mods, "mod_health_alcohol_frequency"))


mod_health_alcohol_intensity  <- double_robust(
  df = dt_health,  # note change
  X = X,
  Y = "t2_alcohol_intensity_z",
  baseline_vars = baseline_vars_health,
  treat_1 = treat_1,
  treat_0 = treat_0,
  estimand = "ATE",
  scale = "RD",
  nsims = nsims,
  cores = cores,
  family = "gaussian",
  weights = TRUE,
  continuous_X = FALSE,
  splines = FALSE, 
  new_name = "Alcohol intensity (sd)"
)

mod_health_alcohol_intensity
# save model
saveRDS(mod_health_alcohol_intensity, here::here(push_mods, "mod_health_alcohol_intensity"))


mod_health_hlth_bmi  <- double_robust(
  df = dt_health,  # note change
  X = X,
  Y = "t2_hlth_bmi_z",
  baseline_vars = baseline_vars_health,
  treat_1 = treat_1,
  treat_0 = treat_0,
  estimand = "ATE",
  scale = "RD",
  nsims = nsims,
  cores = cores,
  family = "gaussian",
  weights = TRUE,
  continuous_X = FALSE,
  splines = FALSE, 
  new_name = "Hlth bmi (sd)"
)

mod_health_hlth_bmi
# save model
saveRDS(mod_health_hlth_bmi, here::here(push_mods, "mod_health_hlth_bmi"))


mod_health_hours_exercise  <- double_robust(
  df = dt_health,  # note change
  X = X,
  Y = "t2_hours_exercise_z",
  baseline_vars = baseline_vars_health,
  treat_1 = treat_1,
  treat_0 = treat_0,
  estimand = "ATE",
  scale = "RD",
  nsims = nsims,
  cores = cores,
  family = "gaussian",
  weights = TRUE,
  continuous_X = FALSE,
  splines = FALSE, 
  new_name = "Hours exercise (log sd)",
  vcov = vcov
)

mod_health_hours_exercise

# save model
saveRDS(mod_health_hours_exercise, here::here(push_mods, "mod_health_hours_exercise"))

# reduction of an hour
# exp(-.0199)
# exp(.0151)


mod_health_sfhealth_your_health  <- double_robust(
 df = dt_health,  # note change
  X = X,
  Y = "t2_sfhealth_your_health_z",
  baseline_vars = baseline_vars_health,
  treat_1 = treat_1,
  treat_0 = treat_0,
  estimand = "ATE",
  scale = "RD",
  nsims = nsims,
  cores = cores,
  family = "gaussian",
  weights = TRUE,
  continuous_X = FALSE,
  splines = FALSE, 
  new_name = "SF Health your health (sd)"
)

mod_health_sfhealth_your_health


# save model
saveRDS(mod_health_sfhealth_your_health, here::here(push_mods, "mod_health_sfhealth_your_health"))


mod_health_sfhealth_get_sick_easier  <- double_robust(
  df = dt_health,  # note change
  X = X,# note change
  Y = "t2_sfhealth_get_sick_easier_z",
  baseline_vars = baseline_vars_health,
  treat_1 = treat_1,
  treat_0 = treat_0,
  estimand = "ATE",
  scale = "RD",
  nsims = nsims,
  cores = cores,
  family = "gaussian",
  weights = TRUE,
  continuous_X = FALSE,
  splines = FALSE, 
  new_name = "SF Health get sick easier (sd, reversed)"
)

mod_health_sfhealth_get_sick_easier


# save model
saveRDS(mod_health_sfhealth_get_sick_easier, here::here(push_mods, "mod_health_sfhealth_get_sick_easier"))



mod_health_sfhealth_expect_worse_health  <- double_robust(
  df = dt_health,  # note change
  X = X,
  Y = "t2_sfhealth_expect_worse_health_z",
  baseline_vars = baseline_vars_health,
  treat_1 = treat_1,
  treat_0 = treat_0,
  estimand = "ATE",
  scale = "RD",
  nsims = nsims,
  cores = cores,
  family = "gaussian",
  weights = TRUE,
  continuous_X = FALSE,
  splines = FALSE, 
  new_name = "SF Health expect worse health (sd)"
)

mod_health_sfhealth_expect_worse_health


# save model
saveRDS(mod_health_sfhealth_expect_worse_health, here::here(push_mods, "mod_health_sfhealth_expect_worse_health"))



# 
# mod_health_sfhealth_comp  <- double_robust(
#   df = dt_health,  # note change
#   X = X,
#   Y = "t2_sfhealth_z",
#   baseline_vars = baseline_vars_health,
#   treat_1 = treat_1,
#   treat_0 = treat_0,
#   estimand = "ATE",
#   scale = "RD",
# 
#   nsims = nsims,
#   cores = cores,
#   family = "gaussian",
#   weights = TRUE,
#   continuous_X = FALSE,
#   splines = FALSE, 
#   new_name = "sfhealth_z (composite)"
# )
# 
# mod_health_sfhealth_comp

# # save model
# saveRDS(mod_health_sfhealth_comp, here::here(push_mods, "mod_health_sfhealth_comp"))




## 
mod_health_hlth_sleep_hours  <- double_robust(
  df = dt_health,  
  X = X,
  Y = "t2_hlth_sleep_hours_z",
  baseline_vars = baseline_vars_health,
  treat_1 = treat_1,
  treat_0 = treat_0,
  estimand = "ATE",
  scale = "RD",
  nsims = nsims,
  cores = cores,
  family = "gaussian",
  weights = TRUE,
  continuous_X = FALSE,
  splines = FALSE, 
  new_name = "Hlth sleep Hours (sd)")

mod_health_hlth_sleep_hours
# save model
saveRDS(mod_health_hlth_sleep_hours, here::here(push_mods, "mod_health_hlth_sleep_hours"))




## Risk Ratio - not working
mod_health_smoker  <- double_robust(
  df = dt_health,  
  X = X,
  Y = "t2_smoker",
  baseline_vars = 1, # convergence issues
  treat_1 = treat_1,
  treat_0 = treat_0,
  estimand = "ATE",
  scale = "RR",
  type = "RR",
  nsims = nsims,
  cores = cores,
  family = binomial (link = log),
  weights = TRUE,
  continuous_X = FALSE,
  splines = FALSE, 
  new_name = "Smoker (y/n)",
  vcov ="HC")


mod_health_smoker

# save model
saveRDS(mod_health_smoker, here::here(push_mods, "mod_health_smoker"))


# needs work
# interpret_table(mod_health_hlth_sleep_hours, estimand = "hours sleep", causal_scale = "risk_difference")

## combo-table

tab_health <-
  rbind(
mod_health_hlth_bmi,
mod_health_alcohol_frequency,
mod_health_alcohol_intensity,
mod_health_hours_exercise,
mod_health_sfhealth_your_health,
mod_health_sfhealth_get_sick_easier,
mod_health_sfhealth_expect_worse_health,
#mod_health_sfhealth_comp,
mod_health_hlth_sleep_hours
  )

tab_health

#tab_cont_df <- as.data.frame(tab_cont)



group_tab_health <- group_tab(tab_health, type = "RD")

group_tab_health
saveRDS(group_tab_health, here::here(push_mods, "group_tab_health"))


group_plot_ate_health <- group_plot_ate(group_tab_health,    
                          
                           title = "ATE: causal contrast:second to fourth quartile of extraversion", 
                           subtitle = "Health outcomes", 
                           xlab = "(sd units)", 
                           ylab = "test",
                           x_offset = -.5,
                           x_lim_lo = -.5,
                           x_lim_hi = 0.1)  
group_plot_ate_health


ggsave(
  group_plot_ate_health,
  path = here::here(here::here(push_mods, "group_plot_ate_health")),
  width = 8,
  height = 4,
  units = "in",
  filename = "group_plot_ate_health_use.png",
  device = 'png',
  limitsize = FALSE,
  dpi = 600
)

dev.off()
```

```{r}
#| label: models-embodied-quantile
#| eval: false

mice_embodied_mids <- readRDS(here::here(push_mods, "mice_embodied_mids"))

# longform data if necessary
mice_embodied_long <- readRDS(here::here(push_mods, "mice_embodied_long"))



# baselin vars ---------------------------------------------------------
library(MatchThem)
baseline_vars_embodied = mice_embodied_long |> 
  dplyr::select(starts_with("t0"), -c("t0_extraversion_z")
)|> colnames() # strange to include these -- as they  are income by other names

baseline_vars_embodied

names_t2 <- mice_embodied_long |> 
  dplyr::select(starts_with("t2"))|> colnames() 
names_t2

options(scipen = 999)

str(mice_health_mids)


# ebalance
mice_embodied_ebal <- match_mi(data = mice_embodied_mids, 
                                 X = X, 
                                 baseline_vars = baseline_vars_embodied, 
                                 estimand = "ATE",  
                                 method = "ebal", 
                                 sample_weights = "sample_weights")

saveRDS(mice_embodied_ebal, here::here(push_mods, "mice_embodied_ebal"))

# energy balance
# dt_match_health_energy <- match_mi(data = mice_health_mids, 
#                                    X = X, 
#                                    baseline_vars = baseline_vars_health, 
#                                    estimand = "ATE",  
#                                    method = "energy", 
#                                    sample_weights = "sample_weights")
# 
# saveRDS(dt_match_health_energy, here::here(push_mods, "dt_match_health"))

# propensity score
dt_match_health_ps <- match_mi(data = mice_health_mids, X = X, baseline_vars = baseline_vars_health, estimand = "ATE",  method = "ps", sample_weights = "sample_weights")
saveRDS(dt_match_health_ps, here::here(push_mods, "dt_match_health"))


sum_ebal <- summary(mice_embodied_ebal)
sum_energy <- summary(dt_match_health_energy)
sum_ps <- summary(dt_match_health_ps)

sum_ebal
plot(sum_ebal)
plot(sum_energy)
plot(sum_ps)


bal.tab(mice_embodied_ebal)
bal.tab(dt_match_health_energy)
bal.tab(dt_match_health_ps)


# if trim is needed
mice_embodied_ebal_trim <- WeightIt::trim(mice_embodied_ebal, at = .999)
sum_ebal_trim <- summary(mice_embodied_ebal_trim)
sum_ebal_trim

plot(sum_ebal_trim)
bal.tab(mice_embodied_ebal_trim,stats = c("m", "ks"), abs = TRUE)


bt <- bal.tab(mice_embodied_ebal_trim, abs = TRUE)

# check
bt$Pair.Balance$`q_4 vs. q_2`


love.plot(mice_embodied_ebal_trim, binary = "std", thresholds = c(m = .1))
love.plot(dt_match_health_ps, binary = "std", thresholds = c(m = .1))

dev.off()

# settings 
# Set DF 
dt_embodied = mice_embodied_ebal # use full

# bootstrap simulations
nsims <- 200

# cores
cl =  parallel::detectCores () 


# x variable 
# Set exposure 
X 

X
treat_0 
treat_1 
# as specified
vcov 

X
# cores
cores = parallel::detectCores () # use all course
cores 

# outcomes


# add composite t2_kessler_6


mod_embodied_hlth_fatigue  <- double_robust(
  df = dt_embodied,  # note change
  Y = "t2_hlth_fatigue_z",
  X = X,
  baseline_vars = baseline_vars_embodied,
  treat_1 = treat_1,
  treat_0 = treat_0,
  estimand = "ATE",
  scale = "RD",
  nsims = nsims,
  cores = cores,
  family = "gaussian",
  weights = TRUE,
  continuous_X = FALSE,
  splines = FALSE, 
  new_name = "Hlth fatigue (sd)"
)

mod_embodied_hlth_fatigue
# save model
saveRDS(mod_embodied_hlth_fatigue, here::here(push_mods, "mod_embodied_hlth_fatigue"))

# rumination
mod_embodied_rumination  <- double_robust(
  df = dt_embodied,  # note change
  Y = "t2_rumination_z",
  X = X,
  baseline_vars = baseline_vars_embodied,
  treat_1 = treat_1,
  treat_0 = treat_0,
  estimand = "ATE",
  scale = "RD",
  nsims = nsims,
  cores = cores,
  family = "gaussian",
  weights = TRUE,
  continuous_X = FALSE,
  splines = FALSE, 
  new_name = "Rumination (sd)"
)

mod_embodied_rumination
# save model
saveRDS(mod_embodied_rumination, here::here(push_mods, "mod_embodied_rumination"))

## kessler_depressed
mod_embodied_kessler_depressed  <- double_robust(
  df = dt_embodied,  # note change
  Y = "t2_kessler_depressed_z",
  X = X,
  baseline_vars = baseline_vars_embodied,
  treat_1 = treat_1,
  treat_0 = treat_0,
  estimand = "ATE",
  scale = "RD",
  nsims = nsims,
  cores = cores,
  family = "gaussian",
  weights = TRUE,
  continuous_X = FALSE,
  splines = FALSE, 
  new_name = "Kessler depressed (sd)"
)

mod_embodied_kessler_depressed
# save model
saveRDS(mod_embodied_kessler_depressed, here::here(push_mods, "mod_embodied_kessler_depressed"))



## kessler_effort
mod_embodied_kessler_effort  <- double_robust(
  df = dt_embodied,  # note change
  Y = "t2_kessler_effort_z",
  X = X,
  baseline_vars = baseline_vars_embodied,
  treat_1 = treat_1,
  treat_0 = treat_0,
  estimand = "ATE",
  scale = "RD",
  nsims = nsims,
  cores = cores,
  family = "gaussian",
  weights = TRUE,
  continuous_X = FALSE,
  splines = FALSE, 
  new_name = "Kessler effort (sd)"
)

mod_embodied_kessler_effort
# save model
saveRDS(mod_embodied_kessler_effort, here::here(push_mods, "mod_embodied_kessler_effort"))


## kessler_hopeless
mod_embodied_kessler_hopeless  <- double_robust(
  df = dt_embodied,  # note change
  Y = "t2_kessler_hopeless_z",
  X = X,
  baseline_vars = baseline_vars_embodied,
  treat_1 = treat_1,
  treat_0 = treat_0,
  estimand = "ATE",
  scale = "RD",
  nsims = nsims,
  cores = cores,
  family = "gaussian",
  weights = TRUE,
  continuous_X = FALSE,
  splines = FALSE, 
  new_name = "Kessler hopeless (sd)"
)

mod_embodied_kessler_hopeless
# save model
saveRDS(mod_embodied_kessler_hopeless, here::here(push_mods, "mod_embodied_kessler_hopeless"))


## kessler_nervous
mod_embodied_kessler_nervous  <- double_robust(
  df = dt_embodied,  # note change
  Y = "t2_kessler_nervous_z",
  X = X,
  baseline_vars = baseline_vars_embodied,
  treat_1 = treat_1,
  treat_0 = treat_0,
  estimand = "ATE",
  scale = "RD",
  nsims = nsims,
  cores = cores,
  family = "gaussian",
  weights = TRUE,
  continuous_X = FALSE,
  splines = FALSE, 
  new_name = "Kessler nervous (sd)"
)

mod_embodied_kessler_nervous
# save model
saveRDS(mod_embodied_kessler_nervous, here::here(push_mods, "mod_embodied_kessler_nervous"))


## kessler_restless
mod_embodied_kessler_restless  <- double_robust(
  df = dt_embodied,  # note change
  Y = "t2_kessler_restless_z",
  X = X,
  baseline_vars = baseline_vars_embodied,
  treat_1 = treat_1,
  treat_0 = treat_0,
  estimand = "ATE",
  scale = "RD",
  nsims = nsims,
  cores = cores,
  family = "gaussian",
  weights = TRUE,
  continuous_X = FALSE,
  splines = FALSE, 
  new_name = "kessler restless (sd)"
)

mod_embodied_kessler_restless
# save model
saveRDS(mod_embodied_kessler_restless, here::here(push_mods, "mod_embodied_kessler_restless"))


## kessler_worthless
mod_embodied_kessler_worthless  <- double_robust(
  df = dt_embodied,  # note change
  Y = "t2_kessler_worthless_z",
  X = X,
  baseline_vars = baseline_vars_embodied,
  treat_1 = treat_1,
  treat_0 = treat_0,
  estimand = "ATE",
  scale = "RD",
  nsims = nsims,
  cores = cores,
  family = "gaussian",
  weights = TRUE,
  continuous_X = FALSE,
  splines = FALSE, 
  new_name = "Kessler worthless (sd)"
)

mod_embodied_kessler_worthless
# save model
saveRDS(mod_embodied_kessler_worthless, here::here(push_mods, "mod_embodied_kessler_worthless"))


# 
# ## t2_kessler_6
# mod_embodied_kessler_6  <- double_robust(
#   df = dt_embodied,  # note change
#   Y = "t2_kessler_6_z",
#   X = X,
#   baseline_vars = baseline_vars_embodied,
#   treat_1 = treat_1,
#   treat_0 = treat_0,
#   estimand = "ATE",
#   scale = "RD",
#   nsims = nsims,
#   cores = cores,
#   family = "gaussian",
#   weights = TRUE,
#   continuous_X = FALSE,
#   splines = FALSE, 
#   new_name = "kessler_6_z (composite)"
# )
# 
# mod_embodied_kessler_6
# # save model
# saveRDS(mod_embodied_kessler_6, here::here(push_mods, "mod_embodied_kessler_6"))
# 
# 
# 
# mod_embodied_kessler_6_depression  <- double_robust(
#   df = dt_embodied,  # note change
#   Y = "t2_kessler_6_depression_z",
#   X = X,
#   baseline_vars = baseline_vars_embodied,
#   treat_1 = treat_1,
#   treat_0 = treat_0,
#   estimand = "ATE",
#   scale = "RD",
#   nsims = nsims,
#   cores = cores,
#   family = "gaussian",
#   weights = TRUE,
#   continuous_X = FALSE,
#   splines = FALSE, 
#   new_name = "kessler_6_depression_z (composite)"
# )
# 
# mod_embodied_kessler_6_depression

# 
# # save model
# saveRDS(mod_embodied_kessler_6_depression, here::here(push_mods, "mod_embodied_kessler_6_depression"))
# 
# 
# 
# mod_embodied_kessler_6_anxiety <- double_robust(
#   df = dt_embodied,  # note change
#   Y = "t2_kessler_6_anxiety_z",
#   X = X,
#   baseline_vars = baseline_vars_embodied,
#   treat_1 = treat_1,
#   treat_0 = treat_0,
#   estimand = "ATE",
#   scale = "RD",
# 
#   nsims = nsims,
#   cores = cores,
#   family = "gaussian",
#   weights = TRUE,
#   continuous_X = FALSE,
#   splines = FALSE, 
#   new_name = "kessler_6_anxiety_z (composite)"
# )
# 
# mod_embodied_kessler_6_anxiety

# 
# # save model
# saveRDS(mod_embodied_kessler_6_anxiety, here::here(push_mods, "mod_embodied_kessler_6_anxiety"))


## combo-table

tab_embodied <-
  rbind(
mod_embodied_hlth_fatigue,
mod_embodied_rumination,
mod_embodied_kessler_depressed,
mod_embodied_kessler_effort,
mod_embodied_kessler_hopeless,
mod_embodied_kessler_nervous,
mod_embodied_kessler_restless,
mod_embodied_kessler_worthless#``  `,
#mod_embodied_kessler_6,
#mod_embodied_kessler_6_depression,
#mod_embodied_kessler_6_anxiety
  )

tab_embodied


group_tab_embodied <- group_tab(tab_embodied, type = "RD")

group_tab_embodied



group_plot_ate_embodied <- margot_plot(
  group_tab_embodied,
  title = "ATE: causal contrast:second to fourth quartile of extraversion", 
  subtitle = "Embodied Outcomes",
  xlab = "(sd units)",
  ylab = "test",
  x_offset = -.6,
  x_lim_lo = -.6,
  x_lim_hi = .2
)  

group_plot_ate_embodied


dev.off()
ggsave(
  group_plot_ate_embodied,
  path = here::here(here::here(push_mods, "group_plot_ate_embodied")),
  width = 8,
  height = 4,
  units = "in",
  filename = "ggroup_plot_ate_embodied.png",
  device = 'png',
  limitsize = FALSE,
  dpi = 600
)

dev.off()
```

```{r}
#| label: models-practical-quantile
#| eval: false


mice_practical_mids <- readRDS(here::here(push_mods, "mice_practical_mids"))

# longform data if necessary
mice_practical_long <- readRDS(here::here(push_mods, "mice_practical_long"))


# Set exposure 
X <- "t1_extraversion_quantile"



baseline_vars_practical = mice_practical_long |> 
  dplyr::select(starts_with("t0"), -c("t0_extraversion_z"))|> colnames() # strange to include these -- as they  are income by other names


exposure_vars_practical = mice_practical_long |> dplyr::select(starts_with("t1")) |> colnames()
outcome_vars_practical = mice_practical_long |> dplyr::select(starts_with("t2")) |> colnames()
outcome_vars_practical



# ebalance
mice_practical_ebal <- match_mi(data = mice_practical_mids, 
                                 X = X, 
                                 baseline_vars = baseline_vars_practical, 
                                 estimand = "ATE",  
                                 method = "ebal", 
                                 sample_weights = "sample_weights")

saveRDS(mice_practical_ebal, here::here(push_mods, "mice_practical_ebal"))

# energy balance
# dt_match_health_energy <- match_mi(data = mice_health_mids, 
#                                    X = X, 
#                                    baseline_vars = baseline_vars_health, 
#                                    estimand = "ATE",  
#                                    method = "energy", 
#                                    sample_weights = "sample_weights")

# saveRDS(dt_match_health_energy, here::here(push_mods, "dt_match_health"))
# 
# # propensity score
dt_match_health_ps <- match_mi(data = mice_health_mids, X = X, baseline_vars = baseline_vars_health, estimand = "ATE",  method = "ps", sample_weights = "sample_weights")
saveRDS(dt_match_health_ps, here::here(push_mods, "dt_match_health"))


sum_ebal <- summary(mice_practical_ebal)
sum_energy <- summary(dt_match_health_energy)
sum_ps <- summary(dt_match_health_ps)

sum_ebal
plot(sum_ebal)
plot(sum_energy)
plot(sum_ps)


bal.tab(mice_embodied_ebal)
bal.tab(dt_match_health_energy)
bal.tab(dt_match_health_ps)


# if trim is needed
mice_practical_ebal_trim <- WeightIt::trim(mice_practical_ebal, at = .999)
sum_ebal_trim <- summary(mice_practical_ebal_trim)
sum_ebal_trim

plot(sum_ebal_trim)
bal_tt <- bal.tab(mice_practical_ebal_trim, stats = c("m","v"), abs = TRUE)

bal_tt$Pair.Balance$`q_4 vs. q_2`

love.plot(mice_practical_ebal_trim, binary = "std", thresholds = c(m = .1),  which.treat = c("q_2", "q_4"),  var.order = "unadjusted")

dev.off()

# settings 

# Set DF 
dt_practical = mice_practical_ebal # use untrimmed

# bootstrap simulations
nsims <- 200

# cores
cl =  parallel::detectCores () 


# x variable 
# Set exposure 
X

treat_0 
treat_1
# as specified
vcov = vcov # robust standard errors. 


# cores
cores = parallel::detectCores () # use all course

# outcomes

outcome_vars_practical
                                
push_mods
mod_practical_sexual_satisfaction <- double_robust(
  df = dt_practical,  # note change
  Y = "t2_sexual_satisfaction_z",
  X = X,
  baseline_vars = baseline_vars_practical,
  treat_1 = treat_1,
  treat_0 = treat_0,
  estimand = "ATE",
  scale = "RD",
  nsims = nsims,
  cores = cores,
  family = "gaussian",
  weights = TRUE,
  continuous_X = FALSE,
  splines = FALSE, 
  new_name = "Sexual satisfaction (sd)"
 )

mod_practical_sexual_satisfaction
saveRDS(mod_practical_sexual_satisfaction, here::here(push_mods, "mod_practical_sexual_satisfaction"))


mod_practical_perfectionism <- double_robust(
  df = dt_practical,  # note change
  Y = "t2_perfectionism_z",
  X = X,
  baseline_vars = baseline_vars_practical,
  treat_1 = treat_1,
  treat_0 = treat_0,
  estimand = "ATE",
  scale = "RD",
  nsims = nsims,
  cores = cores,
  family = "gaussian",
  weights = TRUE,
  continuous_X = FALSE,
  splines = FALSE, 
  new_name = "Perfectionism (sd)"
 )

mod_practical_perfectionism
saveRDS(mod_practical_perfectionism, here::here(push_mods, "mod_practical_perfectionism"))



# 
# mod_practical_nzsei13  <- double_robust(
#   df = dt_practical,  # note change
#   Y = "t2_nzsei13_z",
#   X = X,
#   baseline_vars = baseline_vars_practical,
#   treat_1 = treat_1,
#   treat_0 = treat_0,
#   estimand = "ATE",
#   scale = "RD",
# 
#   nsims = nsims,
#   cores = cores,
#   family = "gaussian",
#   weights = TRUE,
#   continuous_X = FALSE,
#   splines = FALSE, 
#   new_name = "t2_nzsei13_z"
# )

#mod_practical_nzsei13 # no effect on employment

# save model
#saveRDS(mod_practical_nzsei13, here::here(push_mods, "mod_practical_nzsei13"))

mod_practical_bodysat  <- double_robust(
  df = dt_practical,  # note change
  Y = "t2_bodysat_z",
  X = X,
  baseline_vars = baseline_vars_practical,
  treat_1 = treat_1,
  treat_0 = treat_0,
  estimand = "ATE",
  scale = "RD",
  nsims = nsims,
  cores = cores,
  family = "gaussian",
  weights = TRUE,
  continuous_X = FALSE,
  splines = FALSE, 
  new_name = "Bodysat (sd)"
)

mod_practical_bodysat

# save model
saveRDS(mod_practical_bodysat, here::here(push_mods, "mod_practical_bodysat"))


mod_practical_vengeful_rumin  <- double_robust(
  df = dt_practical,  # note change
  Y = "t2_vengeful_rumin_z",
  X = X,
  baseline_vars = baseline_vars_practical,
  treat_1 = treat_1,
  treat_0 = treat_0,
  estimand = "ATE",
  scale = "RD",
  nsims = nsims,
  cores = cores,
  family = "gaussian",
  weights = TRUE,
  continuous_X = FALSE,
  splines = FALSE, 
  new_name = "Vengeful rumin (sd)"
)

mod_practical_vengeful_rumin

# save model
saveRDS(mod_practical_vengeful_rumin, here::here(push_mods, "mod_practical_vengeful_rumin"))



mod_practical_power_self_nocontrol  <- double_robust(
  df = dt_practical,  # note change
  Y = "t2_power_self_nocontrol_z",
  X = X,
  baseline_vars = baseline_vars_practical,
  treat_1 = treat_1,
  treat_0 = treat_0,
  estimand = "ATE",
  scale = "RD",
  nsims = nsims,
  cores = cores,
  family = "gaussian",
  weights = TRUE,
  continuous_X = FALSE,
  splines = FALSE, 
  new_name = "Power self nocontrol (sd)"
)

mod_practical_power_self_nocontrol

# save model
saveRDS(mod_practical_power_self_nocontrol, here::here(push_mods, "mod_practical_power_self_nocontrol"))


mod_practical_power_others_control  <- double_robust(
  df = dt_practical,  # note change
  Y = "t2_power_others_control_z",
  X = X,
  baseline_vars = baseline_vars_practical,
  treat_1 = treat_1,
  treat_0 = treat_0,
  estimand = "ATE",
  scale = "RD",
  nsims = nsims,
  cores = cores,
  family = "gaussian",
  weights = TRUE,
  continuous_X = FALSE,
  splines = FALSE, 
  new_name = "Power other control (sd)"
)

mod_practical_power_others_control

# save model
saveRDS(mod_practical_power_others_control, here::here(push_mods, "mod_practical_power_others_control"))

# 
# mod_practical_powerdependence  <- double_robust(
#   df = dt_practical,  # note change
#   Y = "t2_powerdependence_z",
#   X = X,
#   baseline_vars = baseline_vars_practical,
#   treat_1 = treat_1,
#   treat_0 = treat_0,
#   estimand = "ATE",
#   scale = "RD",
# 
#   nsims = nsims,
#   cores = cores,
#   family = "gaussian",
#   weights = TRUE,
#   continuous_X = FALSE,
#   splines = FALSE, 
#   new_name = "powerdependence_z"
# )

#mod_practical_powerdependence

# save model
#saveRDS(mod_practical_powerdependence, here::here(push_mods, "mod_practical_powerdependence"))



mod_practical_selfesteem_satself  <- double_robust(
  df = dt_practical,  # note change
  Y = "t2_selfesteem_satself_z",
  X = X,
  baseline_vars = baseline_vars_practical,
  treat_1 = treat_1,
  treat_0 = treat_0,
  estimand = "ATE",
  scale = "RD",
  nsims = nsims,
  cores = cores,
  family = "gaussian",
  weights = TRUE,
  continuous_X = FALSE,
  splines = FALSE, 
  new_name = "Selfesteem satself (sd)"
)

mod_practical_selfesteem_satself


# save model
saveRDS(mod_practical_selfesteem_satself, here::here(push_mods, "mod_practical_selfesteem_satself"))

mod_practical_selfesteem_postiveself  <- double_robust(
  df = dt_practical,  # note change
  Y = "t2_selfesteem_postiveself_z",
  X = X,
  baseline_vars = baseline_vars_practical,
  treat_1 = treat_1,
  treat_0 = treat_0,
  estimand = "ATE",
  scale = "RD",
  nsims = nsims,
  cores = cores,
  family = "gaussian",
  weights = TRUE,
  continuous_X = FALSE,
  splines = FALSE, 
  new_name = "Selfesteem postive self (sd)"
)

mod_practical_selfesteem_postiveself

# save model
saveRDS(mod_practical_selfesteem_postiveself, here::here(push_mods, "mod_practical_selfesteem_postiveself"))


mod_practical_selfesteem_rfailure  <- double_robust(
  df = dt_practical,  # note change
  Y = "t2_selfesteem_rfailure_z",
  X = X,
  baseline_vars = baseline_vars_practical,
  treat_1 = treat_1,
  treat_0 = treat_0,
  estimand = "ATE",
  scale = "RD",
  nsims = nsims,
  cores = cores,
  family = "gaussian",
  weights = TRUE,
  continuous_X = FALSE,
  splines = FALSE, 
  new_name = "Selfesteem failure (sd, reversed)"
)

mod_practical_selfesteem_rfailure

# save model
saveRDS(mod_practical_selfesteem_rfailure, here::here(push_mods, "mod_practical_selfesteem_rfailure"))

# 
# mod_practical_selfesteem  <- double_robust(
#   df = dt_practical,  # note change
#   Y = "t2_selfesteem_z",
#   X = X,
#   baseline_vars = baseline_vars_practical,
#   treat_1 = treat_1,
#   treat_0 = treat_0,
#   estimand = "ATE",
#   scale = "RD",
# 
#   nsims = nsims,
#   cores = cores,
#   family = "gaussian",
#   weights = TRUE,
#   continuous_X = FALSE,
#   splines = FALSE, 
#   new_name = "selfesteem_z"
# )
# 
# mod_practical_selfesteem

# save model
# saveRDS(mod_practical_selfesteem, here::here(push_mods, "mod_practical_selfesteem"))


mod_practical_self_control_have_lots  <- double_robust(
  df = dt_practical,  # note change
  Y = "t2_self_control_have_lots_z",
  X = X,
  baseline_vars = baseline_vars_practical,
  treat_1 = treat_1,
  treat_0 = treat_0,
  estimand = "ATE",
  scale = "RD",
  nsims = nsims,
  cores = cores,
  family = "gaussian",
  weights = TRUE,
  continuous_X = FALSE,
  splines = FALSE, 
  new_name = "Self control have lots (sd)"
)

mod_practical_self_control_have_lots

# save model
saveRDS(mod_practical_self_control_have_lots, here::here(push_mods, "mod_practical_self_control_have_lots"))

mod_practical_self_control_wish_more_r  <- double_robust(
  df = dt_practical,  # note change
  Y = "t2_self_control_wish_more_r_z",
  X = X,
  baseline_vars = baseline_vars_practical,
  treat_1 = treat_1,
  treat_0 = treat_0,
  estimand = "ATE",
  scale = "RD",
  nsims = nsims,
  cores = cores,
  family = "gaussian",
  weights = TRUE,
  continuous_X = FALSE,
  splines = FALSE, 
  new_name = "Self control wish more (sd, reversed)"
)

mod_practical_self_control_wish_more_r

# save model
saveRDS(mod_practical_self_control_wish_more_r, here::here(push_mods, "mod_practical_self_control_wish_more_r"))

# 
# mod_practical_self_control <- double_robust(
#   df = dt_practical,  # note change
#   Y = "t2_self_control_z",
#   X = X,
#   baseline_vars = baseline_vars_practical,
#   treat_1 = treat_1,
#   treat_0 = treat_0,
#   estimand = "ATE",
#   scale = "RD",
# 
#   nsims = nsims,
#   cores = cores,
#   family = "gaussian",
#   weights = TRUE,
#   continuous_X = FALSE,
#   splines = FALSE, 
#   new_name = "self_control_z"
# )
# 
# mod_practical_self_control

# save model
#saveRDS(mod_practical_self_control, here::here(push_mods, "mod_practical_self_control"))



mod_practical_emotion_regulation_out_control <- double_robust(
  df = dt_practical,  # note change
  Y = "t2_emotion_regulation_out_control_z",
  X = X,
  baseline_vars = baseline_vars_practical,
  treat_1 = treat_1,
  treat_0 = treat_0,
  estimand = "ATE",
  scale = "RD",
  nsims = nsims,
  cores = cores,
  family = "gaussian",
  weights = TRUE,
  continuous_X = FALSE,
  splines = FALSE, 
  new_name = "Emotion reg out control (sd)"
)

mod_practical_emotion_regulation_out_control

# save model
saveRDS(mod_practical_emotion_regulation_out_control, here::here(push_mods, "mod_practical_emotion_regulation_out_control"))

mod_practical_emotion_regulation_hide_neg_emotions <- double_robust(
  df = dt_practical,  # note change
  Y = "t2_emotion_regulation_hide_neg_emotions_z",
  X = X,
  baseline_vars = baseline_vars_practical,
  treat_1 = treat_1,
  treat_0 = treat_0,
  estimand = "ATE",
  scale = "RD",
  nsims = nsims,
  cores = cores,
  family = "gaussian",
  weights = TRUE,
  continuous_X = FALSE,
  splines = FALSE, 
  new_name = "Emotion reg hide neg emotions (sd)"
)

mod_practical_emotion_regulation_hide_neg_emotions

# save model
saveRDS(mod_practical_emotion_regulation_hide_neg_emotions, here::here(push_mods, "mod_practical_emotion_regulation_hide_neg_emotions"))


mod_practical_emotion_regulation_change_thinking_to_calm <- double_robust(
  df = dt_practical,  # note change
  Y = "t2_emotion_regulation_change_thinking_to_calm_z",
  X = X,
  baseline_vars = baseline_vars_practical,
  treat_1 = treat_1,
  treat_0 = treat_0,
  estimand = "ATE",
  scale = "RD",
  nsims = nsims,
  cores = cores,
  family = "gaussian",
  weights = TRUE,
  continuous_X = FALSE,
  splines = FALSE, 
  new_name = "Emotion reg chang thinking to calm (sd)"
)

mod_practical_emotion_regulation_change_thinking_to_calm

# save model
saveRDS(mod_practical_emotion_regulation_change_thinking_to_calm, here::here(push_mods, "mod_practical_emotion_regulation_change_thinking_to_calm"))

# 
# mod_practical_emotion_regulation <- double_robust(
#   df = dt_practical,  # note change
#   Y = "t2_emotion_regulation_z",
#   X = X,
#   baseline_vars = baseline_vars_practical,
#   treat_1 = treat_1,
#   treat_0 = treat_0,
#   estimand = "ATE",
#   scale = "RD",
# 
#   nsims = nsims,
#   cores = cores,
#   family = "gaussian",
#   weights = TRUE,
#   continuous_X = FALSE,
#   splines = FALSE, 
#   new_name = "emotion_regulation_z"
# )
# 
# mod_practical_emotion_regulation
# save model
# saveRDS(mod_practical_emotion_regulation, here::here(push_mods, "mod_practical_emotion_regulation"))


# 
# mod_practical_emp_work_life_balance <- double_robust(
#   df = dt_practical,  # note change
#   Y = "t2_emp_work_life_balance_z",
#   X = X,
#   baseline_vars = baseline_vars_practical,
#   treat_1 = treat_1,
#   treat_0 = treat_0,
#   estimand = "ATE",
#   scale = "RD",
# 
#   nsims = nsims,
#   cores = cores,
#   family = "gaussian",
#   weights = TRUE,
#   continuous_X = FALSE,
#   splines = FALSE, 
#   new_name = "emp_work_life_balance (no baseline)"
# )
# 
#mod_practical_emp_work_life_balance
# # save model
# saveRDS(mod_practical_emp_work_life_balance, here::here(push_mods, "mod_practical_emp_work_life_balance"))



# 
# mod_practical_perfectionism <- double_robust(
#   df = dt_practical,  # note change
#   Y = "t2_perfectionism_z",
#   X = X,
#   baseline_vars = baseline_vars_practical,
#   treat_1 = treat_1,
#   treat_0 = treat_0,
#   estimand = "ATE",
#   scale = "RD",
# 
#   nsims = nsims,
#   cores = cores,
#   family = "gaussian",
#   weights = TRUE,
#   continuous_X = FALSE,
#   splines = FALSE, 
#   new_name = "perfectionism_z"
# )
# 
# # save model
# saveRDS(mod_practical_emp_work_life_balance, here::here(push_mods, "mod_practical_emp_work_life_balance"))
# 

## combo-table



tab_practical <-
  rbind(
  #  mod_practical_nzsei13,
    mod_practical_sexual_satisfaction,
    mod_practical_perfectionism,
    mod_practical_bodysat,
    mod_practical_vengeful_rumin,
    mod_practical_power_self_nocontrol,
    mod_practical_power_others_control,
   # mod_practical_powerdependence,
    mod_practical_selfesteem_satself,
    mod_practical_selfesteem_postiveself,
    mod_practical_selfesteem_rfailure,
  #  mod_practical_selfesteem,
    mod_practical_self_control_have_lots,
    mod_practical_self_control_wish_more_r,
   # mod_practical_self_control,
    mod_practical_emotion_regulation_out_control,
    mod_practical_emotion_regulation_hide_neg_emotions,
    mod_practical_emotion_regulation_change_thinking_to_calm
   # mod_practical_emotion_regulation#,
   # mod_practical_emp_work_life_balance
   # mod_practical_perfectionism
  )

tab_practical


group_tab_practical <- group_tab(tab_practical, type = "RD")

group_tab_practical



group_plot_ate_practical <- margot_plot(
  group_tab_practical,
  type = "RD",
  title = "ATE: causal contrast:first to third quartile of income", 
  subtitle = "Practical Outcomes",
  xlab = "(sd units)",
  ylab = "test",
  x_offset = -.8,
  x_lim_lo = -.75,
  x_lim_hi = .5
)

group_plot_ate_practical


dev.off()
ggsave(
  group_plot_ate_practical,
  path = here::here(here::here(push_mods, "group_plot_ate_practical")),
  width = 8,
  height = 4,
  units = "in",
  filename = "ggroup_plot_ate_practical.png",
  device = 'png',
  limitsize = FALSE,
  dpi = 600
)

```

```{r}
#| label: models-reflective-quantile
#| eval: false

mice_reflective_mids <- readRDS(here::here(push_mods, "mice_reflective_mids"))

# longform data if necessary
mice_reflective_long <- readRDS(here::here(push_mods, "mice_reflective_long"))

X
# Set exposure 
#X <- "t1_extraversion_quantile"



baseline_vars_reflective = mice_reflective_long |> 
  dplyr::select(starts_with("t0"), -c("t0_extraversion_z"))|> colnames() # strange to include these -- as they  are income by other names



exposure_vars_reflective = mice_reflective_long |> dplyr::select(starts_with("t1")) |> colnames()
outcome_vars_reflective = mice_reflective_long |> dplyr::select(starts_with("t2")) |> colnames()
outcome_vars_reflective



# ebalance
mice_reflective_ebal <- match_mi(data = mice_reflective_mids, 
                                 X = X, 
                                 baseline_vars = baseline_vars_reflective, 
                                 estimand = "ATE",  
                                 method = "ebal", 
                                 sample_weights = "sample_weights")

saveRDS(mice_reflective_ebal, here::here(push_mods, "mice_reflective_ebal"))

# energy balance

sum_ebal <- summary(mice_reflective_ebal, stats = c("m", "ks"), abs = TRUE)
sum_ebal

plot(sum_ebal)


bal.tab(mice_reflective_ebal)

bal.plot(mice_reflective_ebal, var.name = "t0_extraversion_quantile", which = "both")

love.plot(mice_practical_ebal, binary = "std", 
thresholds = c(m = .1),  
which.treat = c("q_2", "q_4"),  
var.order = "unadjusted")

# if trim is needed
mice_reflective_ebal_trim <- WeightIt::trim(mice_reflective_ebal, at = .999)
here_save(mice_reflective_ebal_trim, "mice_reflective_ebal_trim")
sum_ebal_trim <- summary(mice_reflective_ebal_trim)
sum_ebal_trim

plot(sum_ebal_trim)
bal.tab(mice_reflective_ebal_trim,stats = c("m", "ks"), abs = TRUE)
bal.plot(mice_reflective_ebal_trim, var.name = "t0_extraversion_quantile", which = "both")



love.plot(mice_reflective_ebal_trim, binary = "std", 
thresholds = c(m = .1),  
which.treat = c("q_2", "q_4"),  
var.order = "unadjusted")

love.plot(mice_reflective_ebal_trim, binary = "std", thresholds = c(m = .1))

dev.off()

# settings 

# Set DF 
dt_reflective = mice_reflective_ebal # without trim

# bootstrap simulations
nsims <- 200

# cores
cl =  parallel::detectCores () 


# x variable 
# Set exposure 
X 


treat_0 
treat_1
# as specified
vcov


# cores
cores = parallel::detectCores () # use all course

# outcomes

outcome_vars_reflective
                                

mod_reflective_gratitude  <- double_robust(
  df = dt_reflective,  # note change
  Y = "t2_gratitude_z",
  X = X,
  baseline_vars = baseline_vars_reflective,
  treat_1 = treat_1,
  treat_0 = treat_0,
  estimand = "ATE",
  scale = "RD",
  nsims = nsims,
  cores = cores,
  family = "gaussian",
  weights = TRUE,
  continuous_X = FALSE,
  splines = FALSE, 
  new_name = "Gratitude (sd)"
)

mod_reflective_gratitude

# save model
saveRDS(mod_reflective_gratitude, here::here(push_mods, "mod_reflective_gratitude"))


mod_reflective_pwi_health  <- double_robust(
  df = dt_reflective,  # note change
  Y = "t2_pwi_health_z",
  X = X,
  baseline_vars = baseline_vars_reflective,
  treat_1 = treat_1,
  treat_0 = treat_0,
  estimand = "ATE",
  scale = "RD",
  nsims = nsims,
  cores = cores,
  family = "gaussian",
  weights = TRUE,
  continuous_X = FALSE,
  splines = FALSE, 
  new_name = "PWI health (sd)"
)

mod_reflective_pwi_health

# save model
saveRDS(mod_reflective_pwi_health, here::here(push_mods, "mod_reflective_pwi_health"))


mod_reflective_pwi_relationships  <- double_robust(
  df = dt_reflective,  # note change
  Y = "t2_pwi_relationships_z",
  X = X,
  baseline_vars = baseline_vars_reflective,
  treat_1 = treat_1,
  treat_0 = treat_0,
  estimand = "ATE",
  scale = "RD",
  nsims = nsims,
  cores = cores,
  family = "gaussian",
  weights = TRUE,
  continuous_X = FALSE,
  splines = FALSE, 
  new_name = "PWI Relationships (sd)"
)

mod_reflective_pwi_relationships

# save model
saveRDS(mod_reflective_pwi_relationships, here::here(push_mods, "mod_reflective_pwi_relationships"))


mod_reflective_pwi_security  <- double_robust(
  df = dt_reflective,  # note change
  Y = "t2_pwi_security_z",
  X = X,
  baseline_vars = baseline_vars_reflective,
  treat_1 = treat_1,
  treat_0 = treat_0,
  estimand = "ATE",
  scale = "RD",
  nsims = nsims,
  cores = cores,
  family = "gaussian",
  weights = TRUE,
  continuous_X = FALSE,
  splines = FALSE, 
  new_name = "PWI security (sd)"
)

mod_reflective_pwi_security

# save model
saveRDS(mod_reflective_pwi_security, here::here(push_mods, "mod_reflective_pwi_security"))


mod_reflective_pwi_standardliving  <- double_robust(
  df = dt_reflective,  # note change
  Y = "t2_pwi_standardliving_z",
  X = X,
  baseline_vars = baseline_vars_reflective,
  treat_1 = treat_1,
  treat_0 = treat_0,
  estimand = "ATE",
  scale = "RD",
  nsims = nsims,
  cores = cores,
  family = "gaussian",
  weights = TRUE,
  continuous_X = FALSE,
  splines = FALSE, 
  new_name = "PWI standardliving (sd)"
)

mod_reflective_pwi_standardliving

# save model
saveRDS(mod_reflective_pwi_standardliving, here::here(push_mods, "mod_reflective_pwi_standardliving"))


# 
# mod_reflective_pwi  <- double_robust(
#   df = dt_reflective,  # note change
#   Y = "t2_pwi_z",
#   X = X,
#   baseline_vars = baseline_vars_reflective,
#   treat_1 = treat_1,
#   treat_0 = treat_0,
#   estimand = "ATE",
#   scale = "RD",
# 
#   nsims = nsims,
#   cores = cores,
#   family = "gaussian",
#   weights = TRUE,
#   continuous_X = FALSE,
#   splines = FALSE, 
#   new_name = "pwi_z"
# )
# 
# mod_reflective_pwi
# 
# # save model
# saveRDS(mod_reflective_pwi, here::here(push_mods, "mod_reflective_pwi"))
# 

# lifesat

mod_reflective_lifesat_satlife  <- double_robust(
  df = dt_reflective,  # note change
  Y = "t2_lifesat_satlife_z",
  X = X,
  baseline_vars = baseline_vars_reflective,
  treat_1 = treat_1,
  treat_0 = treat_0,
  estimand = "ATE",
  scale = "RD",
  nsims = nsims,
  cores = cores,
  family = "gaussian",
  weights = TRUE,
  continuous_X = FALSE,
  splines = FALSE, 
  new_name = "Lifesat satlife (sd)"
)

mod_reflective_lifesat_satlife

# save model
saveRDS(mod_reflective_lifesat_satlife, here::here(push_mods, "mod_reflective_lifesat_satlife"))


mod_reflective_lifesat_ideal  <- double_robust(
  df = dt_reflective,  # note change
  Y = "t2_lifesat_ideal_z",
  X = X,
  baseline_vars = baseline_vars_reflective,
  treat_1 = treat_1,
  treat_0 = treat_0,
  estimand = "ATE",
  scale = "RD",
  nsims = nsims,
  cores = cores,
  family = "gaussian",
  weights = TRUE,
  continuous_X = FALSE,
  splines = FALSE, 
  new_name = "Lifesat ideal (sd)"
)

mod_reflective_lifesat_ideal

# save model
saveRDS(mod_reflective_lifesat_ideal, here::here(push_mods, "mod_reflective_lifesat_ideal"))
# 
# 
# ## lifesat
# mod_reflective_lifesat  <- double_robust(
#   df = dt_reflective,  # note change
#   Y = "t2_pwi_z",
#   X = X,
#   baseline_vars = baseline_vars_reflective,
#   treat_1 = treat_1,
#   treat_0 = treat_0,
#   estimand = "ATE",
#   scale = "RD",
# 
#   nsims = nsims,
#   cores = cores,
#   family = "gaussian",
#   weights = TRUE,
#   continuous_X = FALSE,
#   splines = FALSE, 
#   new_name = "lifesat_z"
# )
# 
# mod_reflective_lifesat

# save model
# saveRDS(mod_reflective_lifesat, here::here(push_mods, "mod_reflective_lifesat"))


# meaning


mod_reflective_meaning_purpose  <- double_robust(
  df = dt_reflective,  # note change
  Y = "t2_meaning_purpose_z",
  X = X,
  baseline_vars = baseline_vars_reflective,
  treat_1 = treat_1,
  treat_0 = treat_0,
  estimand = "ATE",
  scale = "RD",
  nsims = nsims,
  cores = cores,
  family = "gaussian",
  weights = TRUE,
  continuous_X = FALSE,
  splines = FALSE, 
  new_name = "Meaning purpose (sd)"
)

mod_reflective_meaning_purpose

# save model
saveRDS(mod_reflective_meaning_purpose, here::here(push_mods, "mod_reflective_meaning_purpose"))


mod_reflective_meaning_sense  <- double_robust(
  df = dt_reflective,  # note change
  Y = "t2_meaning_sense_z",
  X = X,
  baseline_vars = baseline_vars_reflective,
  treat_1 = treat_1,
  treat_0 = treat_0,
  estimand = "ATE",
  scale = "RD",
  nsims = nsims,
  cores = cores,
  family = "gaussian",
  weights = TRUE,
  continuous_X = FALSE,
  splines = FALSE, 
  new_name = "Meaning sense (sd)"
)

mod_reflective_meaning_sense

# save model
saveRDS(mod_reflective_meaning_sense, here::here(push_mods, "mod_reflective_meaning_sense"))
# 
# mod_reflective_meaning  <- double_robust(
#   df = dt_reflective,  # note change
#   Y = "t2_meaning_z",
#   X = X,
#   baseline_vars = baseline_vars_reflective,
#   treat_1 = treat_1,
#   treat_0 = treat_0,
#   estimand = "ATE",
#   scale = "RD",
# 
#   nsims = nsims,
#   cores = cores,
#   family = "gaussian",
#   weights = TRUE,
#   continuous_X = FALSE,
#   splines = FALSE, 
#   new_name = "meaning_z"
# )

#mod_reflective_meaning

# save model
#saveRDS(mod_reflective_meaning, here::here(push_mods, "mod_reflective_meaning"))


## combo-table
tab_reflective <- rbind(
  mod_reflective_gratitude,
  mod_reflective_pwi_health,
  mod_reflective_pwi_relationships,
  mod_reflective_pwi_security,
  mod_reflective_pwi_standardliving,
  #mod_reflective_pwi,
  mod_reflective_lifesat_satlife,
  mod_reflective_lifesat_ideal,
#  mod_reflective_lifesat,
  mod_reflective_meaning_purpose,
  mod_reflective_meaning_sense#,
 # mod_reflective_meaning
)

tab_reflective


group_tab_reflective <- group_tab(tab_reflective, type = "RD")

group_tab_reflective



group_plot_ate_reflective <- group_plot_ate(
  group_tab_reflective,
  title = "ATE: causal contrast:second to fourth quartile of extraversion", 
  subtitle = "Reflective Outcomes",
  xlab = "(sd units)",
  ylab = "test",
  x_offset = -.7,
  x_lim_lo = -.7,
  x_lim_hi = .3
)

group_plot_ate_reflective

ggsave(
  group_plot_ate_reflective,
  path = here::here(here::here(push_mods, "group_plot_ate_reflective")),
  width = 8,
  height = 4.5,
  units = "in",
  filename = "group_plot_ate_reflective.png",
  device = 'png',
  limitsize = FALSE,
  dpi = 600
)

dev.off()

```

```{r}
#| label: models-social-quantile
#| eval: false

mice_social_mids <- readRDS(here::here(push_mods, "mice_social_mids"))

# longform data if necessary
mice_social_long <- readRDS(here::here(push_mods, "mice_social_long"))

X
# Set exposure 
X <- "t1_extraversion_quantile"



baseline_vars_social = mice_social_long |> 
  dplyr::select(starts_with("t0"), -c("t0_extraversion_z"))|> colnames() # strange to include these -- as they  are income by other names


baseline_vars_social


outcome_vars_social = mice_social_long |> dplyr::select(starts_with("t2")) |> colnames()



# ebalance
mice_social_ebal <- match_mi(data = mice_social_mids, 
                                 X = X, 
                                 baseline_vars = baseline_vars_social, 
                                 estimand = "ATE",  
                                 method = "ebal", 
                                 sample_weights = "sample_weights")

saveRDS(mice_social_ebal, here::here(push_mods, "mice_social_ebal"))

# energy balance

sum_ebal <- summary(mice_social_ebal)
sum_ebal

plot(sum_ebal)


bal.tab(mice_social_ebal)

# if trim is needed
mice_social_ebal_trim <- WeightIt::trim(mice_social_ebal, at = .999)
sum_ebal_trim <- summary(mice_social_ebal_trim)
sum_ebal_trim

plot(sum_ebal_trim)
bt <-bal.tab(mice_social_ebal_trim,stats = c("m", "ks","v"), abs = TRUE)

bt$Pair.Balance$`q_4 vs. q_2`


love.plot(
  mice_social_ebal_trim,
  binary = "std",
  thresholds = c(m = .1),
  which.treat = c("q_2", "q_4"),
  var.order = "unadjusted"
)

dev.off()

# settings 

# Set DF 
dt_social = mice_social_ebal

# bootstrap simulations
nsims

# cores
cl =  parallel::detectCores () 

# check
treat_0 
treat_1
# as specified
vcov


# cores
cores = parallel::detectCores () # use all course

# outcomes
outcome_vars_social
                                

# # save model
# mod_social_belong  <- double_robust(
#   df = dt_social,  # note change
#   Y = "t2_belong_z",
#   X = X,
#   baseline_vars = baseline_vars_social,
#   treat_1 = treat_1,
#   treat_0 = treat_0,
#   estimand = "ATE",
#   scale = "RD",
# 
#   nsims = nsims,
#   cores = cores,
#   family = "gaussian",
#   weights = TRUE,
#   continuous_X = FALSE,
#   splines = FALSE, 
#   new_name = "belong_z"
# )

# 
# # save model
# saveRDS(mod_social_belong, here::here(push_mods, "mod_social_belong"))
# 
# 
# mod_social_support  <- double_robust(
#   df = dt_social,  # note change
#   Y = "t2_support_z",
#   X = X,
#   baseline_vars = baseline_vars_social,
#   treat_1 = treat_1,
#   treat_0 = treat_0,
#   estimand = "ATE",
#   scale = "RD",
# 
#   nsims = nsims,
#   cores = cores,
#   family = "gaussian",
#   weights = TRUE,
#   continuous_X = FALSE,
#   splines = FALSE, 
#   new_name = "support_z"
# )
# 
# mod_social_support

# # save model
# saveRDS(mod_social_support, here::here(push_mods, "mod_social_support"))
# 


mod_social_permeability_individual  <- double_robust(
  df = dt_social,  # note change
  Y = "t2_permeability_individual_z",
  X = X,
  baseline_vars = baseline_vars_social,
  treat_1 = treat_1,
  treat_0 = treat_0,
  estimand = "ATE",
  scale = "RD",
  nsims = nsims,
  cores = cores,
  family = "gaussian",
  weights = TRUE,
  continuous_X = FALSE,
  splines = FALSE, 
  new_name = "Permeability individual (sd)"
)

mod_social_permeability_individual
# save model
saveRDS(mod_social_permeability_individual, here::here(push_mods, "mod_social_permeability_individual"))




mod_social_impermeability_group  <- double_robust(
  df = dt_social,  # note change
  Y = "t2_impermeability_group_z",
  X = X,
  baseline_vars = baseline_vars_social,
  treat_1 = treat_1,
  treat_0 = treat_0,
  estimand = "ATE",
  scale = "RD",
  nsims = nsims,
  cores = cores,
  family = "gaussian",
  weights = TRUE,
  continuous_X = FALSE,
  splines = FALSE, 
  new_name = "Impermeability group (sd)"
)

mod_social_impermeability_group
# save model
saveRDS(mod_social_impermeability_group, here::here(push_mods, "mod_social_impermeability_group"))


mod_social_neighbourhood_community  <- double_robust(
  df = dt_social,  # note change
  Y = "t2_neighbourhood_community_z",
  X = X,
  baseline_vars = baseline_vars_social,
  treat_1 = treat_1,
  treat_0 = treat_0,
  estimand = "ATE",
  scale = "RD",
  nsims = nsims,
  cores = cores,
  family = "gaussian",
  weights = TRUE,
  continuous_X = FALSE,
  splines = FALSE, 
  new_name = "Neighbourhood community (sd)"
)

mod_social_neighbourhood_community

# save model
saveRDS(mod_social_neighbourhood_community, here::here(push_mods, "mod_social_neighbourhood_community"))



mod_social_support_help  <- double_robust(
  df = dt_social,  # note change
  Y = "t2_support_help_z",
  X = X,
  baseline_vars = baseline_vars_social,
  treat_1 = treat_1,
  treat_0 = treat_0,
  estimand = "ATE",
  scale = "RD",
  nsims = nsims,
  cores = cores,
  family = "gaussian",
  weights = TRUE,
  continuous_X = FALSE,
  splines = FALSE, 
  new_name = "Support help (sd)"
)

mod_social_support_help

# save model
saveRDS(mod_social_support_help, here::here(push_mods, "mod_social_support_help"))



mod_social_support_turnto  <- double_robust(
  df = dt_social,  # note change
  Y = "t2_support_turnto_z",
  X = X,
  baseline_vars = baseline_vars_social,
  treat_1 = treat_1,
  treat_0 = treat_0,
  estimand = "ATE",
  scale = "RD",
  nsims = nsims,
  cores = cores,
  family = "gaussian",
  weights = TRUE,
  continuous_X = FALSE,
  splines = FALSE, 
  new_name = "Support turnto (sd)"
)

mod_social_support_turnto

# save model
saveRDS(mod_social_support_turnto, here::here(push_mods, "mod_social_support_turnto"))


mod_social_support_rnoguidance  <- double_robust(
  df = dt_social,  # note change
  Y = "t2_support_rnoguidance_z",
  X = X,
  baseline_vars = baseline_vars_social,
  treat_1 = treat_1,
  treat_0 = treat_0,
  estimand = "ATE",
  scale = "RD",
  nsims = nsims,
  cores = cores,
  family = "gaussian",
  weights = TRUE,
  continuous_X = FALSE,
  splines = FALSE, 
  new_name = "Support noguidance (sd, reversed)"
)

mod_social_support_rnoguidance
# save model
saveRDS(mod_social_support_rnoguidance, here::here(push_mods, "mod_social_support_rnoguidance"))



mod_social_belong_accept  <- double_robust(
  df = dt_social,  # note change
  Y = "t2_belong_accept_z",
  X = X,
  baseline_vars = baseline_vars_social,
  treat_1 = treat_1,
  treat_0 = treat_0,
  estimand = "ATE",
  scale = "RD",
  nsims = nsims,
  cores = cores,
  family = "gaussian",
  weights = TRUE,
  continuous_X = FALSE,
  splines = FALSE, 
  new_name = "Belong accept (sd)"
)

mod_social_belong_accept

# save model
saveRDS(mod_social_belong_accept, here::here(push_mods, "mod_social_belong_accept"))



mod_social_belong_routsider  <- double_robust(
  df = dt_social,  # note change
  Y = "t2_belong_routsider_z",
  X = X,
  baseline_vars = baseline_vars_social,
  treat_1 = treat_1,
  treat_0 = treat_0,
  estimand = "ATE",
  scale = "RD",
  nsims = nsims,
  cores = cores,
  family = "gaussian",
  weights = TRUE,
  continuous_X = FALSE,
  splines = FALSE, 
  new_name = "Belong_outsider (sd, reversed)"
)

mod_social_belong_routsider

# save model
saveRDS(mod_social_belong_routsider, here::here(push_mods, "mod_social_belong_routsider"))




mod_social_belong_beliefs  <- double_robust(
  df = dt_social,  # note change
  Y = "t2_belong_beliefs_z",
  X = X,
  baseline_vars = baseline_vars_social,
  treat_1 = treat_1,
  treat_0 = treat_0,
  estimand = "ATE",
  scale = "RD",
  nsims = nsims,
  cores = cores,
  family = "gaussian",
  weights = TRUE,
  continuous_X = FALSE,
  splines = FALSE, 
  new_name = "Belong beliefs (sd)"
)
# save model
mod_social_belong_beliefs
saveRDS(mod_social_belong_beliefs, here::here(push_mods, "mod_social_belong_beliefs"))

mod_social_charity_donate  <- double_robust(
  df = dt_social,  # note change
  Y = "t2_charity_donate_z",
  X = X,
  baseline_vars = baseline_vars_social,
  treat_1 = treat_1,
  treat_0 = treat_0,
  estimand = "ATE",
  scale = "RD",
  nsims = nsims,
  cores = cores,
  family = "gaussian",
  weights = TRUE,
  continuous_X = FALSE,
  splines = FALSE, 
  new_name = "Charity donate (log, sd)"
)

mod_social_charity_donate

# save model
saveRDS(mod_social_charity_donate, here::here(push_mods, "mod_social_charity_donate"))


mod_social_volunteers_RR  <- double_robust(
  df = dt_social,  # note change
  Y = "t2_volunteers",
  X = X,
  baseline_vars = 1,
  treat_1 = treat_1,
  treat_0 = treat_0,
  estimand = "ATE",
  scale = "RR",
  type = "RR",
  nsims = nsims,
  cores = cores,
  family = binomial(link = log),
  weights = TRUE,
  continuous_X = FALSE,
  splines = FALSE, 
  new_name = "Volunteers (y/n)",
  vcov ="HC"
)

mod_social_volunteers_RR 

# save model
saveRDS(mod_social_volunteers_RR, here::here(push_mods, "mod_social_volunteers_RR"))


tab_social <- rbind(
 # mod_social_belong,
 # mod_social_support,
  mod_social_permeability_individual,
  mod_social_impermeability_group,
  mod_social_neighbourhood_community,
  mod_social_support_help,
  mod_social_support_turnto,
  mod_social_support_rnoguidance,
  mod_social_belong_accept,
  mod_social_belong_routsider,
  mod_social_belong_beliefs,
  mod_social_charity_donate
)

tab_social


group_tab_social <- group_tab(tab_social, type = "RD")

group_tab_social



group_plot_ate_social <- group_plot_ate(
  group_tab_social,
  title = "ATE: causal contrast:second to fourth quartile of extraversion", 
  subtitle = "Social Outcomes",
  xlab = "(sd units)",
  ylab = "test",
  x_offset = -.7,
  x_lim_lo = -.7,
  x_lim_hi = .3
)

group_plot_ate_social

ggsave(
  group_plot_ate_social,
  path = here::here(here::here(push_mods, "group_plot_ate_social")),
  width = 8,
  height = 4.5,
  units = "in",
  filename = "group_plot_ate_social.png",
  device = 'png',
  limitsize = FALSE,
  dpi = 600
)



```

```{r}
#| label: tests_continuous 
#| eval: false
# 
# 
# # read  (if needed)
# mod_social_belong <- readRDS( here::here(push_mods, "mod_social_belong"))
# mod_social_support <- readRDS(here::here(push_mods, "mod_social_support"))
# mod_social_permeability_individual <- readRDS( here::here(push_mods, "mod_social_permeability_individual"))
# mod_social_impermeability_group <- readRDS( here::here(push_mods, "mod_social_impermeability_group"))
# mod_social_neighbourhood_community<- readRDS(here::here(push_mods, "mod_social_neighbourhood_community"))
# mod_social_support_help <- readRDS(here::here(push_mods, "mod_social_support_help"))
# mod_social_support_turnto <- readRDS( here::here(push_mods, "mod_social_support_turnto"))
# mod_social_support_rnoguidance <- readRDS( here::here(push_mods, "mod_social_support_rnoguidance"))
# mod_social_belong_accept <- readRDS(here::here(push_mods, "mod_social_belong_accept"))
# mod_social_belong_routsider <- readRDS( here::here(push_mods, "mod_social_belong_routsider"))
# mod_social_belong_beliefs <- readRDS(here::here(push_mods, "mod_social_belong_beliefs"))
# mod_social_charity_donate <- readRDS(here::here(push_mods, "mod_social_charity_donate"))
# mod_social_volunteers_RR <- readRDS( here::here(push_mods, "mod_social_volunteers_RR"))

## combo-table


tab_social <- rbind(
  mod_social_belong,
  mod_social_support,
  mod_social_permeability_individual,
  mod_social_impermeability_group,
  mod_social_neighbourhood_community,
  mod_social_support_help,
  mod_social_support_turnto,
  mod_social_support_rnoguidance,
  mod_social_belong_accept,
  mod_social_belong_routsider,
  mod_social_belong_beliefs,
  mod_social_charity_donate
)

tab_social


group_tab_social <- group_tab(tab_social, type = "RD")

group_tab_social



group_plot_ate_social <- group_plot_ate(
  group_tab_social,

  title = "ATE: causal contrast:first to third quartile of income", 
  subtitle = "Social Outcomes",
  xlab = "(sd units)",
  ylab = "test",
  x_offset = -.7,
  x_lim_lo = -.7,
  x_lim_hi = .3
)

group_plot_ate_social


dev.off()
ggsave(
  group_plot_ate_social,
  path = here::here(here::here(push_mods, "group_plot_ate_social")),
  width = 8,
  height = 4,
  units = "in",
  filename = "group_plot_ate_social.png",
  device = 'png',
  limitsize = FALSE,
  dpi = 600
)

group_plot_ate_social


# 
# #| label: compare embodied approaches
# 
# # read quartile models
# mod_embodied_hlth_fatigue_quart <- readRDS(here::here(push_mods, "mod_embodied_hlth_fatigue_quart"))
# 
# mod_embodied_rumination_quart <- readRDS(here::here(push_mods, "mod_embodied_rumination_quart"))
# 
# mod_embodied_kessler_hopeless_quart <- readRDS(here::here(push_mods, "mod_embodied_kessler_hopeless_quart"))
# 
# mod_embodied_kessler_depressed_quart <- readRDS( here::here(push_mods, "mod_embodied_kessler_depressed_quart"))
# 
# mod_embodied_kessler_effort_quart <- readRDS(here::here(push_mods, "mod_embodied_kessler_effort_quart"))
# 
# mod_embodied_kessler_hopeless_quart <- readRDS( here::here(push_mods, "mod_embodied_kessler_hopeless_quart"))
# 
# mod_embodied_kessler_nervous_quart <- readRDS(here::here(push_mods, "mod_embodied_kessler_nervous_quart"))
# 
# mod_embodied_kessler_restless_quart <- readRDS( here::here(push_mods, "mod_embodied_kessler_restless_quart"))
# 
# mod_embodied_kessler_worthless_quart <- readRDS(here::here(push_mods, "mod_embodied_kessler_worthless_quart"))
# 
# mod_embodied_kessler_6_quart <- readRDS( here::here(push_mods, "mod_embodied_kessler_6_quart"))
# 


# read binary 
mod_embodied_hlth_fatigue <- readRDS(here::here(push_mods, "mod_embodied_hlth_fatigue"))

mod_embodied_rumination <- readRDS(here::here(push_mods, "mod_embodied_rumination"))

mod_embodied_kessler_hopeless <- readRDS(here::here(push_mods, "mod_embodied_kessler_hopeless"))

mod_embodied_kessler_depressed <- readRDS( here::here(push_mods, "mod_embodied_kessler_depressed"))

mod_embodied_kessler_effort <- readRDS(here::here(push_mods, "mod_embodied_kessler_effort"))

mod_embodied_kessler_hopeless <- readRDS( here::here(push_mods, "mod_embodied_kessler_hopeless"))

mod_embodied_kessler_nervous <- readRDS(here::here(push_mods, "mod_embodied_kessler_nervous"))

mod_embodied_kessler_restless <- readRDS( here::here(push_mods, "mod_embodied_kessler_restless"))

mod_embodied_kessler_worthless <- readRDS(here::here(push_mods, "mod_embodied_kessler_worthless"))

mod_embodied_kessler_6 <- readRDS( here::here(push_mods, "mod_embodied_kessler_6"))


# read _cont 

mod_embodied_hlth_fatigue_cont <- readRDS(here::here(push_mods, "mod_embodied_hlth_fatigue_cont"))
mod_embodied_rumination_cont <- readRDS(here::here(push_mods, "mod_embodied_rumination_cont"))
mod_embodied_kessler_hopeless_cont <- readRDS(here::here(push_mods, "mod_embodied_kessler_hopeless_cont"))
mod_embodied_kessler_depressed_cont <- readRDS( here::here(push_mods, "mod_embodied_kessler_depressed_cont"))
mod_embodied_kessler_effort_cont <- readRDS(here::here(push_mods, "mod_embodied_kessler_effort_cont"))
mod_embodied_kessler_hopeless_cont <- readRDS( here::here(push_mods, "mod_embodied_kessler_hopeless_cont"))
mod_embodied_kessler_nervous_cont <- readRDS(here::here(push_mods, "mod_embodied_kessler_nervous_cont"))
mod_embodied_kessler_restless_cont <- readRDS( here::here(push_mods, "mod_embodied_kessler_restless_cont"))
mod_embodied_kessler_worthless_cont <- readRDS(here::here(push_mods, "mod_embodied_kessler_worthless_cont"))
mod_embodied_kessler_6_cont <- readRDS( here::here(push_mods, "mod_embodied_kessler_6_cont"))

# tab embodied binary
tab_embodied <-
  rbind(
mod_embodied_hlth_fatigue,
mod_embodied_rumination,
mod_embodied_kessler_depressed,
mod_embodied_kessler_effort,
mod_embodied_kessler_hopeless,
mod_embodied_kessler_nervous,
mod_embodied_kessler_restless,
mod_embodied_kessler_worthless,
mod_embodied_kessler_6
  )


# tab embodied quart
tab_embodied_quart <-
  rbind(
mod_embodied_hlth_fatigue_quart,
mod_embodied_rumination_quart,
mod_embodied_kessler_depressed_quart,
mod_embodied_kessler_effort_quart,
mod_embodied_kessler_hopeless_quart,
mod_embodied_kessler_nervous_quart,
mod_embodied_kessler_restless_quart,
mod_embodied_kessler_worthless_quart,
mod_embodied_kessler_6_quart
  )


# tab continuous 

# tab embodied binary

tab_embodied_cont <-
  rbind(
mod_embodied_hlth_fatigue_cont,
mod_embodied_rumination_cont,
mod_embodied_kessler_depressed_cont,
mod_embodied_kessler_effort_cont,
mod_embodied_kessler_hopeless_cont,
mod_embodied_kessler_nervous_cont,
mod_embodied_kessler_restless_cont,
mod_embodied_kessler_worthless_cont,
mod_embodied_kessler_6_cont
  )
```

## Introduction

There is correlational research that showing that extraversion is correlated with well-being. Evidence for causality, however, is scarce.

## Method

-   We apply doubly-robust estimators to longitudinal data from the the New Zealand Attitudes and Values Study [@sibley2021] waves 10-12.
-   We measure extraversion using the Mini-IPIP6 [@sibley2011]
-   To assess causality we require a causal estimand: "what would happen if?"
-   We use the target-trial framework following @hernán2016 to consider the hypothetical causal effect of shifting the population from the second quartile on extraversion to the fourth quartile [@hernán2022; @bulbulia2022; @hernan2023]. This estimand in interesting because it has practical implications. If we could intervene on people with relatively low extraversion to relatively high extra-version, what would be the outcome across multi-dimensional well-being? 
-   We consider multi-dimensional well-being following @vanderweele2020 outcome-wide model, to improve scientific understanding while avoiding selectivity in measures of well-being.


### Selection criteria

- Enrolled in NZAVS in 2018 and 2019.
- Responded to extraversion items in 2018 and 2019.
- Could be lost to follow up in 2020 (missing data multiply imputed).
- Missing data permitted in all other indicators (multiply imputed).
- Sample $N$ = 34189

@fig-outcomewide-dag presents the three-wave design for causal inference. By including indicators of the both the exposure and outcome at baseline, any unmeasured confounder of the exposure (+1 baseline) and outcome (+2 baseline) would need to be orthogonal to the baseline indicators. Although our approach offers a powerful means for controlling unmeasured confounding, because we cannot ensure balance, we peform sensitivity analysis by evaluating E-values.  E-values represent the minimum strength of association on the Risk-Ratio scale that an unmeasured confounder would need to have with both treatment and outcome in order to explain the observed effect estimates conditional on measured covariates [@vanderweele2017]. E-values for all outcomes are reported in the tables and graphs below.

```{tikz}
#| label: fig-outcomewide-dag
#| fig-cap: "Causal graph: three-wave panel design with selection bias"
#| out-width: 80%
#| echo: false
#| include: true
#| eval: true

\usetikzlibrary{positioning}
\usetikzlibrary{shapes.geometric}
\usetikzlibrary{arrows}
\usetikzlibrary{decorations}
\tikzstyle{Arrow} = [->, thin, preaction = {decorate}]
\tikzset{>=latex}
% Define a simple decoration
\tikzstyle{cor} = [-, dotted, preaction = {decorate}]

\begin{tikzpicture}[{every node/.append style}=draw]

\node [rectangle, draw=white] (U) at (0, 0) {U};
\node [rectangle, draw=black, align=left] (L) at (2, 0) {L$_{t0}$ \\A$_{t0}$ \\Y$_{t0}$};
\node [rectangle, draw=white] (A) at (4, 0) {A$_{t1}$};
\node [ellipse, draw=white] (US) at (4, -2) {U};
\node [rectangle, draw=black](S) at (6, 0) {S};
\node [ellipse, draw=white] (Y) at (8, 0) {Y$_{t2}$};

\draw [-latex, draw=black] (U) to (L);
\draw [-latex, draw=black] (L) to (A);
\draw [-latex, bend left=50, draw=black] (L) to (Y);
\draw [-latex, bend right=50, draw=black, dotted] (U) to (Y);
\draw [-latex, bend left=50, draw=black, dotted] (U) to (A);
\draw [-latex, draw=black] (A) to (S);
\draw [-latex, draw=black] (US) to (S);
\draw [-latex, draw=black] (US) to (Y);
\draw [-latex, bend left = 40, draw=red, dashed] (A) to (Y);
\draw [cor, draw=red, bend right=20, dashed] (A) to (US);

\end{tikzpicture}


```



### Selection Bias

To avoid selection bias from non-response and attrition bias, we multiply imputed missing data as presented in @fig-dag. We perform multiple imputation *separately* within each qauartile of extraversion, and combine the imputations after modelling missingness conditional on the observed covariates (see: [@zhang2023; @westreich2015]). We implement multiple imputation using the `mice` package in R [@vanbuuren2018]. We imputed 10 x missing data sets which were passed separately to the the `MatchThem` and `WeightIt` packages to obtain exposure weights (akin to propensity scores).



```{tikz}
#| label: fig-dag
#| eval: true
#| include: true
#| fig-cap: "Causal graph shows potential for selection bias from loss to follow up or non-response. To address this, we multiply impute missing values conditional on the assumption that missing values are random conditional on the imputation model (MAR)."
#| out-width: 80%
#| echo: false

\usetikzlibrary{positioning}
\usetikzlibrary{shapes.geometric}
\usetikzlibrary{arrows}
\usetikzlibrary{decorations}
\tikzstyle{Arrow} = [->, thin, preaction = {decorate}]
\tikzset{>=latex}


\begin{tikzpicture}[{every node/.append style}=draw]
  \node [ellipse, draw=white] (A) at (0, 0) {$Extraversion$};
  \node [rectangle, draw=white] (Ac) at (4, 0) {$Well-being$};
  \node [rectangle, draw=black] (S) at (8, 0) {$Selection$};
  \draw [-latex, draw=black] (Ac) to (S);
  \draw [-latex, bend left] (A) to (S);
  \draw [-latex, red, dashed] (A) to (Ac);
\end{tikzpicture}

```

### Assssing positivity

To evaluation causality requires that the intervention is plausible. Can extraversion change? To evaluate this question we assessed evidence for movement between different levels of extraversion between NZAVS wave 10 and wave 11. 

```{r}
#| label: positivity
#| eval: false
#| include: false

dt_18_19 <- here_read("dt_18_19")
out <- msm::statetable.msm(round(extraversion_quantile_n, 0), id, data = dt_18_19)


# for a function I wrote to create state tables
state_names <- c("1_3", "3_3.75", "3.75_4.75", "4.75_7")

# transition table

t_tab <- transition_table(out, state_names)

cat(t_tab$explanation)
print(t_tab$table, state_names)
```

|   From    | 1_3  | 3_3.75 | 3.75_4.75 | 4.75_7 |
|:---------:|:----:|:------:|:---------:|:------:|
|    1_3    | 4779 |  1748  |    570    |   65   |
|  3_3.75   | 1799 |  2956  |   2158    |  297   |
| 3.75_4.75 | 633  |  2316  |   5564    |  2046  |
|  4.75_7   |  71  |  351   |   2277    |  6559  |

: Transition matrix for change stability and change extraversion by quartiles. Labels show range on 1-7 response scale {#tbl-transition-factor}

The transition matrix in @tbl-transition-factor describes the shifts from one state of extraversion to another between the baseline wave (nzavs wave 10) and the following wave (nzavs wave 11). The numbers in the cells represent the number of individuals who transitioned from one state (rows) to another (columns). For example, the cell in the first row and third column shows the number of individuals who transitioned from the first state (indicated by the left-most cell in the row) to the third state (n=570). The top left cell shows the number of individuals who remained in the first state (n = 4779). Here we find that n=297 individuals moved from the second quartile to the fourth quartile. 

Note that it is possible to estimate different causal effects. For example, we might have asked: "What would the causal effect be in the population if everyone were to move between the lowest quartile and the third quartile?"

**Note to co-authors: we can pick a different estimand. Alternatively, we could use a continuous estimand, or report both.**


### Inverse Probability of Treatment Weighting

We first identified covariates for which balance is required, following VanderWeeles modified disjunctive cause criterion [@vanderweele2019; @vanderweele2020].

We used the `WeightIt` package in R [@greifer2023a] to obtain weights for the exposure model, where the exposure was modelled as a function of all baseline covariates. We used the `cobalt` pack to assess the reliability of weights [@greifer2023b]. These weights were further augmented by post-stratification weights for the NZAVS on age, gender, and European ethnicity (see: [@sibley2021]).

We doubly robust estimator in which all outcomes measured at time +2 (NZAVS wave 12) were regressed against the exposure measured at time +1 (NZAVS wave 11) $\times$ all baseline covariates measured at time 0 (NZAVS wave 10). weights for the exposure modelled were included in the weighted regression. This approach follows @agnostic to obtain the confounding control that is sensitive to model misspecification for the outcome model or the exposure model.

We used the `Clarify` [@greifer2023; @king2000] in R [@rainey2023] to estimate standard errors and confidence intervals.

We note that the confidence intervals for doubly robust models such as ours tend to be wider (we prefer variance over bias).


@fig-propensity-score-example shows example of baseline imbalance (Here, the reflective domain).  All domains reveal strong imbalance in the baseline covariates that predict the exposure. Not surprisingly, the strongest of these covariates pertain to the exposure itself. This raises the important point that to access the incidence effect, we must control for baseline exposure.  Here we control both by propensity score weighting (the exposure model) and regression adjustment (the outcome model).[^note_weights] 

[^note_weights]: We compared trimmed propensity score weights with the untrimmed scores and found no difference to inference [@greifer2023]. We therefore report the raw (untrimmed) weights (*Appendix to follow*)

```{r}
#| label: fig-propensity-score-example
#| fig-height: 8
#| eval: true
#| include: true
#| fig-cap: "Evidence for strong imbalance of covariates at baseline (red points). We use the entropy balance method to ensure balance in baseline confounders (green points)."

mice_reflective_ebal_trim <- here_read("mice_reflective_ebal_trim")
#bal.plot(mice_reflective_ebal_trim, var.name = "t0_extraversion_quantile", which = "both")

love.plot(mice_reflective_ebal_trim, binary = "std", 
thresholds = c(m = .1),  
which.treat = c("q_2", "q_4"),  
var.order = "unadjusted")+ theme(
  plot.title = element_text(size = 10, hjust = 0),
  plot.subtitle = element_text(size = 10, hjust = 0),
  axis.text = element_text(size = 6),  # Adjust the size value as per your preference
  legend.text = element_text(size = 6),
  legend.title = element_text(size = 8)
)

# if trim is needed
# sum_ebal_trim <- summary(mice_reflective_ebal_trim)
# sum_ebal_trim
# plot(sum_ebal_trim)
# bal.tab(mice_reflective_ebal_trim,stats = c("m", "ks"), abs = TRUE)
# bal.plot(mice_reflective_ebal_trim, var.name = "t0_extraversion_quantile", which = "both")
# 
# love.plot(mice_reflective_ebal_trim, binary = "std", thresholds = c(m = .1))
# 
# dev.off()


```


## Results

This set of results reports the hypothetical effect of intervening on extraversion by setting the population to the lower quartile of extraversion and increasinge extraversion to the third-quartile. Outcomes are measured one-year after this hypothetical intervention.

### Effects on health

```{r}
#| label: fig-results-health
#| fig-cap: "Causal effects of extraversion gain on reported physical health"
#| fig-height: 6
#| eval: true
#| include: true
#| echo: false

# import models 
mod_health_hlth_bmi <- readRDS( here::here(push_mods, "mod_health_hlth_bmi"))
mod_health_alcohol_frequency <- readRDS( here::here(push_mods, "mod_health_alcohol_frequency"))
mod_health_alcohol_intensity <- readRDS( here::here(push_mods, "mod_health_alcohol_intensity")) 
mod_health_hours_exercise <- readRDS( here::here(push_mods, "mod_health_hours_exercise"))
mod_health_sfhealth_your_health <- readRDS( here::here(push_mods, "mod_health_sfhealth_your_health"))
mod_health_sfhealth_get_sick_easier <- readRDS( here::here(push_mods, "mod_health_sfhealth_get_sick_easier"))
mod_health_sfhealth_expect_worse_health <- readRDS( here::here(push_mods, "mod_health_sfhealth_expect_worse_health"))
mod_health_hlth_sleep_hours  <- readRDS( here::here(push_mods, "mod_health_hlth_sleep_hours"))


tab_health <-
  rbind(
mod_health_hlth_bmi,
mod_health_alcohol_frequency,
mod_health_alcohol_intensity,
mod_health_hours_exercise,
mod_health_sfhealth_your_health,
mod_health_sfhealth_get_sick_easier,
mod_health_sfhealth_expect_worse_health,
#mod_health_sfhealth_comp,
mod_health_hlth_sleep_hours
  )
# inspect
# tab_health

group_tab_health <- group_tab(tab_health, type = "RD")
#saveRDS(group_tab_health, here::here(push_mods, "group_tab_health")) # save on first anlaysis, no need after

# print if needed 
#group_tab_health

# set title
title = "ATE: +1 year causal effect from lowest to third quartile"
subtitle_health = "Health outcomes: Extraversion"
#
group_plot_ate_health <- margot_plot(group_tab_health,    
                           type = "RD",
                           title = title, 
                           subtitle = subtitle_health, 
                           xlab = "(sd units)", 
                           ylab = "test",
                           estimate_scale = 1,
                           base_size = 8,
                           text_size = 2.5,
                           point_size = .5,
                           title_size = 12,
                           subtitle_size = 11,
                           legend_text_size = 8,
                           legend_title_size = 10,
                           x_offset = -1.5,
                           x_lim_lo = -1.5,
                           x_lim_hi =  .3)  

#check
group_plot_ate_health
# 
# ggsave(
#   group_plot_ate_health,
#   path = here::here(here::here(push_mods, "group_plot_ate_health")),
#   width = 6,
#   height = 6,
#   units = "in",
#   filename = "group_plot_ate_health.png",
#   device = 'png',
#   limitsize = FALSE,
#   dpi = 600)
```

```{r}

#| label: tbl-results-health
#| tbl-cap: "Table of results for the health domain"
#| eval: true
#| include: true
#| echo: false

tab_health |> 
  arrange(desc(E_Val_bound)) |> 
  kbl(format="markdown")

#interpret_table(group_tab_health, "causal_difference", "PATE")

```

Figure @fig-results-health and @tbl-results-health present the Population Average Treatment Effect (PATE). This is the expected difference in outcomes between treatment and control groups for the New Zealand population for the +1 year outcomes after a change in extraversion. We do not find evidence of causal effects across the health outcomes.Population Average Treatment Effect (PATE) represents the expected difference in outcomes between treatment and control groups for the New Zealand population.

For the outcome 'SF Health expect worse health (sd)', the PATE causal contrast is 0.043. The confidence interval ranges from -0.027 to 0.111. The E-value for this outcome confirms the causal contrast is unreliable.

For the outcome 'SF Health your health (sd)', the PATE causal contrast is 0.042. The confidence interval ranges from -0.02 to 0.099. The E-value for this outcome confirms the causal contrast is unreliable.

For the outcome 'Alcohol intensity (sd)', the PATE causal contrast is 0.035. The confidence interval ranges from -0.024 to 0.093. The E-value for this outcome confirms the causal contrast is unreliable.

For the outcome 'Hlth sleep Hours (sd)', the PATE causal contrast is -0.035. The confidence interval ranges from -0.106 to 0.029. The E-value for this outcome confirms the causal contrast is unreliable.

For the outcome 'Hlth bmi (sd)', the PATE causal contrast is -0.023. The confidence interval ranges from -0.059 to 0.014. The E-value for this outcome confirms the causal contrast is unreliable.

For the outcome 'alcohol frequency (sd)', the PATE causal contrast is 0.023. The confidence interval ranges from -0.027 to 0.069. The E-value for this outcome confirms the causal contrast is unreliable.

For the outcome 'SF Health get sick easier (sd, reversed)', the PATE causal contrast is 0.02. The confidence interval ranges from -0.05 to 0.095. The E-value for this outcome confirms the causal contrast is unreliable.

For the outcome 'Hours exercise (log sd)', the PATE causal contrast is -0.005. The confidence interval ranges from -0.081 to 0.072. The E-value for this outcome confirms the causal contrast is unreliable.


### Effects on embodied well-being

```{r}
#| label: fig-results-embodied
#| fig-height: 6
#| fig-cap: "Causal effects of extraversion gain on embodied well-being"
#| eval: true
#| include: true
#| echo: false

mod_embodied_hlth_fatigue <-
  readRDS(here::here(push_mods, "mod_embodied_hlth_fatigue"))
mod_embodied_rumination <-
  readRDS(here::here(push_mods, "mod_embodied_rumination"))
mod_embodied_kessler_depressed <-
  readRDS(here::here(push_mods, "mod_embodied_kessler_depressed"))
mod_embodied_kessler_effort <-
  readRDS(here::here(push_mods, "mod_embodied_kessler_effort"))
mod_embodied_kessler_hopeless <-
  readRDS(here::here(push_mods, "mod_embodied_kessler_hopeless"))
mod_embodied_kessler_nervous <-
  readRDS(here::here(push_mods, "mod_embodied_kessler_nervous"))
mod_embodied_kessler_restless <-
  readRDS(here::here(push_mods, "mod_embodied_kessler_restless"))
mod_embodied_kessler_worthless <-
  readRDS(here::here(push_mods, "mod_embodied_kessler_worthless"))



tab_embodied <-
  rbind(
mod_embodied_hlth_fatigue,
mod_embodied_rumination,
mod_embodied_kessler_depressed,
mod_embodied_kessler_effort,
mod_embodied_kessler_hopeless,
mod_embodied_kessler_nervous,
mod_embodied_kessler_restless,
mod_embodied_kessler_worthless#
#mod_embodied_kessler_6,
#mod_embodied_kessler_6_depression,
#mod_embodied_kessler_6_anxiety
  )
#tab_embodied
group_tab_embodied <- group_tab(tab_embodied, type = "RD")
#group_tab_embodied

# save first attempt, not needed for making quarto docs
# saveRDS(group_tab_embodied, here::here(push_mods, "group_tab_embodied"))
#group_tab_embodied <- group_tab(tab_embodied, type = "RD")

#check
#title
title = title
# make subtitle
subtitle_embodied = "Embodied outcomes: Extraversion"

# make graph
group_plot_ate_embodied <- margot_plot(group_tab_embodied,    
                           type = "RD",
                           title = title, 
                           subtitle = subtitle_embodied, 
                           xlab = "(sd units)", 
                           ylab = "test",
                           estimate_scale = 1,
                           base_size = 8,
                           text_size = 2.5,
                           point_size = .5,
                           title_size = 12,
                           subtitle_size = 11,
                           legend_text_size = 8,
                           legend_title_size = 10,
                           x_offset = -1.5,
                           x_lim_lo = -1.5,
                           x_lim_hi =  .3)  
# view graph
group_plot_ate_embodied

# save after first modelling attempt 
# ggsave(
#   group_plot_ate_embodied,
#   path = here::here(here::here(push_mods, "group_plot_ate_embodied")),
#   width = 6,
#   height = 6,
#   units = "in",
#   filename = "group_plot_ate_embodied.png",
#   device = 'png',
#   limitsize = FALSE,
#   dpi = 600
# )
# dev.off()
```

```{r}
#| label: tbl-results-embodied
#| tbl-cap: "Table of results for the embodied well-being domain"
#| eval: true
#| include: true
#| echo: false

tab_embodied |> 
  arrange(desc(E_Val_bound)) |> 
  kbl(format="markdown")

#interpret_table(group_tab_embodied, "causal_difference", "PATE" )

```

@fig-results-embodied and @tbl-results-embodied presents the Population Average Treatment Effect (PATE) for the embodied domain. We find evidence for the causal effects of change in extraversion (from the second quartile to the fourth quartile) on five of the six Kessler-6 dimensions, with the strong effects on feelings of worthlessless.


For the outcome 'Kessler worthless (sd)', the PATE causal contrast is -0.153. The confidence interval ranges from -0.201 to -0.104. The E-value for this outcome is 1.563, indicating reliable evidence for causality.

For the outcome 'Kessler nervous (sd)', the PATE causal contrast is -0.106. The confidence interval ranges from -0.179 to -0.035. The E-value for this outcome is 1.435, indicating reliable evidence for causality.

For the outcome 'Rumination (sd)', the PATE causal contrast is -0.082. The confidence interval ranges from -0.148 to -0.016. The E-value for this outcome is 1.366, indicating reliable evidence for causality.

For the outcome 'Kessler hopeless (sd)', the PATE causal contrast is -0.08. The confidence interval ranges from -0.136 to -0.025. The E-value for this outcome is 1.361, indicating reliable evidence for causality.

For the outcome 'kessler restless (sd)', the PATE causal contrast is -0.066. The confidence interval ranges from -0.134 to 0.001. The E-value for this outcome confirms the causal contrast is unreliable.

For the outcome 'Kessler effort (sd)', the PATE causal contrast is -0.044. The confidence interval ranges from -0.112 to 0.025. The E-value for this outcome confirms the causal contrast is unreliable.

For the outcome 'Kessler depressed (sd)', the PATE causal contrast is -0.042. The confidence interval ranges from -0.102 to 0.019. The E-value for this outcome confirms the causal contrast is unreliable.

For the outcome 'Hlth fatigue (sd)', the PATE causal contrast is -0.015. The confidence interval ranges from -0.073 to 0.047. The E-value for this outcome confirms the causal contrast is unreliable.

### Effects on practical well-being

```{r}
#| label: fig-results-practical
#| fig-cap: "Causal effects of extraversion gain on practical well-being"
#| eval: true
#| fig-height: 6
#| include: true
#| echo: false


## combo-table

## if needed:
mod_practical_sexual_satisfaction  <- readRDS( here::here(push_mods, "mod_practical_sexual_satisfaction"))
mod_practical_perfectionism  <- readRDS( here::here(push_mods, "mod_practical_perfectionism"))
mod_practical_bodysat  <- readRDS( here::here(push_mods, "mod_practical_bodysat"))
mod_practical_vengeful_rumin  <- readRDS( here::here(push_mods, "mod_practical_vengeful_rumin"))
mod_practical_power_self_nocontrol  <- readRDS( here::here(push_mods, "mod_practical_power_self_nocontrol"))
mod_practical_power_others_control <- readRDS( here::here(push_mods, "mod_practical_power_others_control"))
mod_practical_selfesteem_satself  <- readRDS( here::here(push_mods, "mod_practical_selfesteem_satself"))
mod_practical_selfesteem_postiveself  <- readRDS( here::here(push_mods, "mod_practical_selfesteem_postiveself"))
mod_practical_selfesteem_rfailure  <- readRDS( here::here(push_mods, "mod_practical_selfesteem_rfailure"))
mod_practical_self_control_have_lots  <- readRDS( here::here(push_mods, "mod_practical_self_control_have_lots"))
mod_practical_self_control_wish_more_r  <- readRDS( here::here(push_mods, "mod_practical_self_control_wish_more_r"))
mod_practical_emotion_regulation_out_control  <- readRDS( here::here(push_mods, "mod_practical_emotion_regulation_out_control"))
mod_practical_emotion_regulation_hide_neg_emotions  <- readRDS( here::here(push_mods, "mod_practical_emotion_regulation_hide_neg_emotions"))
mod_practical_emotion_regulation_change_thinking_to_calm  <- readRDS( here::here(push_mods, "mod_practical_emotion_regulation_change_thinking_to_calm"))
#mod_practical_nzsei13  <- readRDS( here::here(push_mods, "mod_practical_nzsei13"))



## rr
# <- readRDS( here::here(push_mods, ""))

tab_practical <-
  rbind(
  #  mod_practical_nzsei13,
    mod_practical_sexual_satisfaction,
    mod_practical_perfectionism,
    mod_practical_bodysat,
    mod_practical_vengeful_rumin,
    mod_practical_power_self_nocontrol,
    mod_practical_power_others_control,
   # mod_practical_powerdependence,
    mod_practical_selfesteem_satself,
    mod_practical_selfesteem_postiveself,
    mod_practical_selfesteem_rfailure,
  #  mod_practical_selfesteem,
    mod_practical_self_control_have_lots,
    mod_practical_self_control_wish_more_r,
   # mod_practical_self_control,
    mod_practical_emotion_regulation_out_control,
    mod_practical_emotion_regulation_hide_neg_emotions,
    mod_practical_emotion_regulation_change_thinking_to_calm#,
   #  mod_practical_nzsei13
   # mod_practical_emotion_regulation#,
   # mod_practical_emp_work_life_balance
   # mod_practical_perfectionism
  )

# tab_practical

# make tab
group_tab_practical <- group_tab(tab_practical, type = "RD")

# view tab
# group_tab_practical

# save table once
#saveRDS(group_tab_practical, here::here(push_mods, "group_tab_practical"))

# check
# title 
#title
title = title
subtitle_practical = "Practical outcomes: Extraversion"



group_plot_ate_practical <- margot_plot(group_tab_practical,    
                           type = "RD",
                           title = title, 
                           subtitle = subtitle_practical, 
                           xlab = "(sd units)", 
                           ylab = "test",
                           estimate_scale = 1,
                           base_size = 8,
                           text_size = 2.5,
                           point_size = .5,
                           title_size = 10,
                           subtitle_size = 09,
                           legend_text_size = 6,
                           legend_title_size = 6,
                           x_offset = -1.75,
                           x_lim_lo = -1.75,
                           x_lim_hi =  .3)  

#check
group_plot_ate_practical

# save once
ggsave(
  group_plot_ate_practical,
  path = here::here(here::here(push_mods, "group_plot_ate_practical")),
  width = 6,
  height = 6,
  units = "in",
  filename = "group_plot_ate_practical.png",
  device = 'png',
  limitsize = FALSE,
  dpi = 600
)

```

```{r}
#| label: tbl-results-practical
#| tbl-cap: "Table of results for the practical well-being domain"
#| eval: true
#| include: true
#| echo: false

tab_practical|> 
  arrange(desc(E_Val_bound)) |> 
  kbl(format="markdown")

#interpret_table(group_tab_practical, "causal_difference", "PATE" )

```

@fig-results-practical and @tbl-results-practical present the results for practical well-being.

Population Average Treatment Effect (PATE) represents the expected difference in outcomes between treatment and control groups for the New Zealand population.

For the outcome 'Kessler worthless (sd)', the PATE causal contrast is -0.153. The confidence interval ranges from -0.201 to -0.104. The E-value for this outcome is 1.563, indicating reliable evidence for causality.

For the outcome 'Kessler nervous (sd)', the PATE causal contrast is -0.106. The confidence interval ranges from -0.179 to -0.035. The E-value for this outcome is 1.435, indicating reliable evidence for causality.

For the outcome 'Rumination (sd)', the PATE causal contrast is -0.082. The confidence interval ranges from -0.148 to -0.016. The E-value for this outcome is 1.366, indicating reliable evidence for causality.

For the outcome 'Kessler hopeless (sd)', the PATE causal contrast is -0.08. The confidence interval ranges from -0.136 to -0.025. The E-value for this outcome is 1.361, indicating reliable evidence for causality.

For the outcome 'kessler restless (sd)', the PATE causal contrast is -0.066. The confidence interval ranges from -0.134 to 0.001. The E-value for this outcome confirms the causal contrast is unreliable.

For the outcome 'Kessler effort (sd)', the PATE causal contrast is -0.044. The confidence interval ranges from -0.112 to 0.025. The E-value for this outcome confirms the causal contrast is unreliable.

For the outcome 'Kessler depressed (sd)', the PATE causal contrast is -0.042. The confidence interval ranges from -0.102 to 0.019. The E-value for this outcome confirms the causal contrast is unreliable.

For the outcome 'Hlth fatigue (sd)', the PATE causal contrast is -0.015. The confidence interval ranges from -0.073 to 0.047. The E-value for this outcome confirms the causal contrast is unreliable.

### Effects on reflective well-being

```{r}
#| label: fig-results-reflective-well-being
#| fig-height: 6
#| fig-cap: "Causal effects of extraversion gain on reflective well-being"
#| eval: true
#| include: true
#| echo: false



mod_reflective_gratitude <- readRDS( here::here(push_mods, "mod_reflective_gratitude"))
mod_reflective_pwi_health <- readRDS( here::here(push_mods, "mod_reflective_pwi_health"))
mod_reflective_pwi_relationships <- readRDS( here::here(push_mods, "mod_reflective_pwi_relationships"))
mod_reflective_pwi_security <- readRDS( here::here(push_mods, "mod_reflective_pwi_security"))
mod_reflective_pwi_standardliving <- readRDS( here::here(push_mods, "mod_reflective_pwi_standardliving"))
mod_reflective_lifesat_satlife <- readRDS( here::here(push_mods, "mod_reflective_lifesat_satlife"))
mod_reflective_lifesat_ideal <- readRDS( here::here(push_mods, "mod_reflective_lifesat_ideal"))
mod_reflective_meaning_purpose <- readRDS( here::here(push_mods, "mod_reflective_meaning_purpose"))
mod_reflective_meaning_sense <- readRDS( here::here(push_mods, "mod_reflective_meaning_sense"))

## combo-table
tab_reflective <- rbind(
  mod_reflective_gratitude,
  mod_reflective_pwi_health,
  mod_reflective_pwi_relationships,
  mod_reflective_pwi_security,
  mod_reflective_pwi_standardliving,
  #mod_reflective_pwi,
  mod_reflective_lifesat_satlife,
  mod_reflective_lifesat_ideal,
#  mod_reflective_lifesat,
 mod_reflective_meaning_purpose,
 mod_reflective_meaning_sense#,
 # mod_reflective_meaning
)

# table
#tab_reflective

# group tab
group_tab_reflective <- group_tab(tab_reflective, type = "RD")
#group_tab_reflective

# save
saveRDS(group_tab_reflective, here::here(push_mods, "group_tab_reflective"))

#check
#title

# make subtitle
subtitle_reflective = "Reflective outcomes: Extraversion"

# make graph
group_plot_ate_reflective <- margot_plot(group_tab_reflective,    
                         
                           title = title, 
                           subtitle = subtitle_reflective, 
                           xlab = "(sd units)", 
                           ylab = "test",
                           estimate_scale = 1,
                           base_size = 8,
                           text_size = 2.5,
                           point_size = .5,
                           title_size = 12,
                           subtitle_size = 11,
                           legend_text_size = 8,
                           legend_title_size = 10,
                           x_offset = -1.5,
                           x_lim_lo = -1.5,
                           x_lim_hi =  .3)  
# view graph
group_plot_ate_reflective

# ggsave(
#   group_plot_ate_reflective,
#   path = here::here(here::here(push_mods, "group_plot_ate_reflective")),
#   width = 6,
#   height = 6,
#   units = "in",
#   filename = "group_plot_ate_reflective.png",
#   device = 'png',
#   limitsize = FALSE,
#   dpi = 600
# )
```

```{r}
#| label: tbl-results-reflective
#| tbl-cap: "Table of results for the reflective well-being domain"
#| eval: true
#| include: true
#| echo: false

tab_reflective|> 
  kbl(format="markdown")

#interpret_table(group_tab_reflective, "causal_difference", "PATE" )

```

As indicated in @fig-results-reflective-well-being and @tbl-results-reflective we do not find evidence for reliable effects of extraversion on personal security r personal health. However, we find evidence for effects across all other dimensions of reflective well-being.

For the outcome 'Gratitude (sd)', the PATE causal contrast is 0.187. The confidence interval ranges from 0.138 to 0.238. The E-value for this outcome is 1.654, indicating reliable evidence for causality.

For the outcome 'Meaning sense (sd)', the PATE causal contrast is 0.128. The confidence interval ranges from 0.054 to 0.193. The E-value for this outcome is 1.497, indicating reliable evidence for causality.

For the outcome 'Meaning purpose (sd)', the PATE causal contrast is 0.126. The confidence interval ranges from 0.066 to 0.185. The E-value for this outcome is 1.492, indicating reliable evidence for causality.

For the outcome 'PWI Relationships (sd)', the PATE causal contrast is 0.113. The confidence interval ranges from 0.064 to 0.164. The E-value for this outcome is 1.454, indicating reliable evidence for causality.

For the outcome 'PWI standard living (sd)', the PATE causal contrast is 0.099. The confidence interval ranges from 0.036 to 0.161. The E-value for this outcome is 1.416, indicating reliable evidence for causality.

For the outcome 'Lifesat satlife (sd)', the PATE causal contrast is 0.091. The confidence interval ranges from 0.037 to 0.145. The E-value for this outcome is 1.393, indicating reliable evidence for causality.

For the outcome 'Lifesat ideal (sd)', the PATE causal contrast is 0.059. The confidence interval ranges from 0 to 0.116. The E-value for this outcome is 1.298, indicating reliable evidence for causality.

For the outcome 'PWI security (sd)', the PATE causal contrast is 0.039. The confidence interval ranges from -0.029 to 0.104. The E-value for this outcome confirms the causal contrast is unreliable.

For the outcome 'PWI health (sd)', the PATE causal contrast is -0.001. The confidence interval ranges from -0.057 to 0.053. The E-value for this outcome confirms the causal contrast is unreliable.

### Effects social well-being

```{r}
#| label: fig-results-social-wellbeing
#| fig-height: 6
#| fig-cap: "Causal effects of extraversion gain on social well-being"
#| eval: true
#| include: true
#| echo: false

# read back models
## if needed:
mod_social_permeability_individual  <-
  readRDS(here::here(push_mods, "mod_social_permeability_individual"))
mod_social_impermeability_group  <-
  readRDS(here::here(push_mods, "mod_social_impermeability_group"))
mod_social_neighbourhood_community  <-
  readRDS(here::here(push_mods, "mod_social_neighbourhood_community"))
mod_social_support_help <-
  readRDS(here::here(push_mods, "mod_social_support_help"))
mod_social_support_turnto <-
  readRDS(here::here(push_mods, "mod_social_support_turnto"))
mod_social_support_rnoguidance  <-
  readRDS(here::here(push_mods, "mod_social_support_rnoguidance"))
mod_social_belong_accept  <-
  readRDS(here::here(push_mods, "mod_social_belong_accept"))
mod_social_belong_routsider  <-
  readRDS(here::here(push_mods, "mod_social_belong_routsider"))
mod_social_belong_beliefs  <-
  readRDS(here::here(push_mods, "mod_social_belong_beliefs"))
# mod_social_charity_donate <-
#   readRDS(here::here(push_mods, "mod_social_charity_donate"))


# bind tables
tab_social <- rbind(
 # mod_social_belong,
 # mod_social_support,
  mod_social_permeability_individual,
  mod_social_impermeability_group,
  mod_social_neighbourhood_community,
  mod_social_support_help,
  mod_social_support_turnto,
  mod_social_support_rnoguidance,
  mod_social_belong_accept,
  mod_social_belong_routsider,
  mod_social_belong_beliefs#,
 # mod_social_charity_donate
)

# make group table
group_tab_social <- group_tab(tab_social, type = "RD")

# view
#group_tab_social

# save
#saveRDS(group_tab_social, here::here(push_mods, "group_tab_social"))

# check title 
#title
title = title

#check sub
subtitle_social = "Social outcomes: Extraversion"
group_plot_ate_social <- margot_plot(group_tab_social,  
                           title = title, 
                           subtitle = subtitle_social, 
                           xlab = "(sd units)", 
                           ylab = "test",
                           estimate_scale = 1,
                           base_size = 8,
                           text_size = 2.5,
                           point_size = .5,
                           title_size = 12,
                           subtitle_size = 11,
                           legend_text_size = 8,
                           legend_title_size = 10,
                           x_offset = -2.5,
                           x_lim_lo = -2.5,
                           x_lim_hi =  .3)  

#check
group_plot_ate_social


# save once
# ggsave(
#   group_plot_ate_social,
#   path = here::here(here::here(push_mods, "group_plot_ate_social")),
#   width = 6,
#   height = 6,
#   units = "in",
#   filename = "group_plot_ate_social.png",
#   device = 'png',
#   limitsize = FALSE,
#   dpi = 600
# )
```

```{r}
#| label: tbl-results-social
#| tbl-cap: "Table of results for the social well-being domain"
#| eval: true
#| include: true
#| echo: false

tab_social|> 
  arrange(desc(E_Val_bound)) |> 
  kbl(format="markdown")
#interpret_table(group_tab_social, "causal_difference", "PATE" )

```

As indicated in @fig-results-social-wellbeing and @tbl-results-social, we find evidence for a causal effect of change in extraversion across all social outcomes, with the strongest evidence for buffering against feelings of being an outsider. 

For the outcome 'Belong_outsider (sd, reversed)', the PATE causal contrast is 0.279. The confidence interval ranges from 0.213 to 0.344. The E-value for this outcome is 1.9, indicating reliable evidence for causality.

For the outcome 'Belong accept (sd)', the PATE causal contrast is 0.163. The confidence interval ranges from 0.102 to 0.222. The E-value for this outcome is 1.59, indicating reliable evidence for causality.

For the outcome 'Support noguidance (sd, reversed)', the PATE causal contrast is 0.149. The confidence interval ranges from 0.087 to 0.212. The E-value for this outcome is 1.554, indicating reliable evidence for causality.

For the outcome 'Neighbourhood community (sd)', the PATE causal contrast is 0.144. The confidence interval ranges from 0.081 to 0.205. The E-value for this outcome is 1.54, indicating reliable evidence for causality.

For the outcome 'Belong beliefs (sd)', the PATE causal contrast is 0.118. The confidence interval ranges from 0.054 to 0.188. The E-value for this outcome is 1.468, indicating reliable evidence for causality.

For the outcome 'Permeability individual (sd)', the PATE causal contrast is 0.104. The confidence interval ranges from 0.034 to 0.172. The E-value for this outcome is 1.43, indicating reliable evidence for causality.

For the outcome 'Support help (sd)', the PATE causal contrast is 0.09. The confidence interval ranges from 0.024 to 0.154. The E-value for this outcome is 1.391, indicating reliable evidence for causality.

For the outcome 'Support turnto (sd)', the PATE causal contrast is 0.083. The confidence interval ranges from 0.015 to 0.15. The E-value for this outcome is 1.369, indicating reliable evidence for causality.

For the outcome 'Impermeability group (sd)' -- our negative control -- the PATE causal contrast is -0.026. The confidence interval ranges from -0.096 to 0.047. The E-value for this outcome confirms the causal contrast is unreliable.

## Discussion

### Importance

- By emulating an experiment, we may use panel data to infer causal effects.
- We find evidence for a causal effect of extraversion on psychological well-being, but not health.
- This suggests that extraversion may be benefitting to psychological well-being.


### Limitations
- Measurement is a limitation. Perhaps there are different types of extraversion. 

## Future work
- Pathways by which extraversion affects people remain unclear. The fact that people are more satisified with their personal incomes suggests possible pathways through employment. 
- Measurement of social and behavioural pathways important. 

{{< pagebreak >}}


{{< pagebreak >}}

## Appendix A. Measures

### Baseline confounding control

#### Age (waves: 1-15)

We asked participants' age in an open-ended question ("What is your age?" or "What is your date of birth").

#### Disability (waves: 5-15)

We assessed disability with a one item indicator adapted from @verbrugge1997, that asks "Do you have a health condition or disability that limits you, and that has lasted for 6+ months?" (1 = Yes, 0 = No).

#### Education Attainment (waves: 1, 4-15)

Participants were asked "What is your highest level of qualification?". We coded participans highest finished degree according to the New Zealand Qualifications Authority. Ordinal-Rank 0-10 NZREG codes (with overseas school quals coded as Level 3, and all other ancillary categories coded as missing) See:https://www.nzqa.govt.nz/assets/Studying-in-NZ/New-Zealand-Qualification-Framework/requirements-nzqf.pdf

#### Employment (waves: 1-3, 4-11)

We asked participants "Are you currently employed? (This includes self-employed or casual work)". \* note: This question disappeared in the updated NZAVS Technical documents (Data Dictionary).

<!-- #### European (waves: 1-15) -->

<!-- Participants were asked "Which ethnic group do you belong to (NZ census question)?" or "Which ethnic group(s) do you belong to? (Open-ended)" (wave: 3). Europeans were coded as 1, whereas other ethnicities were coded as 0. -->

#### Ethnicity (waves: 3)

Based on the New Zealand Cencus, we asked participants "Which ethnic group(s) do you belong to?". The responses were: (1) New Zealand European; (2) Māori; (3) Samoan; (4) Cook Island Māori; (5) Tongan; (6) Niuean; (7) Chinese; (8) Indian; (9) Other such as DUTCH, JAPANESE, TOKELAUAN. Please state:. We coded their answers into four groups: Maori, Pacific, Asian, and Euro (except for Time 3, which used an open-ended measure).

#### Gender (waves: 1-15)

We asked participants' gender in an open-ended question: "what is your gender?" or "Are you male or female?" (waves: 1-5). Female was coded as 0, Male was coded as 1, and gender diverse coded as 3 [@fraser_coding_2020]. (or 0.5 = neither female nor male)

#### Income (waves: 1-3, 4-15)

Participants were asked "Please estimate your total household income (before tax) for the year XXXX". To stablise this indicator, we first took the natural log of the response + 1, and then centred and standardised the log-transformed indicator.

#### Job Security (waves: 1-3,4-7,9-15)

Participants indicated their feeling of job security by answering "How secure do you feel in your current job?" on a scale from 1 (not secure) to 7 (very secure).

#### Parent (waves: 5-15)

Participants were asked "If you are a parent, what is the birth date of your eldest child?" or "If you are a parent, in which year was your eldest child born?" (waves: 10-15). Parents were coded as 1, while the others were coded as 0.

#### Number of Children (waves: 1-3, 4-15)

We measured number of children using one item from @Bulbulia_2015. We asked participants "How many children have you given birth to, fathered, or adopted. How many children have you given birth to, fathered, or adopted?" or ""How many children have you given birth to, fathered, or adopted. How many children have you given birth to, fathered, and/or parented?" (waves: 12-15).

#### Political Orientation

We measured participants' political orientation using a single item adapted from @jost_end_2006-1.

"Please rate how politically liberal versus conservative you see yourself as being."

(1 = Extremely Liberal to 7 = Extremely Conservative)

#### NZSEI-13 (waves: 8-15)

We assessed occupational prestige and status using the New Zealand Socio-economic Index 13 (NZSEI-13) [@fahy2017]. This index uses the income, age, and education of a reference group, in this case the 2013 New Zealand census, to calculate an score for each occupational group. Scores range from 10 (Lowest) to 90 (Highest). This list of index scores for occupational groups was used to assign each participant a NZSEI-13 score based on their occupation.

Participants were asked "If you are a parent, what is the birth date of your eldest child?".

#### Living with Partner

Participants were asekd "Do you live with your partner?" (1 = Yes, 0 = No).

#### Living in an Urban Area (waves: 1-15)

We coded whether they are living in an urban or rural area (1 = Urban, 0 = Rural) based on the addresses provided.

We coded whether they are living in an urban or rural area (1 = Urban, 0 = Rural) based on the addresses provided.

#### NZ Deprivation Index (waves: 1-15)

We used the NZ Deprivation Index to assign each participant a score based on where they live [@atkinson2019]. This score combines data such as income, home ownership, employment, qualifications, family structure, housing, and access to transport and communication for an area into one deprivation score.

#### NZ-Born (waves: 1-2,4-15)

We asked participants "Which country were you born in?" or "Where were you born? (please be specific, e.g., which town/city?)" (waves: 6-15).

#### Mini-IPIP 6 (waves: 1-3,4-15)

We measured participants personality with the Mini International Personality Item Pool 6 (Mini-IPIP6) [@sibley2011] which consists of six dimensions and each dimensions is measured with four items:

1.  agreeableness,

    i.  I sympathize with others' feelings.
    ii. I am not interested in other people's problems. (r)
    iii. I feel others' emotions.
    iv. I am not really interested in others. (r)

2.  conscientiousness,

    i.  I get chores done right away.
    ii. I like order.
    iii. I make a mess of things. (r)
    iv. I ften forget to put things back in their proper place. (r)

3.  extraversion,

    i.  I am the life of the party.
    ii. I don't talk a lot. (r)
    iii. I keep in the background. (r)
    iv. I talk to a lot of different people at parties.

4.  honesty-humility,

    i.  I feel entitled to more of everything. (r)
    ii. I deserve more things in life. (r)
    iii. I would like to be seen driving around in a very expensive car. (r)
    iv. I would get a lot of pleasure from owning expensive luxury goods. (r)

5.  neuroticism, and

    i.  I have frequent mood swings.
    ii. I am relaxed most of the time. (r)
    iii. I get upset easily.
    iv. I seldom feel blue. (r)

6.  openness to experience

    i.  I have a vivid imagination.
    ii. I have difficulty understanding abstract ideas. (r)
    iii. I do not have a good imagination. (r)
    iv. I am not interested in abstract ideas. (r)

Each dimension was assessed with four items and participants rated the accuracy of each item as it applies to them from 1 (Very Inaccurate) to 7 (Very Accurate). Items marked with (r) are reverse coded.

#### Honesty-Humility-Modesty Facet (waves: 10-14)

Participants indicated the extent to which they agree with the following four statements from @campbell2004 , and @sibley2011 (1 = Strongly Disagree to 7 = Strongly Agree)

```         
i.  I want people to know that I am an important person of high status, (Waves: 1, 10-14)
ii. I am an ordinary person who is no better than others.
iii. I wouldn't want people to treat me as though I were superior to them.
iv. I think that I am entitled to more respect than the average person is.
```


#### Religious Identification (waves: 1-15)

If participants answered *yes* to "Do you identify with a religion and/or spiritual group? we asked"How important is your religion to how you see yourself?" (1 = Not important, 7 = Very important). Those participants who were not religious were imputed a score of "1".


### Health well-being outcomes

#### Alcohol Frequency (waves: 6-15)

We measured participants' frequency of drinking alcohol using one item adapted from @Ministry_of_Health_2013 . Participants were asked "How often do you have a drink containing alcohol?" (1 = Never - I don't drink, 2 = Monthly or less, 3 = Up to 4 times a month, 4 = Up to 3 times a week, 5 = 4 or more times a week, 6 = Don't know).

#### Alcohol Intensity (waves: 6-15)

We measured participants' intensity of drinking alcohol using one item adapted from [@Ministry_of_Health_2013]. Participants were asked "How many drinks containing alcohol do you have on a typical day when drinking alcohol? (number of drinks on a typical day when drinking)"

#### Body Mass Index (waves: 2-3, 4-15)

Participants were asked "What is your height? (metres)" and "What is your weight? (kg)". Based on participants indication of their height and weight we calculated the BMI by dividing the weight in kilograms by the square of the height in meters.

#### Short-Form Subjective Health (waves: 5-15)

Participants' subjective health was assessed by three items selected from the MOS 36-item short-form health survey [@warejr1992]. The items were

```         
1.  "In general, would you say your health is...";
2.  "I seem to get sick a little easier than most people.";
3.  "I expect my health to get worse." Participants responded to those items on a scale (1 = Poor to 7 = Excellent).
```

The second and third items were negatively-worded, so we reversed the responses.

#### Hours of Exercise (waves: 1, 4-15)

We measured hours of exercising using one item from @sibley2011. We asked participants to estimate and report how many hours they spend in exercise/physical activity last week. To stablise this indicator, we first took the natural log of the response + 1, and then centred and standardised the log-transformed indicator.

#### Hours of Sleep (waves: 5-15)

Participants were asked "During the past month, on average, how many hours of *actual sleep* did you get per night".

#### Smoker (waves: 4-15)

We asked participants whether they are currently smoking or not (1 = Yes or 0 = No), using a single item: "Do you currently smoke?" or "Do you currently smoke tobacco cigarettes?" (waves: 10-15) from @muriwai_looking_2018.

### Embodied well-being outcomes

#### Kessler-6 (waves: 2-3,4-15)

We measured psychological distress using the Kessler-6 scale [@kessler2002], which exhibits strong diagnostic concordance for moderate and severe psychological distress in large, cross-cultural samples [@kessler2010; @prochaska2012]. Participants rated during the past 30 days, how often did... (

```         
1.  "... you feel hopeless";
2.  "... you feel so depressed that nothing could cheer you up";
3.  "... you feel restless or fidgety";
4.  "... you feel that everything was an effort";
5.  "... you feel worthless";
6.  " you feel nervous?"
```

Ordinal response options for the Kessler-6 are: "None of the time"; "A little of the time"; "Some of the time"; "Most of the time"; "All of the time."

#### Fatigue (waves: 5-15)

We assessed subjective fatigue by asking participants, "During the last 30 days, how often did ... you feel exhausted?" Responses were collected on an ordinal scale (0 = None of The Time, 1 = A little of The Time, 2 = Some of The Time, 3 = Most of The Time, 4 = All of The Time).

#### Rumination

"During the last 30 days, how often did.... you have negative thoughts that repeated over and over?"

Ordinal response options for the Kessler-6 are: "None of the time"; "A little of the time"; "Some of the time"; "Most of the time"; "All of the time."

### Practical well-being outcomes

#### Body Satisfaction (waves: 2-3, 4-15)

We measured body satisfaction with one item from @stronge_facebook_2015: "I am satisfied with the appearance, size and shape of my body", which participants rated from 1 (very inaccurate) to 7 (very accurate).

#### Emotional Regulation (waves: 10-13)

We measured participants' levels of emotional regulation using three items adpated from @gratz_multidimensional_2004 and @gross_individual_2003:

```         
1.  "When I feel negative emotions, my emotions feel out of control.";
2.  "When I feel negative emotions, I suppress or hide my emotions.";
3.  "When I feel negative emotions, I change the way I think to help me stay calm."
```

Participants were asked to indicate the extent to which they agree with these items (1 = Strongly Disagree to 7 = Strongly Agree).

#### Perfectionism (waves: 10-15)

We assessed participants' perfectionism using three items from @rice_short_2014: (1) Doing my best never seems to be enough; (2) My performance rarely measures up to my standards; (3) I am hardly ever satisfied with my performance. Participants indicated the extent to which they agree with these items (1 = Strongly Disagree to 7 = Strongly Agree).

#### Power Dependence

Participants' Power dependence was measured using two items:

```         
1." I do not have enough power or control over important parts of my life."
2". Other people have too much power or control over important parts of my life. 
```

Participants indicated their agreement with these items" (1 = Strongly Disagree to 7 = Strongly Agree).

<!-- #### Self-Respect (waves: 3, 4-11, 15) -->

<!-- We assessed participants' levels of self-respect using an item adapted from @tyler_understanding_1996. Participant indicated the extent to which they agree with the statement ("If they knew me, most NZers would respect what I have accomplished in life") on a likert scale (1 = Strongly Disagree to 7 = Strongly Agree) -->

#### Self-Control (waves: 5-15)

Participants were asked to indicate the extent to which they endorse the two items

```         
1.  "In general, I have a lot of self-control"
2.  "I wish I had more self-discipline"
```

The scale is from @tangney_high_2004. The responses to the items ranged from 1 (Strongly Disagree) to 7 (Strongly Agree).

#### Self-Esteem (waves: 1-3, 4-15)

We measured participants' self-esteem using three items adapted from @Rosenberg1965. Participants were instructed to circle the number that best represents how accurately each statement describes them. Participants responded to the items

```         
1.  "On the whole am satisfied with myself"
2.  "Take a positive attitude toward myself"
3.  "Am inclined to feel that I am a failure") on a likert-type scale (1 = Very inaccurate to 7 = Very accurate).
```

#### Sexual Satisfaction (waves: 10-15)

Participants were asked "How satisfied are you with your sex life?" (1 = Not satisfied to 7 = Very satisfied).

#### Vengeful Rumination (waves: 10-15)

We assessed participants' vengeful rumination using three items, respectively adapted from @caprara_indicators_1986 and @berry_forgivingness_2005, and developed for NZAVS: (1) Sometimes I can't sleep because of thinking about past wrongs I have suffered; (2) I can usually forgive and forget when someone does me wrong; (3) I find myself regularly thinking about past times that I have been wronged. Participants indicated their agreement with these items (1 = Strongly Disagree to 7 = Strongly Agree). The values for the second item were reversely coded.

### Reflective well-being

#### Meaning of Life (waves: 10-15)

We assessed participants' levels of life meaning using two items from @steger_meaning_2006:

```         
1.  My life has a clear sense of purpose;
2.  I have a good sense of what makes my life meaningful.
```

Participants indicated their agreement with these items (1 = Strongly Disagree to 7 = Strongly Agree).

#### Satisfaction with Life (waves: 1-3,4-15)

We measured life satisfaction with two items adapted from the Satisfaction with Life Scale [@diener1985]:

```         
1.  "I am satisfied with my life" and
2.  "In most ways my life is close to ideal".
```

Participants responded on a scale from 1 (Strongly Disagree) to 7 (Strongly Agree).

#### Personal Wellbeing (waves: 1-3, 4-15)

We measured participants' subjective wellbeing using three items from the Australian Unity Wellbeing Index [@cummins_developing_2003]:

```         
1.  your health;
2.  Your standard of living;
3.  Your future security; 4 Your personal relationships.
```

Participants read an instruction ("The following items assess your current satisfaction with different aspects of your life and aspects of New Zealand more generally") and indicated their satisfaction with those items (0 = Completely Dissatisfied to 10 = Completely Satisfied).

#### Standard Living

We measured participants' satisfaction with their standard of living using an item from the Australian Unity Wellbeing Index [@cummins_developing_2003]. Participants read an instruction ("Please rate your level of satisfaction with the following aspects of your life and New Zealand.") and responded to an item

```         
- "Your standard of living"
```

on a 10-point scale (0 = completely dissatisfied to 10 = completely satisfied).

### Social well-being outcomes

#### Charity Donation (waves: 1-3, 4-15)

We asked participants "How much money have you donated to charity in the last year?". To stablise this indicator, we first took the natural log of the response + 1, and then centred and standardised the log-transformed indicator.

#### Felt Belongingness (waves: 1-3, 4-15)

We assessed felt belongingness with three items adapted from the Sense of Belonging Instrument [@hagerty1995]:

```         
1.  "Know that people in my life accept and value me";
2.  "Feel like an outsider";
```

3.  "Know that people around me share my attitudes and beliefs".

Participants responded on a scale from 1 (Very Inaccurate) to 7 (Very Accurate). The second item was reversely coded.

#### Ethnic group impermeability (waves: 9-13)

The current income gap between New Zealand Europeans and other ethnic groups would be very hard to change.

#### Individual Permeability (waves: 9-13)

Participants indicated the extent to which they agree with the statement, "I believe I am capable, as an individual of improving my status in society.", from @tausch2015 (1 = Strongly Disagree to 7 = Strongly Agree).

#### Sense of Community (waves: 6-15)

We measured sense of community with a single item from @sengupta2013: "I feel a sense of community with others in my local neighbourhood." Participants answered on a scale of 1 (strongly disagree) to 7 (strongly agree).

#### Support (waves: 1-3, 4-15)

Participants' perceived social support was measured using three items from @cutrona1987 and @williams_cyberostracism_2000:

```         
1.  "There are people I can depend on to help me if I really need it";
2.  "There is no one I can turn to for guidance in times of stress";
3.  "I know there are people I can turn to when I need help." 
```

Participants indicated the extent to which they agree with those items (1 = Strongly Disagree to 7 = Strongly Agree).

The second item was negatively-worded, so we reversely recorded the responses to this item.

<!-- #### Volunteers (waves: 1, 4-15) -->

<!-- Participants were asked,"Please estimate how many hours you spent doing each of the following things last week" and responded to an item ("voluntary/charitable work"), from [@sibley2011]. -->

{{< pagebreak >}}

APPENDIX B. Sample {.appendix}

```{r}
#| label: table-baseline
#| echo: false
#| include: true
#| eval: true

prep_reflective <- readRDS(here::here(push_mods, "prep_reflective"))
prep_reflective$t0_born

dt_tab_p <- prep_reflective |>
  dplyr::mutate(t0_Male = as.factor(as.character(t0_male)),
          t0_Born_NZ = as.factor(t0_born_nz),
          t0_Partner = as.factor(t0_partner),
          t0_Parent  = as.factor(t0_parent),
          t0_Sample_Origin_Year = as.factor(t0_sample_origin_names_combined)  ) |>
    dplyr::select(-c(t0_male,t0_born_nz, t0_partner, t0_parent, t0_sample_origin_names_combined)) 

dt_tab <- dt_tab_p|> 
    dplyr::select(sort(names(dt_tab_p)))

baseline_table(dt_tab)
```

{{< pagebreak >}}


## References
