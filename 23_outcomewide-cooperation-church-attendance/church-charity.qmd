---
title: "Effect of church on multi-dimensionsal well-being"
subtitle: ""
abstract: |
  Counterfactual Prediction
author: 
  - name: Joseph A. Bulbulia
    affiliation: Victoria University of Wellington, New Zealand
    orcid_id: 0000-0002-5861-2056
    email: joseph.bulbulia@vuw.ac.nz
    corresponding: yes
  - name: Don E Davis
    affiliation: Georgia State University
    orcid_id: 0000-0003-3169-6576 
  - name: Ken Rice
    affiliation: Georgia State University 
  - name: Geoffrey Troughton
    affiliation: Victoria University of Wellington
  - name: Chris G. Sibley
    affiliation: School of Psychology, University of Auckland
    orcid_id: 0000-0002-4064-8800
execute:
  warning: false
  eval: false
keywords:
  - measurement
date: last-modified
editor_options: 
  chunk_output_type: console
---

```{r}
#| label: load-libraries
#| echo: false
#| include: false
#| eval: false

# uncomment and use these links to load your functions
# source("https://raw.githubusercontent.com/go-bayes/templates/main/functions/libs2.R")

# # read functions
# source("https://raw.githubusercontent.com/go-bayes/templates/main/functions/funs.R")


# libraries for jb (when internet is not accessible)
# read libraries
source("/Users/joseph/GIT/templates/functions/libs2.R")

# read functions
source("/Users/joseph/GIT/templates/functions/funs.R")

# experimental functions (more functions)
source(
  "https://raw.githubusercontent.com/go-bayes/templates/main/functions/experimental_funs.R"
)


# read data/ set to path in your computer
pull_path <-
  fs::path_expand(
    "/Users/joseph/v-project\ Dropbox/data/current/nzavs_13_arrow"
  )

# for saving models. # set path fo your computer
push_mods <-
  fs::path_expand(
    "/Users/joseph/v-project\ Dropbox/data/nzvs_mods/00drafts/23_church_charity"
  )

# read data: note that you need use the arrow package in R
dat <- arrow::read_parquet(pull_path)
```

## ADD BMI, ADD CHILDREN NUMBER # Humilty # Vengence # humil # Gratitude # Charity

```{r}
#| label: clean data
#| echo: false
#| include: false
#| eval: false

# note that religion church NA we impute zero to those who are not religious in the "religion_church2" variable

# check here
# table(is.na( dat$religion_church)) 
# table(is.na( dat$religion_church2)) 

# Note: read this: # create dataframes, one for each level of the factor.  This allows valid multiple imputation see: 
# https://bmcmedresmethodol.biomedcentral.com/articles/10.1186/s12874-023-01843-6


# select variables and emulate a target trial according to eligibility criteria
# you may need to select different confounders. note that the more you include, the less efficient the estimates,
# particularly if the confounder is only associated with the exposure.  On the other hand, better to err on the side of caution 

dat_long <- dat |>
  arrange(id, wave) |>
  mutate(urban = factor(
    ifelse(
      rural_gch2018 == "Medium Urban Accessibility" |
        # Define urban condition
        rural_gch2018 == "High Urban Accessibility",
      "urban",
      # Label 'urban' if condition is met
      "rural"  # Label 'rural' if condition is not met
    )
  )) |>
  # select variables
  # mutate(across(where(is.double), as.numeric)) |>
  mutate(male = as.numeric(male) - 1) |>
  rename(religion_religious = religious) |>  # religious yes/no
  mutate(religion_church_binary = ifelse(religion_church > 0, 1, 0)) |>
  mutate(religion_church_binary2 = ifelse(religion_church2 > 0, 1, 0)) |>
  mutate(religion_religious = as.numeric(religion_religious) - 1) |>
  dplyr::select(
    "wave",
    "year_measured",
    "id",
    # "edu",
    "sample_origin_names_combined",
    # Sample origin names combined
    #"alert_level_combined_lead",  not needed because all receive all levels by the point the outcome is measured
    # covid alert levels -> 2019-2020
    "education_level_coarsen",
    # Ordinal-Rank 0-10 NZREG codes (with overseas school quals coded as Level 3, and all other ancillary categories coded as missing)  Combined highschool levels See:https://www.nzqa.govt.nz/assets/Studying-in-NZ/New-Zealand-Qualification-Framework/requirements-nzqf.pdf
    "male",
    # 0 = female, 0.5 = neither female nor male, 1 = male.
    "age",
    "born_nz",
    "hlth_disability",
    # value label 0    No 1   Yes
    "eth_cat",
    #factor(EthCat, labels = c("Euro", "Maori", "Pacific", "Asian")),
    "employed",
    # Are you currently employed? (this includes self-employment or casual work)
    # "gen_cohort",
    "household_inc",
    # Please estimate your total household income (before tax) for the last year.
    "nz_dep2018",
    # see nzavs materials
    "nzsei13",
    # see nzavs materials
    "partner",
    # 0 = no, 1 = yes
    "parent",
    # 0 = no, 1 = yes
    "pol_orient",
    #Please rate how politically liberal versus conservative you see yourself as being.
    "pol_wing",
    # Please rate how politically left-wing versus right-wing you see yourself as being.
    "urban",
    # see NZAVS,
    "have_siblings", #Do you have siblings?
    "total_siblings",# sum siblings
    "number_sisters_older", #How many older sisters do you have?   
    "number_sisters_younger", #	How many younger sisters do you have? 
    "number_brothers_older",#	How many older brothers do you have?
    "number_brothers_younger", #	How many older brothers do you have?
    "children_num", # How many children have you given birth to, fathered, or adopted?
    "hours_children", #Hours - Looking after children
    "hours_work",#Hours - Working in paid employment
    "hours_housework", # Hours - Housework/cooking
    "agreeableness",
    # Mini-IPIP6 Agreeableness (also modelled as empathy facet)
    # Sympathize with others' feelings.
    # Am not interested in other people's problems.
    # Feel others' emotions.
    # Am not really interested in others.
    "conscientiousness",
    # see mini ipip6
    # Get chores done right away.
    # Like order.
    # Make a mess of things.
    # Often forget to put things back in their proper place.
    "extraversion",
    # Mini-IPIP6 Extraversion
    # Am the life of the party.
    # Don't talk a lot.
    # Keep in the background.
    # Talk to a lot of different people at parties.
    "honesty_humility",
    # see mini ipip6
    # Would like to be seen driving around in a very expensive car.
    # Would get a lot of pleasure from owning expensive luxury goods.
    # Feel entitled to more of everything.
    # Deserve more things in life.
    "openness",
    # see mini ipip6
    # Have a vivid imagination.
    # Have difficulty understanding abstract ideas.
    # Do not have a good imagination.
    # Am not interested in abstract ideas.
    "neuroticism",
    # see mini ipip6
    # Have frequent mood swings.
    # Am relaxed most of the time.
    # Get upset easily.
    # Seldom feel blue.
    "modesty",
    # see mini ipip6
    # I want people to know that I am an important person of high status,
    # I am an ordinary person who is no better than others.
    # I wouldn’t want people to treat me as though I were superior to them.
    # I think that I am entitled to more respect than the average person is
    # "sdo",
    # "rwa",
    # "brk_relationship",
    # "began_relationship",
    "religion_religious",
    # Do you identify with a religion and/or spiritual group?
    "religion_identification_level",
    #How important is your religion to how you see yourself?"
    "religion_church_binary",
    "religion_church_binary2",
    "religion_prayer",
    # How many times did you pray in the last week?
    "religion_scripture",
    # How many times did you read religious scripture in the last week?
    "religion_church2",
    # How many times did you attend a church or place of worship in the last month?
    "religion_believe_spirit",
    #Do you believe in some form of spirit or lifeforce?
    "religion_believe_god",
    #Do you believe in a God
    "religion_spiritual_identification",
    #w8,w10,w12-13 "I identify as a spiritual person."
    "religion_perceive_religious_discrim",
    #	I feel that I am often discriminated against because of my religious/spiritual beliefs.
    # "bigger_doms", #What religion or spiritual group?#  Not_Rel, Anglican , Buddist, Catholic , Christian_nfd, Christian_Others, Hindu, Jewish           Muslim, PresbyCongReform, TheOthers
    "w_gend_age_euro",
    # sample_weights.
    # Sometimes I can't sleep because of thinking about past wrongs I have suffered.//# I can usually forgive and forget when someone does me wrong.# I find myself regularly thinking about past times that I have been wronged.
    "gratitude",
    ## I have much in my life to be thankful for. # When I look at the world, I don’t see much to be grateful for. # I am grateful to a wide variety of peopl
    "modesty",
    # see above
    "vengeful_rumin",
    "charity_donate",
    #How much money have you donated to charity in the last year?
    "hours_charity",
    #,#Hours spent in activities/Hours spent … voluntary/charitable work
    "warm_asians",
    "warm_chinese",
    #"warm_disabled" ,  missing at time 0
    # begins w9
    "warm_immigrants",
    "warm_indians",
    "warm_elderly",
    # warm_lgbtq starts w12
    "warm_maori",
    "warm_mental_illness",
    "warm_muslims",
    "warm_nz_euro",
    "warm_overweight",
    "warm_pacific",
    "warm_refugees",
    "religion_perceive_religious_discrim",
    # "issue_same_sex_marriage", not in range
     "support", # three items as below
    # "support_help",
    # # 'There are people I can depend on to help me if I really need it.
    # "support_turnto",
    # # There is no one I can turn to for guidance in times of stress.
    # "support_rnoguidance",
    #There is no one I can turn to for guidance in times of stress.
    "family_time",
    "friends_time",
    "community_time",
    "family_money",
    "friends_money",
    "community_money",
    #Please estimate how much help you have received from the following sources in the last week?
    # Received help and support - hours
    # family
    # friends
    # others in my community
    # Received help and support - money
    # family
    # friends
    # others in my community
  )|> 
  dplyr::rename(sample_weights = w_gend_age_euro) |>
  dplyr::filter((wave == 2018 & year_measured  == 1) |
                  (wave == 2019  &
                     year_measured  == 1) |
                  (wave == 2020)) |>  # Eligibility criteria  Observed in 2018/2019 & Outcomes in 2020 or 2021
  group_by(id) |>
  dplyr::mutate(k_18 =  ifelse(wave == 2018 &
                                 !is.na(religion_church_binary2), 1, 0)) |>   # creating an indicator for the first wave
  dplyr::mutate(h_18 = mean(k_18, na.rm = TRUE)) |>   # Hack
  dplyr::mutate(k_19 =  ifelse(
    wave == 2019 &
      year_measured == 1 &
      !is.na(religion_church_binary2),
    1,
    0)) |>   # creating an indicator for the first wave; note that we allow people t
  dplyr::mutate(h_19 = mean(k_19, na.rm = TRUE)) |>  # Hack
  dplyr::filter(h_18 > 0) |>  # hack to enable repeat of baseline
  dplyr::filter(h_19 > 0) |>  # hack to enable repeat of baseline
  dplyr::mutate(
    friends_money = ifelse(friends_money < 0, 0, friends_money), # someone gave neg number
    household_inc_log = log(household_inc + 1),
    hours_children_log = log(hours_children + 1),
    hours_work_log = log(hours_work + 1),
    hours_housework_log = log(hours_housework + 1),
  ) |> 
  droplevels() |>
  select(-c("h_19", "k_19", "h_18", "k_18")) |>
  data.frame()


## Why we did the conversions -- zero inflation
## NOTE we ultimatedly opted for binary variables because the data do not clearly fit a useable distribution
# table(round( log(dat_long$family_money+1), 0))
# table(round( log(dat_long$friends_money+1), 0))
# table(round( log(dat_long$community_money+1),0))
# 
# ## Why we did the conversions -- zero inflation
# table(round( log(dat_long$family_time+1), 0))
# table(round( log(dat_long$friends_time+1), 0))
# table(round( log(dat_long$community_time+1),0))
# 
# 
# table(round( (dat_long$family_time), 0))
# table(round( (dat_long$friends_time), 0))
# table(round( (dat_long$community_time),0))
# 
# hist(log(dat_long$family_time+1))
# hist(log(dat_long$friends_time+1))
# hist(log(dat_long$community_time+1))
# 
# table(round( log(dat_long$family_money+1), 0))
# table(round( log(dat_long$friends_money+1), 0))
# table(round( log(dat_long$community_money+1),0))
# 
# # try neg binomial
# dt_test <- dat_long |> 
#   filter(wave == 2018) 
# dat_long$religion_religious
# 
# table1::table1(data = dt_test, ~ total_siblings | religion_religious)
# 
# min( dat_long$family_money, na.rm=TRUE)
# 
# 
# m_fam_ps <- glm(family_money ~ religion_church_binary2, data = dt_test, family = poisson)
# m_frm_ps <- glm(friends_money ~ religion_church_binary2, data = dt_test, family = poisson)
# m_com_ps <- glm(community_money ~ religion_church_binary2, data = dt_test, family = poisson)
# 
# m_fam_time_ps <- glm(family_time ~ religion_church_binary2, data = dt_test, family = poisson)
# m_frm_time_ps <- glm(friends_time ~ religion_church_binary2, data = dt_test, family = poisson)
# m_com_time_ps <- glm(community_time ~ religion_church_binary2, data = dt_test, family = poisson)
# 
# m_vol_ps <- glm(hours_charity ~ religion_church_binary2, data = dt_test, family = poisson)
# summary(m_vol_ps)
# 
# ## summary of poisson models.
# summary(m_fam_ps)
# summary(m_frm_ps)
# summary(m_com_ps)
# summary(m_fam_time_ps)
# summary(m_frm_time_ps)
#summary(m_com_time_ps)

```

```{r}
#| label: verify-positivity

dt_18_19_full <- dat_long |>
  mutate(
    religion_church_coarsen = cut(
      religion_church2,
      breaks = c(-Inf, 0, 1, 3.99, Inf),
      labels = c("0", "(0_1]", "(1_4)", "[4,inf]"),
      include.lowest = TRUE,
      right = TRUE
    )
  ) %>% 
  mutate(
    religion_church_coarsen_n = as.numeric(religion_church_coarsen)-1
  )

out <- msm::statetable.msm(round(religion_church_coarsen_n, 0), id, data = dt_18_19_full)

# for a function i wrote to create state tables
state_names <- c("zero", "one", "one_to_four", "four_above")

# transition table
t_tab <- transition_table(out)

# print 
cat(t_tab$explanation)
print(t_tab$table, state_names)


## Check only religious
####################### select religious ############

# filter religious
dt_18_religious_18 <- dt_18_19 %>% 
  filter(wave == 2018 & religion_religious == 1) 

# check n
n_unique(dt_18_religious_18$id)

# inspect table
table1::table1(data= dat_long, ~as.factor( religion_religious) |wave)

# filter religious 
religious_ids_2018 <- dt_18_religious_18$id

# check n
nrow(dt_18_religious_18)

#  select data of these religious individuals from the entire dataset
dt_18_19_religious <- dt_18_19 %>%
  filter(id %in% religious_ids_2018) %>%  
  mutate(
    religion_church_coarsen = cut(
      religion_church2,
      breaks = c(-Inf, 0, 1, 3.99, Inf),
      labels = c("0", "(0_1]", "(1_4)", "[4,Inf]"),
      include.lowest = TRUE,
      right = TRUE
    )
  ) %>% 
  mutate(
    religion_church_coarsen_n = as.numeric(religion_church_coarsen)-1
  )

n_unique(dt_18_19_religious$id)

table( dt_18_19_religious$religion_church_coarsen)

table( dt_18_19_religious$religion_church2)

# test positivity 
t_tab <- transition_table(out)

cat(t_tab$explanation)
print(t_tab$table, state_names)

out <- msm::statetable.msm(religion_church_binary2, id, data = dt_18_19_religious)

# note almost all change occurred among religious people.
```


```{r}
#|label: fix-strategy-in-light-of-target-trial

# get ids of people who are religious
dt_18_religious <- dat_long %>% 
  filter(wave == 2018 & religion_religious == 1) 

# check n
nrow(dt_18_religious)

# prepare data for modelling
# get unique identifiers of these individuals (replace `id` with your actual id variable)
religious_ids <- dt_18_religious$id

#  select data of these individuals from the entire dataset
# also create meaningful exposure variable

dat_long_t  <- dat_long %>%
  filter(id %in% religious_ids) %>%  
  mutate(
    religion_church_coarsen = cut(
      religion_church2,
      breaks = c(-Inf, 0, 1, 3.99, Inf),
      labels = c("zero", "one", "less_four", "four_up"),
      include.lowest = TRUE,
      right = TRUE
    )
  ) %>% 
  mutate(
    religion_church_coarsen_n = as.numeric(religion_church_coarsen)-1
  ) |> 
  droplevels() |> 
  arrange(id, wave) |> 
  data.frame()

# check n again
n_unique(dat_long_t$id)

# double check path
push_mods

# only look at vars at baseline
dat_18 <- dat_long_t |> 
  dplyr::filter(wave == 2018)

# save data for table
saveRDS(dat_18, here::here(push_mods, "dat_18"))


# better for imputation - make factors numeric. the mice package likes this
# rename to work with workflow
dat_long_t <- dat_long_t |> 
  mutate( eth_cat = as.integer( eth_cat),
          urban = as.numeric(urban),
          education_level_coarsen = as.integer(education_level_coarsen))

# save
saveRDS(dat_long_t, here::here(push_mods, "dat_long_t"))

# read if needed
#dat_long_t <- readRDS(here::here(push_mods, "dat_long_t"))
```





```{r}
#|label: data-wrangling-for-imputatons
# Create wide data frame
baseline_vars = c(
    "male",
    "age",
    "education_level_coarsen", # factors
    "eth_cat", #factor(EthCat, labels = c("Euro", "Maori", "Pacific", "Asian")),
    "employed", # Are you currently employed? (this includes self-employment or casual work)
    #"gen_cohort", #age
    "nz_dep2018",
    "nzsei13",
    "total_siblings",# added: needed because we are dealing with family giving/receiving
    "born_nz",  # added 
    "hlth_disability",  # added 
    "household_inc_log", # added: measured with error but OK for imputations
    "partner",
   # "parent",  # newly changed - have information in child number
    "pol_orient", #Please rate how politically liberal versus conservative you see yourself as being.
    #"pol_wing", # Please rate how politically left-wing versus right-wing you see yourself as being.
    "sample_origin_names_combined",    # Sample origin names combined
    "urban",
    "children_num",
    "household_inc_log", # new from previous study. needed because we are dealing with family giving/receiving
    "hours_children_log", # new
    "hours_work_log", # new
    "hours_housework_log", #new
    "agreeableness", 
    "conscientiousness",
    "extraversion",
    "honesty_humility",
    "openness",
    "neuroticism",
    "modesty", # I want people to know that I am an important person of high status, I am an ordinary person who is no better than others. , I wouldn’t want people to treat me as though I were superior to them. I think that I am entitled to more respect than the average person is.
  #  "religion_religious", # Do you identify with a religion and/or spiritual group?
    #"religion_identification_level", #How important is your religion to how you see yourself?"  # note this is not a great measure of virtue, virtue is a mean between extremes.
    "sample_weights"
)


# check
baseline_vars

# set exposure variable, can be both the continuous and the coarsened, if needed
exposure_var = c("religion_church_coarsen") # we could construct this after imputation. # "perfectionism_high" to be replace by "perfectionism_coarsen" - do the data wrangling after imputation.


# set outcomes for prosocial domain
outcome_vars_donate = c(
   "modesty",
   "honesty_humility",
   "vengeful_rumin",
   "gratitude",
   "hours_charity",
   "charity_donate"
  )


# set outcome for the acceptance domain 
outcome_vars_warmth = c(
    "warm_asians",
    "warm_chinese",
   # "warm_disabled" , not at time 10
    # begins w9
    "warm_immigrants",
    "warm_indians",
    "warm_elderly",
    # warm_lgbtq starts w12
    "warm_maori",
    "warm_mental_illness",
    "warm_muslims",
    "warm_nz_euro",
    "warm_overweight",
    "warm_pacific",
    "warm_refugees",
    "religion_perceive_religious_discrim"
  )


# set outcomes for the report received domain
outcome_vars_support = c(
    "family_time",
    "friends_time",
    "community_time",
    "family_money",
    "friends_money",
    "community_money",
    "support"
)






# data for mice. Note to self, you must out put this as a data.frame. fix that function
# old function
# prep_donate <- create_wide_data_general(dat_long_t, 
#   baseline_vars = baseline_vars, 
#   exposure_var = exposure_var,
#   outcome_vars = outcome_vars_donate)

prep_donate <- margot_wide(dat_long_t, 
  baseline_vars = baseline_vars, 
  exposure_var = exposure_var,
  outcome_vars = outcome_vars_donate)




str(prep_donate)
nrow(prep_donate)

prep_donate <-data.frame(prep_donate)


prep_warmth <- margot_wide(dat_long_t, 
  baseline_vars = baseline_vars, 
  exposure_var = exposure_var,
  outcome_vars = outcome_vars_warmth)

str(prep_warmth)
prep_warmth<-data.frame(prep_warmth)



outcome_vars_support

prep_support <- margot_wide(dat_long_t, 
  baseline_vars = baseline_vars, 
  exposure_var = exposure_var,
  outcome_vars = outcome_vars_support)

str(prep_support)
prep_support<-data.frame(prep_support)


## data for mice
exposure_vars = "t1_religion_church_coarsen"

table(round(prep_support$t2_community_time,0))

margot_filter <- function(dat_wide, exposure_vars) {
  # Check if exposure_vars are in dat_wide
  for (exposure_var in exposure_vars) {
    if (!exposure_var %in% names(dat_wide)) {
      stop(paste("exposure_var", exposure_var, "is not in the dataframe"))
    }
  }

  # Get factor and continuous exposure variables
  factor_exposure_vars <- exposure_vars[sapply(dat_wide[exposure_vars], is.factor)]
  continuous_exposure_vars <- setdiff(exposure_vars, factor_exposure_vars)

  if (length(factor_exposure_vars) > 1) {
    stop("More than one factor exposure variable is not allowed")
  }

  # Create a list to store the filtered dataframes
  list_filtered_df <- list()

  if (length(factor_exposure_vars) == 1) {
    # Get levels of the factor
    factor_levels <- levels(dat_wide[[factor_exposure_vars]])

    # Loop over each level and filter the dataframe
    for (level in factor_levels) {
      filtered_df <- dat_wide %>%
        filter((!!rlang::sym(factor_exposure_vars)) == level) %>%
        arrange(id)

      list_filtered_df[[level]] <- filtered_df
    }
  } else {
    # If there are no factor exposure variables, just arrange by id
    filtered_df <- dat_wide %>% arrange(id)
    list_filtered_df[["data"]] <- filtered_df
  }

  return(list_filtered_df)
}






# prepare data for mice. We impute within stratums of exposure 
# old name
#prep_multiple_donate  <- create_filtered_wide_dataframes(prep_donate, exposure_vars = exposure_vars) 

prep_multiple_donate <- margot_filter(prep_donate, exposure_vars = exposure_vars) 

prep_multiple_warmth <- margot_filter(prep_warmth, exposure_vars = exposure_vars) 

prep_multiple_support <- margot_filter(prep_support, exposure_vars = exposure_vars) 

#test 
a <- nrow( prep_multiple_support$zero)
b <- nrow( prep_multiple_support$one)
c <- nrow( prep_multiple_support$less_four)
d <-nrow( prep_multiple_support$four_up)

# check
a + b + c + d == nrow(prep_support)
```





```{r}
#| label: imputations-donate
#| echo: false
#| include: false
#| eval: false

naniar::vis_miss(prep_donate, warn_large_data = FALSE)

# check for collinear vars
mice:::find.collinear(prep_donate)

# impute
mice_donate <- impute_and_combine(prep_multiple_donate, m = 10)

#check
push_mods

# save imputed data
saveRDS(mice_donate,
        here::here(push_mods, "mice_donate"))

# read if needed
mice_donate <- readRDS(here::here(push_mods, "mice_donate"))

# complete
mice_donate_c  <- mice::complete(mice_donate, action = 'long', include = TRUE)

# spit an shine
mice_donate_c <-mice_donate_c |> select(-c(.id.1, .imp.1))

# check data
#skimr::skim(mice_donate_c)

# prepare: spit and shine
row.names(mice_donate_c) <- NULL

# note that poisson models for rates inference await development.  Evalues are invalid, and se estimates are invalid.
# we keep the code here for that day
# poisson models do work for binary data though.

mice_donate_mids <- mice_donate_c %>%
  arrange(.imp, id) |> 
  rename(sample_weights = t0_sample_weights) |> 
  mutate(t0_eth_cat = as.factor(t0_eth_cat),
        t0_education_level_coarsen = as.factor(t0_education_level_coarsen),
        t0_hours_charity_log =   log(t0_hours_charity+1),# to improve model convergence
        t2_hours_charity_log =   log(t2_hours_charity+1),# to improve model convergence
        t0_charity_donate_log =  log(t0_charity_donate+1), # to improve model convergence
        t2_charity_donate_log =   log(t2_charity_donate+1),# to improve model convergence
        t2_volunteers = as.integer(ifelse(t2_hours_charity > 0,1,0)),
        t2_hours_charity_ord = as.integer(round(t2_hours_charity,0)), 
        t2_charity_donate_ord = as.integer(round(t2_charity_donate,0))) |> 
  select(-t0_hours_charity, -t0_charity_donate) %>%
  dplyr::group_by(.imp) |>
  rowwise() |>
  dplyr::ungroup() |> 
  dplyr::mutate(across(where(is.numeric) & !sample_weights & !t2_volunteers, ~ scale(.x), .names = "{col}_z")) %>%
  select(-c(.imp_z, .id_z)) %>%
   select(
    where(is.factor),
    sample_weights,
    t2_hours_charity_log,
    t2_charity_donate_log,
    t2_volunteers,
    t2_hours_charity_ord,
    t2_charity_donate_ord,
    ends_with("_z"),
    .imp,
    .id
  ) |> 
  relocate(id, .before = sample_weights)  %>%
  relocate(sample_weights, .before = starts_with("t1_"))  %>%
  relocate(starts_with("t0_"), .before = starts_with("t1_"))  %>%
  relocate(starts_with("t2_"), .after = starts_with("t1_"))  %>%
  mutate_if(is.matrix, as.vector) %>%
  droplevels() |> 
  as.mids()
  
# need long for getting var names and such
mice_donate_long <- mice::complete(mice_donate_mids, "long", inc = TRUE)

# checks
skim(mice_donate_long)

# save
saveRDS(mice_donate_mids, here::here(push_mods, "mice_donate_mids"))
saveRDS(mice_donate_long, here::here(push_mods, "mice_donate_long"))
```




```{r}
#| label: imputations-warmth
#| echo: false
#| include: false
#| eval: false

naniar::vis_miss(prep_warmth, warn_large_data = FALSE)

# check for collinear vars
mice:::find.collinear(prep_warmth)

# impute
mice_warmth <- impute_and_combine(prep_multiple_warmth, m = 10)

# check
push_mods

# save imputed data
saveRDS(mice_warmth,
        here::here(push_mods, "mice_warmth"))

# read (if needed)
#mice_warmth <- readRDS(here::here(push_mods, "mice_warmth"))

#spit and shine
mice_warmth_c  <- mice::complete(mice_warmth, action = 'long', include = TRUE)

#spit and shine
mice_warmth_c <-mice_warmth_c |> select(-c(.id.1, .imp.1))

# check data
#skimr::skim(mice_warmth_c)

# #spit and shine
row.names(mice_warmth_c) <- NULL

# post-impute data wrangling
mice_warmth_mids <- mice_warmth_c %>%
  arrange(.imp, id) |> 
  rename(sample_weights = t0_sample_weights) |> 
mutate(t0_eth_cat = as.factor(t0_eth_cat),
        t0_education_level_coarsen = as.factor(t0_education_level_coarsen)
         )|>
  dplyr::group_by(.imp) |>
  rowwise() |>
  dplyr::ungroup() |> 
  dplyr::mutate(across(where(is.numeric) & !sample_weights, ~ scale(.x), .names = "{col}_z")) |>
  select(-c(.imp_z, .id_z)) %>%
   select(
    where(is.factor),
    sample_weights,
    ends_with("_z"),
    .imp,
    .id
  ) |> 
  relocate(id, .before = sample_weights)  %>%
  relocate(sample_weights, .before = starts_with("t1_"))  %>%
  relocate(starts_with("t0_"), .before = starts_with("t1_"))  %>%
  relocate(starts_with("t2_"), .after = starts_with("t1_"))  %>%
  mutate_if(is.matrix, as.vector) %>%
  droplevels() |> 
  as.mids()
  
# needed for getting var names and checks
mice_warmth_long <- mice::complete(mice_warmth_mids, "long", inc = TRUE)

# save
saveRDS(mice_warmth_mids, here::here(push_mods, "mice_warmth_mids"))
saveRDS(mice_warmth_long, here::here(push_mods, "mice_warmth_long"))
```



```{r}
#| label: imputations-support
#| echo: false
#| include: false
#| eval: false

naniar::vis_miss(prep_support, warn_large_data = FALSE)
dev.off()

# check for collinear vars
mice:::find.collinear(prep_support)

# impute
mice_support <- impute_and_combine(prep_multiple_support, m = 10)

# check
push_mods

# save imputed data
saveRDS(mice_support,
        here::here(push_mods, "mice_support"))

# read (if nec)
# mice_support <- readRDS(here::here(push_mods, "mice_support"))

# complete
mice_support_c  <- mice::complete(mice_support, action = 'long', include = TRUE)

#spit and shine
mice_support_c <-mice_support_c |> select(-c(.id.1, .imp.1))

# check data
#skimr::skim(mice_support_c)

# prepare
row.names(mice_support_c) <- NULL


# note that poisson models for rates inference await development.  Evalues are invalid, and se estimates are invalid.
# we keep the code here for that day
# poisson models do work for binary data though.

mice_support_mids <- mice_support_c %>%
  arrange(.imp, id) |> 
  rename(sample_weights = t0_sample_weights) |> 
  mutate(t0_eth_cat = as.factor(t0_eth_cat),
        t0_education_level_coarsen = as.factor(t0_education_level_coarsen),
        t0_family_time_log =   log(t0_family_time+1),# to improve model convergence
        t2_family_time_log =   log(t2_family_time+1),# to improve model convergence
        t0_friends_time_log =   log(t0_friends_time+1),# to improve model convergence
        t2_friends_time_log =   log(t2_friends_time+1),# to improve model convergence
        t0_community_time_log =   log(t0_community_time+1),# to improve model convergence
        t2_community_time_log =   log(t2_community_time+1),# to improve model convergence
        t0_family_money_log =   log(t0_family_money+1),# to improve model convergence
        t2_family_money_log =   log(t2_family_money+1),# to improve model convergence
        t0_friends_money_log =   log(t0_friends_money+1),# to improve model convergence
        t2_friends_money_log =   log(t2_friends_money+1),# to improve model convergence
        t0_community_money_log =   log(t0_community_money+1),# to improve model convergence
        t2_community_money_log =   log(t2_community_money+1),# to improve model convergence
        t2_family_time_binary = as.integer(ifelse(t2_family_time > 0, 1, 0)),
        t2_friends_time_binary = as.integer(ifelse(t2_friends_time > 0, 1, 0)),
        t2_community_time_binary = as.integer(ifelse(t2_community_time > 0, 1, 0)),
        t2_family_money_binary = as.integer(ifelse(t2_family_money > 0, 1, 0)),
        t2_friends_money_binary = as.integer(ifelse(t2_friends_money > 0, 1, 0)),
        t2_community_money_binary = as.integer(ifelse(t2_community_money > 0, 1, 0)),
        t2_family_time_ord = as.integer(round(t2_family_time,0)), 
        t2_family_money_ord = as.integer(round(t2_family_money,0)), 
        t2_friends_time_ord = as.integer(round(t2_friends_time,0)), 
        t2_friends_money_ord = as.integer(round(t2_friends_money,0)), 
        t2_community_time_ord = as.integer(round(t2_community_time,0)), 
        t2_community_money_ord = as.integer(round(t2_community_money,0)))|>
  dplyr::select(-t0_family_time, -t0_friends_time, -t0_community_time, -t0_family_money, -t0_friends_money,-t0_community_money) |>  # we only worry about removing unneccessary baseline measures, because  the outcomes will not be used for prediction
  dplyr::group_by(.imp) |>
  rowwise() |>
  dplyr::ungroup() |>
  dplyr::mutate(
    across(
      where(is.numeric) & !sample_weights & 
        !t2_family_time_binary &
        !t2_friends_time_binary &
        !t2_community_time_binary &
        !t2_family_money_binary &
        !t2_friends_money_binary &
        !t2_community_money_binary &
        !t2_family_time_ord & 
        !t2_family_money_ord & 
        !t2_friends_time_ord & 
        !t2_friends_money_ord & 
        !t2_community_time_ord & 
        !t2_community_money_ord, 
      ~ scale(.x),
      .names = "{col}_z"
    )
  ) %>%
  select(-c(.imp_z, .id_z)) %>%
  select(
    where(is.factor),
    sample_weights,
      t2_family_time_binary,
      t2_friends_time_binary, 
      t2_community_time_binary, 
      t2_family_money_binary,
      t2_friends_money_binary, 
      t2_community_money_binary,
       t2_family_time_ord, 
        t2_family_money_ord, 
        t2_friends_time_ord, 
        t2_friends_money_ord, 
        t2_community_time_ord, 
        t2_community_money_ord,
    ends_with("_z"),
    .imp,
    .id
  ) |> 
  relocate(id, .before = sample_weights)  %>%
  relocate(sample_weights, .before = starts_with("t1_"))  %>%
  relocate(starts_with("t0_"), .before = starts_with("t1_"))  %>%
  relocate(starts_with("t2_"), .after = starts_with("t1_"))  %>%
  mutate_if(is.matrix, as.vector) %>%
  droplevels() |> 
  as.mids()
  
# needed for checks
mice_support_long <- mice::complete(mice_support_mids, "long", inc = TRUE)

# check
skim(mice_support_long)

# save
saveRDS(mice_support_mids, here::here(push_mods, "mice_support_mids"))
saveRDS(mice_support_long, here::here(push_mods, "mice_support_long"))
```



```{r}
#| label: models-donate
#| eval: false

mice_donate_mids <- readRDS(here::here(push_mods, "mice_donate_mids"))

# long form data if necessary
mice_donate_long <- readRDS(here::here(push_mods, "mice_donate_long"))

# check
skim(mice_donate_long)

#name exposure
levels( mice_donate_long$t1_religion_church_coarsen )

# Set exposure 
X <- "t1_religion_church_coarsen"

baseline_vars_donate = mice_donate_long |> 
  dplyr::select(starts_with("t0"))|> colnames() # strange to include these -- as they  are income by other names

# check
baseline_vars_donate

# keep outcome vars
outcome_vars_donate = mice_donate_long |> dplyr::select(starts_with("t2")) |> colnames()

outcome_vars_donate

# set estimand
estimand = "ATE"

# ebalance
mice_donate_ebal <- match_mi_general(data = mice_donate_mids, 
                                 X = X, 
                                 baseline_vars = baseline_vars_donate, 
                                 estimand = estimand,  
                                # focal = "zero",
                                 method = "ebal", 
                                 sample_weights = "sample_weights")
saveRDS(mice_donate_ebal, here::here(push_mods, "mice_donate_ebal"))

# summary
sum_ebal <- summary(mice_donate_ebal)
sum_ebal

#graphs
plot(sum_ebal)
bal.tab(mice_donate_ebal)

# if trim is needed
mice_donate_ebal_trim <- WeightIt::trim(mice_donate_ebal, at = .99)
sum_ebal_trim <- summary(mice_donate_ebal_trim)
sum_ebal_trim

# graphs
plot(sum_ebal_trim)
bal.tab(mice_donate_ebal_trim,stats = c("m", "ks"), abs = TRUE)
love.plot(mice_donate_ebal_trim, binary = "std", thresholds = c(m = .1))

# settings 
# set dataframe
dt_donate = mice_donate_ebal_trim

# set cores
cl =  parallel::detectCores () 
cores =  parallel::detectCores () 

#
nsims = 1000

#check
treat_0 = "zero"

#check
treat_1 = "four_up" 

# check X
X
 
### Models 

#### Volunteering Hours
mod_donate_volunteers_gauss_rd  <- double_robust(
  df = dt_donate,  # note change
  Y = "t2_hours_charity_log_z",
  X = X,
  baseline_vars = baseline_vars_donate,
  treat_1 = treat_1,
  treat_0 = treat_0,
  estimand = estimand,
  scale = "RD",
  nsims = nsims,
  cores = cores,
  family = "gaussian",
  weights = TRUE,
  continuous_X = FALSE,
  splines = FALSE, 
  vcov = "HC",
  new_name =  "Volunteers (sd)"
)
mod_donate_volunteers_gauss_rd
saveRDS(mod_donate_volunteers_gauss_rd, here::here(push_mods, "mod_donate_volunteers_gauss_rd"))

# volunteer
mod_donate_volunteer_binary_rr  <- double_robust(
  df = dt_donate,  # note change
  Y = "t2_volunteers",
  X = X, 
  baseline_vars = baseline_vars_donate,# baseline_vars_donate,# will not converge
  treat_1 = treat_1,
  treat_0 = treat_0,
  estimand = estimand,
  scale = "RR",
  nsims = nsims,
  cores = cores,
  family = "poisson",
  weights = TRUE,
  continuous_X = FALSE,
  splines = FALSE, 
  new_name = "Volunteers (y/n)",
  vcov ="HC"
)

mod_donate_volunteer_binary_rr
saveRDS(mod_donate_volunteer_binary_rr, here::here(push_mods, "mod_donate_volunteer_binary_rr"))


# annual charity donations
mod_donate_charity_dollars_gauss_rd  <- double_robust(
  df = dt_donate,  # note change
  Y = "t2_charity_donate_log_z",
  X = X,
  baseline_vars = baseline_vars_donate,
  treat_1 = treat_1,
  treat_0 = treat_0,
  estimand = estimand,
  scale = "RD",
  nsims = nsims,
  cores = cores,
  family = "gaussian",
  weights = TRUE,
  continuous_X = FALSE,
  splines = FALSE, 
  vcov = "HC",
  new_name =  "Annual charity (sd)"
)
mod_donate_charity_dollars_gauss_rd
saveRDS(mod_donate_charity_dollars_gauss_rd, here::here(push_mods, "mod_donate_charity_dollars_gauss_rd"))

# modesty
mod_donate_modesty  <- double_robust(
  df = dt_donate, 
  Y = "t2_modesty_z",
  X = X,
  baseline_vars = baseline_vars_donate,
  treat_1 = treat_1,
  treat_0 = treat_0,
  estimand = estimand,
  scale = "RD",
  nsims = nsims,
  cores = cores,
  family = "gaussian",
  weights = TRUE,
  continuous_X = FALSE,
  splines = FALSE,
  vcov = "HC",
  new_name = "Modesty/Humility (sd)"
)
mod_donate_modesty
saveRDS(mod_donate_modesty, here::here(push_mods, "mod_donate_modesty"))



# humility
mod_donate_honesty_humility  <- double_robust(
  df = dt_donate, 
  Y = "t2_honesty_humility_z",
  X = X,
  baseline_vars = baseline_vars_donate,
  treat_1 = treat_1,
  treat_0 = treat_0,
  estimand = estimand,
  scale = "RD",
  nsims = nsims,
  cores = cores,
  family = "gaussian",
  weights = TRUE,
  continuous_X = FALSE,
  splines = FALSE,
  vcov = "HC",
  new_name = "Honesty/Humility (sd)"
)
mod_donate_honesty_humility
saveRDS(mod_donate_honesty_humility, here::here(push_mods, "mod_donate_honesty_humility"))

# veng_rumin/ humilty 
mod_donate_vengeful_rumin  <- double_robust(
  df = dt_donate, 
  Y = "t2_vengeful_rumin_z",
  X = X,
  baseline_vars = baseline_vars_donate,
  treat_1 = treat_1,
  treat_0 = treat_0,
  estimand = estimand,
  scale = "RD",
  nsims = nsims,
  cores = cores,
  family = "gaussian",
  weights = TRUE,
  continuous_X = FALSE,
  splines = FALSE,
  vcov = "HC",
  new_name = "Vengeful (sd)"
)
mod_donate_vengeful_rumin
saveRDS(mod_donate_honesty_humility, here::here(push_mods, "mod_donate_vengeful_rumin"))

# gratitude
mod_donate_gratitude <- double_robust(
  df = dt_donate, 
  Y = "t2_gratitude_z",
  X = X,
  baseline_vars = baseline_vars_donate,
  treat_1 = treat_1,
  treat_0 = treat_0,
  estimand = estimand,
  scale = "RD",
  nsims = nsims,
  cores = cores,
  family = "gaussian",
  weights = TRUE,
  continuous_X = FALSE,
  splines = FALSE,
  vcov = "HC",
  new_name = "Gratitude (sd)"
)
mod_donate_gratitude
saveRDS(mod_donate_gratitude, here::here(push_mods, "mod_donate_gratitude"))


# import if needed
mod_donate_volunteer_binary_rr <- readRDS( here::here(push_mods, "mod_donate_volunteer_binary_rr"))
mod_donate_volunteers_gauss_rd <- readRDS( here::here(push_mods, "mod_donate_volunteers_gauss_rd"))
mod_donate_volunteers_gauss_rd <- readRDS( here::here(push_mods, "mod_donate_volunteers_gauss_rd"))
mod_donate_charity_dollars_gauss_rd <- readRDS( here::here(push_mods, "mod_donate_charity_dollars_gauss_rd")
mod_donate_modesty <- readRDS( here::here(push_mods, "mod_donate_modesty"))
mod_donate_honesty_humility <- readRDS( here::here(push_mods, "mod_donate_honesty_humility"))
mod_donate_vengeful_rumin <- readRDS( here::here(push_mods, "mod_donate_vengeful_rumin"))
mod_donate_gratitude <- readRDS( here::here(push_mods, "mod_donate_gratitude"))

# make table
tab_donate_rd <- rbind(
  mod_donate_modesty,
  mod_donate_honesty_humility,
  mod_donate_vengeful_rumin,
  mod_donate_gratitude,
  mod_donate_volunteers_gauss_rd,
  mod_donate_charity_dollars_gauss_rd
)

# inspect
tab_donate_rd

# make the group tab (which will have Evalues)
group_tab_donate_rd <- group_tab(tab_donate_rd, type = "RD")

# view
group_tab_donate_rd

# save
saveRDS(group_tab_donate_rd, here::here(push_mods, "group_tab_donate_rd"))
group_tab_donate_rd <- readRDS(here::here(push_mods, "group_tab_donate_rd"))


group_plot_ate_donate_rd <- margot_plot(
  group_tab_donate_rd,
  type = "RD",
  title = "ATE: causal contrast:zero to weekly church attendance", 
  subtitle = "Annual charity donations and weekly volunteering",
  xlab = "(sd units)",
  ylab = "test",
  estimate_scale = 1,
  base_size = 11,
  text_size = 2.75,
  point_size = .5,
  title_size = 12,
  subtitle_size = 11,
  legend_text_size = 8,
  legend_title_size = 10,
  x_offset = -.7,
  x_lim_lo = -.7,
  x_lim_hi =  .4)

group_plot_ate_donate_rd

ggsave(
  group_plot_ate_donate_rd,
  path = here::here(here::here(push_mods, "group_plot_ate_donate_rd")),
  width = 8,
  height = 4,
  units = "in",
  filename = "group_plot_ate_donate_rd.png",
  device = 'png',
  limitsize = FALSE,
  dpi = 600
)

# rate ratios
# The interpretation of the rate ratio depends on the context. For example, if we looking at the number of volunteering cases in different church attending populations over a certain period, the rate ratio would be interpreted as the ratio of the rate of volunteering in the exposed population to the rate of volunteering in the unexposed population.
# save model


tab_donate_rr <- rbind(
  mod_donate_volunteer_binary_rr
)

tab_donate_rr
tab_donate_rr

## NEEDS WORK
group_tab_donate_rr <- group_tab(tab_donate_rr, type = "RR")

group_tab_donate_rr

saveRDS(group_tab_donate_rr, here::here(push_mods, "group_tab_donate_rr"))
group_tab_donate_rr <- readRDS( here::here(push_mods, "group_tab_donate_rr"))

group_plot_ate_donate_rr <- margot_plot(group_tab_donate_rr,
               type = "RR",
  title = "ATE: causal RR: zero to weekly church attendance", 
  subtitle = "Weekly volunteering: y/n",
  xlab = "(SD units)",
  estimate_scale = 1,
  base_size = 15,
  text_size = 3.75,
  point_size = .5,
  title_size = 12,
  subtitle_size = 11,
  legend_text_size = 8,
  legend_title_size = 10,
  x_offset = -.1,
  x_lim_lo = -.1,
  x_lim_hi =  2 )

group_plot_ate_donate_rr


ggsave(
  group_plot_ate_donate_rr,
  path = here::here(here::here(push_mods, "group_plot_ate_donate_rr")),
  width = 8,
  height = 4,
  units = "in",
  filename = "group_plot_ate_donate_rr.png",
  device = 'png',
  limitsize = FALSE,
  dpi = 600
)
```



```{r}
#|label: models-warmth

# read imputations
mice_warmth_mids <- readRDS(here::here(push_mods, "mice_warmth_mids"))
mice_warmth_long <- readRDS(here::here(push_mods, "mice_warmth_long"))

# check
skim(mice_warmth_long)

# Set exposure 
X <- "t1_religion_church_coarsen"

# create baseline vars
baseline_vars_warmth = mice_warmth_long |> 
  dplyr::select(starts_with("t0"))|> colnames() # strange to include these -- as they  are income by other names

baseline_vars_warmth

# create outcome vars
outcome_vars_warmth = mice_warmth_long |> dplyr::select(starts_with("t2")) |> colnames()
outcome_vars_warmth

# estimand
estimand = "ATE"

# ebalance weights
mice_warmth_ebal <- match_mi_general(data = mice_warmth_mids, 
                                 X = X, 
                                 baseline_vars = baseline_vars_warmth, 
                                 estimand = estimand,  
                                # focal = "zero",
                                 method = "ebal", 
                                 sample_weights = "sample_weights")
saveRDS(mice_warmth_ebal, here::here(push_mods, "mice_warmth_ebal"))

# summary
sum_ebal <- summary(mice_warmth_ebal)
sum_ebal

# graphs
plot(sum_ebal)
bal.tab(mice_warmth_ebal)

# if trim (if needed)
mice_warmth_ebal_trim <- WeightIt::trim(mice_warmth_ebal, at = .99)
sum_ebal_trim <- summary(mice_warmth_ebal_trim)
sum_ebal_trim

# graphs
plot(sum_ebal_trim)
bal.tab(mice_warmth_ebal_trim,stats = c("m", "ks"), abs = TRUE)
love.plot(mice_warmth_ebal_trim, binary = "std", thresholds = c(m = .1))

# settings 
dt_warmth = mice_warmth_ebal_trim

# cores
cl =  parallel::detectCores () 
cores =  parallel::detectCores () 

#levels(dat_long_t$religion_church_coarsen)
nsims = 1000

#check treatments
treat_0 = "zero"
#check
treat_1 = "four_up" 
 

# models

# asians
mod_warmth_asians  <- double_robust(
  df = dt_warmth,  # note change
  Y = "t2_warm_asians_z",
  X = X,
  baseline_vars = baseline_vars_warmth,
  treat_1 = treat_1,
  treat_0 = treat_0,
  estimand = estimand,
  scale = "RD",
  nsims = nsims,
  cores = cores,
  family = "gaussian",
  weights = TRUE,
  continuous_X = FALSE,
  splines = FALSE, 
  vcov = "HC",
  new_name = "Warmth Asians (sd)"
)
mod_warmth_asians
saveRDS(mod_warmth_asians, here::here(push_mods, "mod_warmth_asians"))

# chinese
mod_warmth_chinese  <- double_robust(
  df = dt_warmth,  # note change
  Y = "t2_warm_chinese_z",
  X = X,
  baseline_vars = baseline_vars_warmth,
  treat_1 = treat_1,
  treat_0 = treat_0,
  estimand = estimand,
  scale = "RD",
  nsims = nsims,
  cores = cores,
  family = "gaussian",
  weights = TRUE,
  continuous_X = FALSE,
  splines = FALSE, 
  vcov = "HC",
  new_name = "Warmth Chinese (sd)"
)

mod_warmth_chinese
saveRDS(mod_warmth_chinese, here::here(push_mods, "mod_warmth_chinese"))

# migrants
mod_warmth_immigrants  <- double_robust(
  df = dt_warmth,  # note change
  Y = "t2_warm_immigrants_z",
  X = X,
  baseline_vars = baseline_vars_warmth,
  treat_1 = treat_1,
  treat_0 = treat_0,
  estimand = estimand,
  scale = "RD",
  nsims = nsims,
  cores = cores,
  family = "gaussian",
  weights = TRUE,
  continuous_X = FALSE,
  splines = FALSE, 
  vcov = "HC",
  new_name = "Warmth Immigrants (sd)"
)
mod_warmth_immigrants
saveRDS(mod_warmth_immigrants, here::here(push_mods, "mod_warmth_immigrants"))


# indians
mod_warmth_indians  <- double_robust(
  df = dt_warmth,  # note change
  Y = "t2_warm_indians_z",
  X = X,
  baseline_vars = baseline_vars_warmth,
  treat_1 = treat_1,
  treat_0 = treat_0,
  estimand = estimand,
  scale = "RD",
  nsims = nsims,
  cores = cores,
  family = "gaussian",
  weights = TRUE,
  continuous_X = FALSE,
  splines = FALSE, 
  vcov = "HC",
  new_name = "Warmth Indians (sd)"
)


mod_warmth_indians
saveRDS(mod_warmth_indians, here::here(push_mods, "mod_warmth_indians"))

# elderly
mod_warmth_elderly  <- double_robust(
  df = dt_warmth,  # note change
  Y = "t2_warm_elderly_z",
  X = X,
  baseline_vars = baseline_vars_warmth,
  treat_1 = treat_1,
  treat_0 = treat_0,
  estimand = estimand,
  scale = "RD",
  nsims = nsims,
  cores = cores,
  family = "gaussian",
  weights = TRUE,
  continuous_X = FALSE,
  splines = FALSE, 
  vcov = "HC",
  new_name = "Warmth Elderly (sd)"
)


mod_warmth_elderly
saveRDS(mod_warmth_elderly, here::here(push_mods, "mod_warmth_elderly"))

# maori
mod_warmth_maori  <- double_robust(
  df = dt_warmth,  # note change
  Y = "t2_warm_maori_z",
  X = X,
  baseline_vars = baseline_vars_warmth,
  treat_1 = treat_1,
  treat_0 = treat_0,
  estimand = estimand,
  scale = "RD",
  nsims = nsims,
  cores = cores,
  family = "gaussian",
  weights = TRUE,
  continuous_X = FALSE,
  splines = FALSE, 
  vcov = "HC",
  new_name = "Warmth Māori (sd)"
)


mod_warmth_maori
saveRDS(mod_warmth_maori, here::here(push_mods, "mod_warmth_maori"))

# mental health
mod_warmth_mental  <- double_robust(
  df = dt_warmth,  # note change
  Y = "t2_warm_mental_illness_z",
  X = X,
  baseline_vars = baseline_vars_warmth,
  treat_1 = treat_1,
  treat_0 = treat_0,
  estimand = estimand,
  scale = "RD",
  nsims = nsims,
  cores = cores,
  family = "gaussian",
  weights = TRUE,
  continuous_X = FALSE,
  splines = FALSE, 
  vcov = "HC",
  new_name = "Warmth Mental Illness (sd)"
)


mod_warmth_mental
saveRDS(mod_warmth_mental, here::here(push_mods, "mod_warmth_mental"))


# muslims
mod_warmth_muslims  <- double_robust(
  df = dt_warmth,  # note change
  Y = "t2_warm_muslims_z",
  X = X,
  baseline_vars = baseline_vars_warmth,
  treat_1 = treat_1,
  treat_0 = treat_0,
  estimand = estimand,
  scale = "RD",
  nsims = nsims,
  cores = cores,
  family = "gaussian",
  weights = TRUE,
  continuous_X = FALSE,
  splines = FALSE, 
  vcov = "HC",
  new_name = "Warmth Muslims (sd)"
)

mod_warmth_muslims
saveRDS(mod_warmth_muslims, here::here(push_mods, "mod_warmth_muslims"))

# nzeuro
mod_warmth_nzeuro  <- double_robust(
  df = dt_warmth,  # note change
  Y = "t2_warm_nz_euro_z",
  X = X,
  baseline_vars = baseline_vars_warmth,
  treat_1 = treat_1,
  treat_0 = treat_0,
  estimand = estimand,
  scale = "RD",
  nsims = nsims,
  cores = cores,
  family = "gaussian",
  weights = TRUE,
  continuous_X = FALSE,
  splines = FALSE, 
  vcov = "HC",
  new_name = "Warmth NZ Europeans (sd)"
)


mod_warmth_nzeuro
saveRDS(mod_warmth_nzeuro, here::here(push_mods, "mod_warmth_nzeuro"))


# overweight
mod_warmth_overweight  <- double_robust(
  df = dt_warmth,  # note change
  Y = "t2_warm_overweight_z",
  X = X,
  baseline_vars = baseline_vars_warmth,
  treat_1 = treat_1,
  treat_0 = treat_0,
  estimand = estimand,
  scale = "RD",
  nsims = nsims,
  cores = cores,
  family = "gaussian",
  weights = TRUE,
  continuous_X = FALSE,
  splines = FALSE, 
  vcov = "HC",
  new_name = "Warmth Overweight (sd)"
)


mod_warmth_overweight
saveRDS(mod_warmth_overweight, here::here(push_mods, "mod_warmth_overweight"))

# pacific
mod_warmth_pacific  <- double_robust(
  df = dt_warmth,  # note change
  Y = "t2_warm_pacific_z",
  X = X,
  baseline_vars = baseline_vars_warmth,
  treat_1 = treat_1,
  treat_0 = treat_0,
  estimand = estimand,
  scale = "RD",
  nsims = nsims,
  cores = cores,
  family = "gaussian",
  weights = TRUE,
  continuous_X = FALSE,
  splines = FALSE, 
  vcov = "HC",
  new_name = "Warmth Pacific (sd)"
)


mod_warmth_pacific
saveRDS(mod_warmth_pacific, here::here(push_mods, "mod_warmth_pacific"))

# refugees
mod_warmth_refugees  <- double_robust(
  df = dt_warmth,  # note change
  Y = "t2_warm_refugees_z",
  X = X,
  baseline_vars = baseline_vars_warmth,
  treat_1 = treat_1,
  treat_0 = treat_0,
  estimand = estimand,
  scale = "RD",
  nsims = nsims,
  cores = cores,
  family = "gaussian",
  weights = TRUE,
  continuous_X = FALSE,
  splines = FALSE, 
  vcov = "HC",
  new_name = "Warmth Refugees (sd)"
)


mod_warmth_refugees
saveRDS(mod_warmth_refugees, here::here(push_mods, "mod_warmth_refugees"))

# perceived discrimination
mod_warmth_per_rel_discrimination  <- double_robust(
  df = dt_warmth,  # note change
  Y = "t2_religion_perceive_religious_discrim_z",
  X = X,
  baseline_vars = baseline_vars_warmth,
  treat_1 = treat_1,
  treat_0 = treat_0,
  estimand = estimand,
  scale = "RD",
  nsims = nsims,
  cores = cores,
  family = "gaussian",
  weights = TRUE,
  continuous_X = FALSE,
  splines = FALSE, 
  vcov = "HC",
  new_name = "Perceived Religious Discrimination (sd)"
)

mod_warmth_per_rel_discrimination
saveRDS(mod_warmth_per_rel_discrimination, here::here(push_mods, "mod_warmth_per_rel_discrimination"))

mod_warmth_asians<- readRDS(here::here(push_mods, "mod_warmth_asians"))
mod_warmth_chinese <- readRDS(here::here(push_mods, "mod_warmth_chinese"))
mod_warmth_immigrants<- readRDS(here::here(push_mods, "mod_warmth_immigrants"))
mod_warmth_indians<- readRDS(here::here(push_mods, "mod_warmth_indians"))
mod_warmth_elderly<- readRDS(here::here(push_mods, "mod_warmth_elderly"))
mod_warmth_maori<- readRDS(here::here(push_mods, "mod_warmth_maori"))
mod_warmth_mental<- readRDS(here::here(push_mods, "mod_warmth_mental"))
mod_warmth_muslims<- readRDS(here::here(push_mods, "mod_warmth_muslims"))
mod_warmth_nzeuro<- readRDS(here::here(push_mods, "mod_warmth_nzeuro"))
mod_warmth_overweight<- readRDS(here::here(push_mods, "mod_warmth_overweight"))
mod_warmth_pacific<- readRDS(here::here(push_mods, "mod_warmth_pacific"))
mod_warmth_refugees<- readRDS(here::here(push_mods, "mod_warmth_refugees"))
mod_warmth_per_rel_discrimination<- readRDS(here::here(push_mods, "mod_warmth_per_rel_discrimination"))


tab_warmth <- rbind(
mod_warmth_asians,
mod_warmth_chinese,
mod_warmth_immigrants,
mod_warmth_indians,
mod_warmth_elderly,
mod_warmth_maori,
mod_warmth_mental,
mod_warmth_muslims,
mod_warmth_nzeuro,
mod_warmth_overweight,
mod_warmth_pacific,
mod_warmth_refugees,
mod_warmth_per_rel_discrimination   
)

tab_warmth


group_tab_warmth <- group_tab(tab_warmth, type = "RD")

group_tab_warmth

saveRDS(group_tab_warmth, here::here(push_mods, "group_tab_warmth"))
group_tab_warmth <- readRDS( here::here(push_mods, "group_tab_warmth"))

group_plot_ate_warmth <- margot_plot(
  group_tab_warmth,
  type = "RD",
  title = "ATE: causal contrast:zero to weekly church attendance", 
  subtitle = "Warmth to others and perceived religious prejudice",
  xlab = "(sd units)",
  ylab = "test",
  estimate_scale = 1,
  base_size = 11,
  text_size = 3,
  point_size = .5,
  title_size = 12,
  subtitle_size = 11,
  legend_text_size = 8,
  legend_title_size = 10,
  x_offset = -.5,
  x_lim_lo = -.5,
  x_lim_hi = .5
)
group_plot_ate_warmth


ggsave(
  group_plot_ate_warmth,
  path = here::here(here::here(push_mods, "group_plot_ate_warmth")),
  width = 8,
  height = 4,
  units = "in",
  filename = "group_plot_ate_warmth.png",
  device = 'png',
  limitsize = FALSE,
  dpi = 600
)


```



```{r}
#|label: models-support

# read data
mice_support_mids <- readRDS(here::here(push_mods, "mice_support_mids"))

# longform data for getting names and datachecks
mice_support_long <- readRDS(here::here(push_mods, "mice_support_long"))

# check
skim(mice_support_long)

# set exposure 
X <- "t1_religion_church_coarsen"

# create baseline variables
baseline_vars_support = mice_support_long |> 
  dplyr::select(starts_with("t0"))|> colnames() # strange to include these -- as they  are income by other names

# view
baseline_vars_support

# look at outcomes
outcome_vars_support = mice_support_long |> dplyr::select(starts_with("t2")) |> colnames()

# outcomes vars
outcome_vars_support

# set estimand
estimand = "ATE"

# ebalance matching
mice_support_ebal <- match_mi_general(data = mice_support_mids, 
                                 X = X, 
                                 baseline_vars = baseline_vars_support, 
                                 estimand = estimand,  
                                # focal = "zero",
                                 method = "ebal", 
                                 sample_weights = "sample_weights")
saveRDS(mice_support_ebal, here::here(push_mods, "mice_support_ebal"))

# read if needed
#mice_support_ebal <- readRDS(here::here(push_mods, "mice_support_ebal"))

# summary
sum_ebal <- summary(mice_support_ebal)

# view
sum_ebal

# graphs
plot(sum_ebal)
bal.tab(mice_support_ebal)

# trim if needed
mice_trim_ebal_support <- WeightIt::trim(mice_support_ebal, at = .99)
sum_trim_ebal <- summary(mice_trim_ebal_support)

# view
sum_trim_ebal

# graphs
plot(sum_trim_ebal)
bal.tab(mice_trim_ebal_support,stats = c("m", "ks"), abs = TRUE)
love.plot(mice_trim_ebal_support, binary = "std", thresholds = c(m = .1))

# settings 

# dataframe
dt_support = mice_trim_ebal_support

# cores
cl =  parallel::detectCores () 
cores =  parallel::detectCores () 

#levels(dat_long_t$religion_church_coarsen)
nsims = 1000

#check
treat_0 = "zero"
#check
treat_1 = "four_up" 

# view X 
X

## models

## family time rr
mod_support_family_time_binary_rr  <- double_robust(
  df = dt_support,  # note change
  Y = "t2_family_time_binary",
  X = X,
  baseline_vars = baseline_vars_support,  ## always check
  treat_1 = treat_1,
  treat_0 = treat_0,
  estimand = estimand,
  scale = "RR",
  nsims = nsims,
  cores = cores,
  family = "poisson",
  weights = TRUE,
  continuous_X = FALSE,
  splines = FALSE, 
  vcov = "HC",
  new_name = "Family time (y/n)"
)


mod_support_family_time_binary_rr
saveRDS(mod_support_family_time_binary_rr, here::here(push_mods, "mod_support_family_time_binary_rr"))



# friends time rr
mod_support_friends_time_binary_rr  <- double_robust(
  df = dt_support,  # note change
  Y = "t2_friends_time_binary",
  X = X,
  baseline_vars = baseline_vars_support,  ## always check
  treat_1 = treat_1,
  treat_0 = treat_0,
  estimand = estimand,
  scale = "RR",
  nsims = nsims,
  cores = cores,
  family = "poisson",
  weights = TRUE,
  continuous_X = FALSE,
  splines = FALSE, 
  vcov = "HC",
  new_name = "Friends time (y/n)"
)

mod_support_friends_time_binary_rr
saveRDS(mod_support_friends_time_binary_rr, here::here(push_mods, "mod_support_friends_time_binary_rr"))

# community time rr/  not converging so use prop scores only
mod_support_community_time_binary_rr  <- double_robust(
  df = dt_support,  # note change
  Y = "t2_community_time_binary",
  X = X,
  baseline_vars = 1, #baseline_vars_support,  ## always check
  treat_1 = treat_1,
  treat_0 = treat_0,
  estimand = estimand,
  scale = "RR",
  nsims = nsims,
  cores = cores,
  family = "poisson",
  weights = TRUE,
  continuous_X = FALSE,
  splines = FALSE, 
  vcov = "HC",
  new_name = "Community time (y/n)"
)

mod_support_community_time_binary_rr
saveRDS(mod_support_community_time_binary_rr, here::here(push_mods, "mod_support_community_time_binary_rr"))


# family money rr
mod_support_family_money_binary_rr  <- double_robust(
  df = dt_support,  # note change
  Y = "t2_family_money_binary",
  X = X,
  baseline_vars = 1, # baseline_vars_support,  ## always check
  treat_1 = treat_1,
  treat_0 = treat_0,
  estimand = estimand,
  scale = "RR",
  nsims = nsims,
  cores = cores,
  family = "poisson",
  weights = TRUE,
  continuous_X = FALSE,
  splines = FALSE, 
  vcov = "HC",
  new_name = "Family money (y/n)"
)

mod_support_family_money_binary_rr
saveRDS(mod_support_family_money_binary_rr, here::here(push_mods, "mod_support_family_money_binary_rr"))


# friends money rr
mod_support_friends_money_binary_rr  <- double_robust(
  df = dt_support,  # note change
  Y = "t2_friends_money_binary",
  X = X,
  baseline_vars = 1, #baseline_vars_support,  ## always check
  treat_1 = treat_1,
  treat_0 = treat_0,
  estimand = estimand,
  scale = "RR",
  nsims = nsims,
  cores = cores,
  family = "poisson",
  weights = TRUE,
  continuous_X = FALSE,
  splines = FALSE, 
  vcov = "HC",
  new_name = "Friends money (y/n)"
)

mod_support_friends_money_binary_rr
saveRDS(mod_support_friends_money_binary_rr, here::here(push_mods, "mod_support_friends_money_binary_rr"))


# comunity money rr
mod_support_community_money_binary_rr  <- double_robust(
  df = dt_support,  # note change
  Y = "t2_community_money_binary",
  X = X,
  baseline_vars = 1,# baseline_vars_support,  ## always check
  treat_1 = treat_1,
  treat_0 = treat_0,
  estimand = estimand,
  scale = "RR",
  nsims = nsims,
  cores = cores,
  family = "poisson",
  weights = TRUE,
  continuous_X = FALSE,
  splines = FALSE, 
  vcov = "HC",
  new_name = "Community money (y/n)"
)

mod_support_community_money_binary_rr
saveRDS(mod_support_community_money_binary_rr, here::here(push_mods, "mod_support_community_money_binary_rr"))

### support continuous 
mod_donate_support <- double_robust(
  df = dt_support, 
  Y = "t2_support_z",
  X = X,
  baseline_vars = baseline_vars_support,
  treat_1 = treat_1,
  treat_0 = treat_0,
  estimand = estimand,
  scale = "RD",
  nsims = nsims,
  cores = cores,
  family = "gaussian",
  weights = TRUE,
  continuous_X = FALSE,
  splines = FALSE,
  vcov = "HC",
  new_name = "Social Support (sd)"
)

mod_donate_support
saveRDS(mod_donate_support, here::here(push_mods, "mod_donate_support"))

mod_donate_support <- readRDS( here::here(push_mods, "mod_donate_support"))
mod_support_family_time_binary_rr <- readRDS( here::here(push_mods, "mod_support_family_time_binary_rr"))
mod_support_friends_time_binary_rr <- readRDS( here::here(push_mods, "mod_support_friends_time_binary_rr"))
mod_support_community_time_binary_rr <- readRDS( here::here(push_mods, "mod_support_community_time_binary_rr"))

mod_support_family_money_binary_rr <- readRDS( here::here(push_mods, "mod_support_family_money_binary_rr"))
mod_support_friends_money_binary_rr <- readRDS( here::here(push_mods, "mod_support_friends_money_binary_rr"))
mod_support_community_money_binary_rr <- readRDS( here::here(push_mods, "mod_support_community_money_binary_rr"))


# table
tab_support_rd <- rbind(
  mod_donate_support
)

tab_support_rr <- rbind(
  mod_support_family_time_binary_rr,
  mod_support_friends_time_binary_rr,
  mod_support_community_time_binary_rr,
  mod_support_family_money_binary_rr,
  mod_support_friends_money_binary_rr,
  mod_support_community_money_binary_rr
)

mod_support_family_time_binary_rr
mod_support_friends_time_binary_rr
# view
tab_support_rd

# view rr
tab_support_rr

# make group table
group_tab_support_rd <- group_tab(tab_support_rd, type = "RD")
group_tab_support_rr <- group_tab(tab_support_rr, type = "RR")


# view
group_tab_support_rd
group_tab_support_rr

# save table
saveRDS(group_tab_support_rd, here::here(push_mods, "group_tab_support_rd"))



group_plot_ate_support_rd <- margot_plot(
  group_tab_support_rd,
  type = "RD",
  title = "ATE: causal contrast:zero to weekly church attendance", 
  subtitle = "Support: family gives time in last week",
  xlab = "(sd units)",
  ylab = "test",
  estimate_scale = 1,
  base_size = 11,
  text_size = 3,
  point_size = .5,
  title_size = 12,
  subtitle_size = 11,
  legend_text_size = 8,
  legend_title_size = 10,
  x_offset = -.4,
  x_lim_lo = -.4,
  x_lim_hi = .5
)
group_plot_ate_support_rd

ggsave(
  group_plot_ate_support_rd,
  path = here::here(here::here(push_mods, "group_plot_ate_support_rd")),
  width = 8,
  height = 4,
  units = "in",
  filename = "group_plot_ate_warmth.png",
  device = 'png',
  limitsize = FALSE,
  dpi = 600
)

# 
# 
# margot_plot <- function(.data,
#                         type = c("RD", "RR"),
#                         title,
#                         subtitle,
#                         xlab,
#                         ylab,
#                         estimate_scale = 1,
#                         base_size = 11,
#                         text_size = 2.75,
#                         point_size = .5,
#                         title_size = 12,
#                         subtitle_size = 11,
#                         legend_text_size = 8,
#                         legend_title_size = 10,
#                         x_offset = ifelse(type == "RR", 0, -.5),
#                         x_lim_lo = ifelse(type == "RR", .1, -.5),
#                         x_lim_hi = ifelse(type == "RR", 2.5, .4)) {
#   type <- match.arg(type)
#   xintercept <- if (type == "RR")
#     1
#   else
#     0
#   x_axis_label <-
#     if (type == "RR")
#       "Causal Risk Ratio"
#   else
#     "Causal Risk Difference"
#   
#   # Define Reliability based on type
#   if (type == "RR") {
#     .data$Reliability <-
#       ifelse(
#         .data$`2.5 %` > 1 & .data$`97.5 %` > 1,
#         "positive",
#         ifelse(
#           .data$`2.5 %` < 1 &
#             .data$`97.5 %` < 1,
#           "negative",
#           "zero_crossing"
#         )
#       )
#   } else {
#     .data$Reliability <-
#       ifelse(
#         .data$`2.5 %` > 0 & .data$`97.5 %` > 0,
#         "positive",
#         ifelse(
#           .data$`2.5 %` < 0 &
#             .data$`97.5 %` < 0,
#           "negative",
#           "zero_crossing"
#         )
#       )
#   }
#   
#   out <- ggplot(
#     data = .data,
#     aes(
#       y = reorder(outcome, .data[[paste0("E[Y(1)]", ifelse(type == "RR", "/", "-"), "E[Y(0)]")]]),
#       x = .data[[paste0("E[Y(1)]", ifelse(type == "RR", "/", "-"), "E[Y(0)]")]],
#       xmin = `2.5 %`,
#       xmax = `97.5 %`,
#       group = Estimate,
#       color = Reliability
#     )
#   ) +
#     geom_errorbarh(aes(color = Reliability),
#                    height = .3,
#                    position = position_dodge(width = 0.3)) +
#     geom_point(size = point_size, position = position_dodge(width = 0.3)) +
#     geom_vline(xintercept = xintercept, linetype = "solid") +
#     theme_classic(base_size = base_size) +
#     scale_color_manual(values = c(
#       "positive" = "dodgerblue",
#       "zero_crossing" = "black",
#       "negative" = "orange"
#     )) +
#     labs(
#       x = x_axis_label,
#       y = " ",
#       title = title,
#       subtitle = subtitle
#     ) +
#     geom_text(
#       aes(x = x_offset * estimate_scale, label = estimate_lab),
#       size = text_size,
#       hjust = 0,
#       fontface = ifelse(.data$Estimate == "unreliable", "plain", "bold")
#     ) +
#     coord_cartesian(xlim = c(x_lim_lo, x_lim_hi)) +
#     theme(
#       legend.position = "top",
#       legend.direction = "horizontal",
#       plot.title = element_text(
#         face = "bold",
#         size = title_size,
#         hjust = 0
#       ),
#       plot.subtitle = element_text(size = subtitle_size, hjust = 0),
#       legend.text = element_text(size = legend_text_size),
#       legend.title = element_text(size = legend_title_size),
#       plot.margin = margin(
#         t = 10,
#         r = 10,
#         b = 10,
#         l = 10,
#         unit = "pt"
#       )
#     )
#   
#   return(out)
# }


group_plot_ate_support_rr <- margot_plot(
  group_tab_support_rr,
  type = "RR",
  title = "ATE: causal contrast:zero to weekly church attendance",
  subtitle = "Help and Money Received",
  xlab = "(sd units)",
  ylab = "test",
  estimate_scale = 1,
  base_size = 11,
  text_size = 3,
  point_size = .5,
  title_size = 12,
  subtitle_size = 11,
  legend_text_size = 8,
  legend_title_size = 10,
  x_offset = -1,
  x_lim_lo = -1,
  x_lim_hi = 2.5
)
group_plot_ate_support_rr


ggsave(
  group_plot_ate_support_rr,
  path = here::here(here::here(push_mods, "group_plot_ate_support_rr")),
  width = 8,
  height = 4,
  units = "in",
  filename = "group_plot_ate_support_rr.png",
  device = 'png',
  limitsize = FALSE,
  dpi = 600
)

 

```


```{r}
#|label: extra-stuff

# 
# margot_plot <- function(.data,
#                         type = c("RD", "RR"),
#                         title,
#                         subtitle,
#                         xlab,
#                         ylab,
#                         estimate_scale = 1,
#                         base_size = 11,
#                         text_size = 2.75,
#                         point_size = .5,
#                         title_size = 12,
#                         subtitle_size = 11,
#                         legend_text_size = 9,
#                         legend_title_size = 10) {  # added argument
#   type <- match.arg(type)
#   
#   xintercept <- if (type == "RR") 1 else 0
#   x_axis_label <- if (type == "RR") "Causal Risk Ratio" else "Causal Risk Difference"
#   
#   x_offset <- ifelse(type == "RR", 0, -.4)
#   x_lim_lo <- ifelse(type == "RR", .1, -.4)
#   x_lim_hi <- ifelse(type == "RR", 2.5, .5)
#   
#   .data$Reliability <- ifelse(.data$`2.5 %` > 0 & .data$`97.5 %` > 0, "positive", 
#                               ifelse(.data$`2.5 %` < 0 & .data$`97.5 %` < 0, "negative", "zero_crossing"))
# 
#   out <- ggplot(
#     data = .data,
#     aes(
#       y = reorder(outcome, .data[[paste0("E[Y(1)]", ifelse(type == "RR", "/", "-"), "E[Y(0)]")]]),
#       x = .data[[paste0("E[Y(1)]", ifelse(type == "RR", "/", "-"), "E[Y(0)]")]],
#       xmin = `2.5 %`,
#       xmax = `97.5 %`,
#       group = Estimate,
#       color = Reliability
#     )
#   ) +
#     geom_errorbarh(aes(color = Reliability), height = .3, position = position_dodge(width = 0.3)) +
#     geom_point(size = point_size, position = position_dodge(width = 0.3)) +
#     geom_vline(xintercept = xintercept, linetype = "solid") +
#     theme_classic(base_size = base_size) +
#     scale_color_manual(values = c("positive" = "dodgerblue", "zero_crossing" = "black", "negative" = "orange")) +
#     labs(x = x_axis_label, y = " ", title = title, subtitle = subtitle) +
#     geom_text(aes(x = x_offset * estimate_scale, label = estimate_lab), size = text_size, hjust = 0, 
#               fontface = ifelse(.data$Estimate == "unreliable", "plain", "bold")) +
#     coord_cartesian(xlim = c(x_lim_lo, x_lim_hi)) +
#     theme(
#       legend.position = "top",
#       legend.direction = "horizontal",
#       plot.title = element_text(face = "bold", size = title_size, hjust = 0),
#       plot.subtitle = element_text(size = subtitle_size, hjust = 0),
#       legend.text = element_text(size = legend_text_size),
#       legend.title = element_text(size = legend_title_size),  # added line
#       plot.margin = margin(t = 10, r = 10, b = 10, l = 10, unit = "pt")
#     )
#   
#   return(out)
#}


# model by hand

# 
# 
# ### Model by hand
# X
# set outcome, e.g.
# Y = "t2_charity_donate_log_z"
# Y = "t2_hours_charity_log_z"
# Y = "t2_volunteers"
# Y = "t2_hours_charity_ord"
# # etc.
# 
# 
# formula_str_A <- paste(X, "~", paste(baseline_vars_health, collapse = "+"))
# formula_str_Y <- paste(Y, "~", X , "*", "(", paste(baseline_vars_donate, collapse = "+"), ")")
# formula_str_Yps <- paste(Y, "~", X , "*", "(", paste(1, collapse = "+"), ")")
# formula_str_Yord <- paste(Y, "~", X , "*", "(", paste(baseline_vars_donate, collapse = "+"), ")")
# 
# # check
# formula_str_Yord
# fits <- lapply(complete(dt_donate, "all"), function(d) {
#   glm(formula_str_Y, data = d,
#       family = gaussian,
#       weights = weights
#      )
# })
# 
# 
# fits <- lapply(complete(dt_donate, "all"), function(d) {
#   glm(formula_str_Y, data = d,
#       family = binomial(link = "log"),
#       weights = weights
#      )
# })
# 
# fits_ps <- lapply(complete(dt_donate, "all"), function(d) {
#   glm(formula_str_Yps, data = d,
#       family = binomial(link = "log"),
#       weights = weights
#      )
# })
# 
# 
# fits_pos <- lapply(complete(dt_donate, "all"), function(d) {
#   glm(formula_str_Yord, data = d,
#       family = poisson,
#       weights = weights
#      )
# })
# 
# 
# pool(fits_pos) |> summary() |> select(term, estimate, std.error)
# 
# #fits <- fits_ps
# fits <- fits_pos
# 
# sim.imp <- misim(fits, n = 100, vcov = "HC")
# 
# sim_estimand <- sim_ame(sim.imp, var = X, cl = cores, verbose = FALSE)
# summary_sim_estimand <- transform(sim_estimand, RR = `E[Y(four_up)]` / `E[Y(zero)]`, 
#                     RD =`E[Y(four_up)]` - `E[Y(zero)]` )
# summary_sim_estimand
# 
# 
# 
# plot(sim_estimand ,  ci = TRUE, level = .95, reference = FALSE, method = "wald")



```

