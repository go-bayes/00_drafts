---
title: "Causal effects of scripture attendance on cooperation"
subtitle: "An outcomewide approach"
abstract: |
  Counterfactual Prediction
author: 
  - name: Joseph A. Bulbulia
    affiliation: Victoria University of Wellington, New Zealand
    orcid_id: 0000-0002-5861-2056
    email: joseph.bulbulia@vuw.ac.nz
    corresponding: yes
  - name: Don E Davis
    affiliation: Georgia State University
    orcid_id: 0000-0003-3169-6576 
  - name: Ken Rice
    affiliation: Georgia State University 
  - name: Geoffrey Troughton
    affiliation: Victoria University of Wellington
  - name: Chris G. Sibley
    affiliation: School of Psychology, University of Auckland
    orcid_id: 0000-0002-4064-8800
execute:
  warning: false
  eval: false
keywords:
  - measurement
date: last-modified
editor_options: 
  chunk_output_type: console
---

```{r}
#| label: load-libraries
#| echo: false
#| include: true
#| eval: true

# NOTES IGNORE STUDY 1 makes no sense

# uncomment and use these links to load your functions
# source("https://raw.githubusercontent.com/go-bayes/templates/main/functions/libs2.R")

# # read functions
# source("https://raw.githubusercontent.com/go-bayes/templates/main/functions/funs.R")


# for latex graphs
# for making graphs
library("tinytex")
library(extrafont)
loadfonts(device = "all")

### ALWAYS RESTART R IN A FRESH SESSION ####

# libraries for jb (when internet is not accessible)
# read libraries
source("/Users/joseph/GIT/templates/functions/libs2.R")

# read functions
source("/Users/joseph/GIT/templates/functions/funs.R")

# experimental functions (more functions)
# source(
#   "https://raw.githubusercontent.com/go-bayes/templates/main/functions/experimental_funs.R"
# )


# read data/ set to path in your computer
pull_path <-
  fs::path_expand(
    "/Users/joseph/v-project\ Dropbox/data/current/nzavs_13_arrow"
  )

# for saving models. # set path fo your computer
push_mods <-  fs::path_expand(
    "/Users/joseph/v-project\ Dropbox/data/nzvs_mods/00drafts/23-ow-coop-scripture"
  )

# read data: note that you need use the arrow package in R
dat <- arrow::read_parquet(pull_path)


# check
# table( is.na(dat$religion_scripture) ) 
# table( is.na( dat$religion_scripture) )

# dat$religion_scripture
# table(dat$alert_level)
# hist(dat$religion_scripture)
# mean(dat$religion_scripture, na.rm = TRUE)
# sd(dat$religion_scripture, na.rm = TRUE)
# 
# ## prop total pop
# dat_pr <- dat |> filter( wave == 2018 & year_measured == 1) |>  filter(!is.na(religion_scripture))
# sum(dat_pr$religion_scripture ==0, na.rm=TRUE)/nrow(dat_pr)
# 
# ## prop religious
# dat_pr_rel <- dat |> filter( wave == 2018 & year_measured == 1 & religious ==1) |>  filter(!is.na(religion_scripture))
# sum(dat_pr_rel$religion_scripture >1, na.rm=TRUE)/nrow(dat_pr_rel)
# sum(dat_pr_rel$religion_scripture==0, na.rm=TRUE)/nrow(dat_pr_rel)
# sum(dat_pr_rel$religion_scripture>=8, na.rm=TRUE)/nrow(dat_pr_rel)
# 
# 
# # ## prop not religious
# dat_pr_rel_not <- dat |> filter( wave == 2018 & year_measured == 1 & religious ==0) |>  filter(!is.na(religion_scripture))
# nrow(dat_pr_rel_not)
# sum(dat_pr_rel_not$religion_scripture >0, na.rm=TRUE)/nrow(dat_pr_rel_not) # 2.3 in 100
# sum(dat_pr_rel_not$religion_scripture>7, na.rm=TRUE)/nrow(dat_pr_rel_not) # 4 in 1000
# sum(dat_pr_rel_not$religion_scripture, na.rm=TRUE)/nrow(dat_pr_rel_not)
# 
# dat_pr_rel_not <- dat |> filter( wave == 2018 & year_measured == 1 & religious ==0) |>  filter(!is.na(religion_scripture))
# nrow(dat_pr_rel_not)
# sum(dat_pr_rel_not$religion_scripture >0, na.rm=TRUE)/nrow(dat_pr_rel_not) # 2.3 in 100
# sum(dat_pr_rel_not$religion_scripture>7, na.rm=TRUE)/nrow(dat_pr_rel_not) # 4 in 1000
# sum(dat_pr_rel_not$religion_scripture, na.rm=TRUE)/nrow(dat_pr_rel_not)
# 
# dat_pr_rel_not <- dat |> filter( wave == 2018 & year_measured == 1 & religious ==0) |>  filter(!is.na(religion_church))
# nrow(dat_pr_rel_not)
# sum(dat_pr_rel_not$religion_church >0, na.rm=TRUE)/nrow(dat_pr_rel_not) # 2.3 in 100
# sum(dat_pr_rel_not$religion_church >7, na.rm=TRUE)/nrow(dat_pr_rel_not) # 4 in 1000
# sum(dat_pr_rel_not$religion_church, na.rm=TRUE)/nrow(dat_pr_rel_not)
# 
# dat_pr_rel_not <- dat |> filter( wave == 2018 & year_measured == 1 & religious ==0) |>  filter(!is.na(religion_scripture))
# nrow(dat_pr_rel_not)
# sum(dat_pr_rel_not$religion_scripture >0, na.rm=TRUE)/nrow(dat_pr_rel_not) # 2.3 in 100
# sum(dat_pr_rel_not$religion_scripture >7, na.rm=TRUE)/nrow(dat_pr_rel_not) # 4 in 1000
# sum(dat_pr_rel_not$religion_church, na.rm=TRUE)/nrow(dat_pr_rel_not)



# test of alert level
# dat |> 
#   filter(wave == 2019 & year_measured == 1) |> 
#   count(alert_level)

# check path:is this correct?  check so you know you are not overwriting other directors
push_mods
```


```{r}
#| label: clean data
#| echo: false
#| include: false
#| eval: false

# note that religion church NA we impute zero to those who are not religious in the "religion_church" variable

# check here
# table(is.na( dat$religion_church)) 
# table(is.na( dat$religion_church)) 

# Note: read this: # create dataframes, one for each level of the factor.  This allows valid multiple imputation see: 
# https://bmcmedresmethodol.biomedcentral.com/articles/10.1186/s12874-023-01843-6


# select variables and emulate a target trial according to eligibility criteria
# you may need to select different confounders. note that the more you include, the less efficient the estimates,
# particularly if the confounder is only associated with the exposure.  On the other hand, better to err on the side of caution 

# alert_level_combined
# 

#2 * sd( dat$total_siblings, na.rm=TRUE ) + mean(dat$total_siblings, na.rm=TRUE )

dat_long <- dat |>
  arrange(id, wave) |>
  mutate(urban = factor(
    ifelse(
      rural_gch2018 == "Medium Urban Accessibility" |
        # Define urban condition
        rural_gch2018 == "High Urban Accessibility",
      "urban",
      # Label 'urban' if condition is met
      "rural"  # Label 'rural' if condition is not met
    )
  )) |>
  # select variables
  # mutate(across(where(is.double), as.numeric)) |>
  mutate(male = as.numeric(male) - 1) |>
  mutate(total_siblings_factor = ordered(round(ifelse(total_siblings > 7, 7, total_siblings), 0))) |> 
  rename(religion_religious = religious) |>  # religious yes/no
  mutate(religion_prayer_binary = ifelse(religion_prayer > 0, 1, 0)) |>
  mutate(religion_church_binary = ifelse(religion_church > 0, 1, 0)) |>
  mutate(religion_scripture_binary = ifelse(religion_scripture > 0, 1, 0)) |>
  mutate(religion_religious = as.numeric(religion_religious) - 1) |>
  dplyr::select(
    "wave",
    "year_measured",
    "id",
    # "edu",
    "sample_origin_names_combined",
    "alert_level_combined_lead",
    "bigger_doms", # not religious, anglican, buddhist, catholic, christian NFD, christian others, hindu, jewish, Muslim, Pres, others
    # Sample origin names combined
    #"alert_level_combined_lead",  not needed because all receive all levels by the point the outcome is measured
    # covid alert levels -> 2019-2020
    "education_level_coarsen",
    # Ordinal-Rank 0-10 NZREG codes (with overseas school quals coded as Level 3, and all other ancillary categories coded as missing)  Combined highschool levels See:https://www.nzqa.govt.nz/assets/Studying-in-NZ/New-Zealand-Qualification-Framework/requirements-nzqf.pdf
    "male",
    # 0 = female, 0.5 = neither female nor male, 1 = male.
    "age",
    "born_nz",
    "hlth_disability",
    "hlth_bmi", # bmi
    # value label 0    No 1   Yes
    "eth_cat",
    #factor(EthCat, labels = c("Euro", "Maori", "Pacific", "Asian")),
    "employed",
    # Are you currently employed? (this includes self-employment or casual work)
    # "gen_cohort",
    "household_inc",
    # Please estimate your total household income (before tax) for the last year.
    "nz_dep2018",
    # see nzavs materials
    "nzsei13",
    # see nzavs materials
    "partner",
    # 0 = no, 1 = yes
    "parent",
    # 0 = no, 1 = yes
    "pol_orient",
    #Please rate how politically liberal versus conservative you see yourself as being.
    "pol_wing",
    # Please rate how politically left-wing versus right-wing you see yourself as being.
    "urban",
    # see NZAVS,
    "have_siblings", #Do you have siblings?
    "total_siblings_factor",# sum siblings up to seven
    "number_sisters_older", #How many older sisters do you have?   
    "number_sisters_younger", #	How many younger sisters do you have? 
    "number_brothers_older",#	How many older brothers do you have?
    "number_brothers_younger", #	How many older brothers do you have?
    "children_num", # How many children have you given birth to, fathered, or adopted?
    "hours_children", #Hours - Looking after children
    "hours_work",#Hours - Working in paid employment
    "hours_housework", # Hours - Housework/cooking
    "agreeableness",
    "religion_church_binary",
    "religion_prayer_binary",
    "religion_scripture_binary",
    # Mini-IPIP6 Agreeableness (also modelled as empathy facet)
    # Sympathize with others' feelings.
    # Am not interested in other people's problems.
    # Feel others' emotions.
    # Am not really interested in others.
    "conscientiousness",
    # see mini ipip6
    # Get chores done right away.
    # Like order.
    # Make a mess of things.
    # Often forget to put things back in their proper place.
    "extraversion",
    # Mini-IPIP6 Extraversion
    # Am the life of the party.
    # Don't talk a lot.
    # Keep in the background.
    # Talk to a lot of different people at parties.
    "honesty_humility",
    # see mini ipip6
    # Would like to be seen driving around in a very expensive car.
    # Would get a lot of pleasure from owning expensive luxury goods.
    # Feel entitled to more of everything.
    # Deserve more things in life.
    "openness",
    # see mini ipip6
    # Have a vivid imagination.
    # Have difficulty understanding abstract ideas.
    # Do not have a good imagination.
    # Am not interested in abstract ideas.
    "neuroticism",
    # see mini ipip6
    # Have frequent mood swings.
    # Am relaxed most of the time.
    # Get upset easily.
    # Seldom feel blue.
    "modesty",
    # see mini ipip6
    # I want people to know that I am an important person of high status,
    # I am an ordinary person who is no better than others.
    # I wouldn’t want people to treat me as though I were superior to them.
    # I think that I am entitled to more respect than the average person is
    # "sdo",
    # "rwa",
    # "brk_relationship",
    # "began_relationship",
    # "religion_religious",
    # Do you identify with a religion and/or spiritual group?
    "religion_identification_level",
    #How important is your religion to how you see yourself?"
    "religion_church_binary",
    "religion_church",
    "religion_prayer",
    "religion_scripture",
    # How many times did you pray in the last week?
    "religion_scripture",
    # How many times did you read religious scripture in the last week?
    "religion_church",
    # How many times did you attend a church or place of worship in the last month?
    "religion_believe_spirit",
    #Do you believe in some form of spirit or lifeforce?
    "religion_believe_god",
    #Do you believe in a God
    "religion_spiritual_identification",
    #w8,w10,w12-13 "I identify as a spiritual person."
    "religion_perceive_religious_discrim",
    #	I feel that I am often discriminated against because of my religious/spiritual beliefs.
    # "bigger_doms", #What religion or spiritual group?#  Not_Rel, Anglican , Buddist, Catholic , Christian_nfd, Christian_Others, Hindu, Jewish           Muslim, PresbyCongReform, TheOthers
    "w_gend_age_euro",
    # sample_weights.
    # Sometimes I can't sleep because of thinking about past wrongs I have suffered.//# I can usually forgive and forget when someone does me wrong.# I find myself regularly thinking about past times that I have been wronged.
    "gratitude",
    ## I have much in my life to be thankful for. # When I look at the world, I don’t see much to be grateful for. # I am grateful to a wide variety of peopl
    "modesty",
    # see above
    "vengeful_rumin",
    "charity_donate",
    #How much money have you donated to charity in the last year?
    "hours_charity",
    #,#Hours spent in activities/Hours spent … voluntary/charitable work
    "warm_asians",
    "warm_chinese",
    #"warm_disabled" ,  missing at time 0
    # begins w9
    "warm_immigrants",
    "warm_indians",
    "warm_elderly",
    # warm_lgbtq starts w12
    "warm_maori",
    "warm_mental_illness",
    "warm_muslims",
    "warm_nz_euro",
    "warm_overweight",
    "warm_pacific",
    "warm_refugees",
    "religion_religious",
    "religion_perceive_religious_discrim",
    # "issue_same_sex_marriage", not in range
     "support", # three items as below
    "support_help",
    # 'There are people I can depend on to help me if I really need it.
    "support_turnto",
    # There is no one I can turn to for guidance in times of stress.
    "support_rnoguidance",
   #  There is no one I can turn to for guidance in times of stress.
    "family_time",
    "friends_time",
    "community_time",
    "family_money",
    "friends_money",
    "community_money",
    #Please estimate how much help you have received from the following sources in the last week?
    # Received help and support - hours
    # family
    # friends
    # others in my community
    # Received help and support - money
    # family
    # friends
    # others in my community
  )|> 
  dplyr::rename(sample_weights = w_gend_age_euro) |>
  dplyr::mutate(sample_origin = sample_origin_names_combined) |>  #shorter name
  dplyr::filter((wave == 2018 & year_measured  == 1) |
                  (wave == 2019  &
                     year_measured  == 1) |
                  (wave == 2020)) |>  # Eligibility criteria  Observed in 2018/2019 & Outcomes in 2020 or 2021
  group_by(id) |>
  dplyr::mutate(k_18 =  ifelse(wave == 2018 &
                                 !is.na(religion_scripture_binary) & !is.na(bigger_doms), 1, 0)) |>   # creating an indicator for the first wave
  dplyr::mutate(h_18 = mean(k_18, na.rm = TRUE)) |>   # Hack
  dplyr::mutate(k_19 =  ifelse(
    wave == 2019 &
      year_measured == 1 &
      !is.na(religion_scripture_binary),
    1,
    0)) |>   # creating an indicator for the first wave; note that we allow people t
  dplyr::mutate(h_19 = mean(k_19, na.rm = TRUE)) |>  # Hack
  dplyr::filter(h_18 > 0) |>  # hack to enable repeat of baseline
  dplyr::filter(h_19 > 0) |>  # hack to enable repeat of baseline
  dplyr::ungroup() |> 
  dplyr::mutate(
    friends_money = ifelse(friends_money < 0, 0, friends_money), # someone gave neg number
    household_inc_log = log(household_inc + 1),
    hours_children_log = log(hours_children + 1),
    hours_work_log = log(hours_work + 1),
    hours_housework_log = log(hours_housework + 1),
  ) |> 
  droplevels() |>
  select(-c("h_19", "k_19", "h_18", "k_18")) |>
  data.frame()
# check

table( dat_long$religion_scripture_binary )


#here_save(dat_long, "dat_long")
# Why we did the conversions -- zero inflation
## NOTE we ultimatedly opted for binary variables because the data do not clearly fit a useable distribution
# table(round( log(dat_long$family_money+1), 0))
# table(round( log(dat_long$friends_money+1), 0))
# table(round( log(dat_long$community_money+1),0))
# 
# ## Why we did the conversions -- zero inflation
# table(round( log(dat_long$family_time+1), 0))
# table(round( log(dat_long$friends_time+1), 0))
# table(round( log(dat_long$community_time+1),0))
# 
# 
# table(round( (dat_long$family_time), 0))
# table(round( (dat_long$friends_time), 0))
# table(round( (dat_long$community_time),0))
# 
# hist(log(dat_long$family_time+1))
# hist(log(dat_long$friends_time+1))
# hist(log(dat_long$community_time+1))
# 
# table(round( log(dat_long$family_money+1), 0))
# table(round( log(dat_long$friends_money+1), 0))
# table(round( log(dat_long$community_money+1),0))
# 
# # try neg binomial
# dt_test <- dat_long |> 
#   filter(wave == 2018) 
# dat_long$religion_religious
# 
# table1::table1(data = dt_test, ~ total_siblings | religion_religious)
# 
# min( dat_long$family_money, na.rm=TRUE)
# 
# 
# m_fam_ps <- glm(family_money ~ religion_church_binary2, data = dt_test, family = poisson)
# m_frm_ps <- glm(friends_money ~ religion_church_binary2, data = dt_test, family = poisson)
# m_com_ps <- glm(community_money ~ religion_church_binary2, data = dt_test, family = poisson)
# 
# m_fam_time_ps <- glm(family_time ~ religion_church_binary2, data = dt_test, family = poisson)
# m_frm_time_ps <- glm(friends_time ~ religion_church_binary2, data = dt_test, family = poisson)
# m_com_time_ps <- glm(community_time ~ religion_church_binary2, data = dt_test, family = poisson)
# 
# m_vol_ps <- glm(hours_charity ~ religion_church_binary2, data = dt_test, family = poisson)
# summary(m_vol_ps)
# 
# ## summary of poisson models.
# summary(m_fam_ps)
# summary(m_frm_ps)
# summary(m_com_ps)
# summary(m_fam_time_ps)
# summary(m_frm_time_ps)
#summary(m_com_time_ps)

```

```{r}
#| label: prepare-data
# prepare on basis of positivity chack
dat_long_t  <- dat_long %>%
  # mutate(
  #   hours_work_coarsen = cut(
  #     hours_work,
  #     breaks = c( 10, 30, 41, Inf),
  #     labels = c("[10_30)", "[30_41)", "[41_up]"),
  #     include.lowest = TRUE,
  #     right = FALSE,
  #     ordered = TRUE
  #   )
  # )  |> 
  droplevels() |> 
  arrange(id, wave) |> 
  data.frame()

# check n again
n_unique(dat_long_t$id)

# double check path
push_mods

# only look at vars at baseline
dat_18 <- dat_long_t |> 
  dplyr::filter(wave == 2018)

# save data for table
saveRDS(dat_18, here::here(push_mods, "dat_18"))

# prepare data for modelling
# get unique identifiers of these individuals (replace `id` with your actual id variable)
#religious_ids <- dt_18_religious$id

#  select data of these individuals from the entire dataset
# also create meaningful exposure variable

dat_long_t  <- dat_long %>%
#  filter(id %in% religious_ids) %>%   only if subsetting religious ids 
  mutate(
    religion_scripture_coarsen = cut(
      religion_scripture,
      breaks = c(-Inf, 0, 1, 6.99, Inf),
      labels = c("zero", "one", "less_seven", "seven_up"),
      include.lowest = TRUE,
      ordered = TRUE,
      right = TRUE
    )
  ) %>%
  mutate(
    religion_scripture_coarsen_n = as.numeric(religion_scripture_coarsen) - 1,
    religion_scripture_binary_n = as.numeric(religion_scripture_binary)
  ) |>
  mutate(
    religion_scripture_binary = as.factor(religion_scripture_binary),
    eth_cat = as.integer(eth_cat),
    urban = as.numeric(urban),
    education_level_coarsen = as.integer(education_level_coarsen)
  ) |>
  droplevels() |>
  arrange(id, wave) |>
  data.frame()
# check n again
n_unique(dat_long_t$id) #33174
# double check path
push_mods
saveRDS(dat_long_t, here::here(push_mods, "dat_long_t"))
```
```{r}
#|label: data-wrangling-for-imputations
# Create wide data frame
baseline_vars = c(
    "male",
    "age",
    "education_level_coarsen", # factors
    "eth_cat", #factor(EthCat, labels = c("Euro", "Maori", "Pacific", "Asian")),
   # "employed", # Are you currently employed? (this includes self-employment or casual work)
    #"gen_cohort", #age
    "bigger_doms",
    "nz_dep2018",
    "nzsei13",
    "have_siblings",# added: needed because we are dealing with family giving/receiving
    "born_nz",  # added 
    "hlth_disability",  # added 
     "hlth_bmi",
    "household_inc_log", # added: measured with error but OK for imputations
    "partner",
   # "parent",  # newly changed - have information in child number
    "pol_orient", #Please rate how politically liberal versus conservative you see yourself as being.
    "pol_wing", # Please rate how politically left-wing versus right-wing you see yourself as being.
    "sample_origin",    # Sample origin names combined
    "urban",
    "children_num",
    "household_inc_log", # new from previous study. needed because we are dealing with family giving/receiving
    "hours_children_log", # new
    "hours_work_log", # new
    "hours_housework_log", #new
    "agreeableness", 
    "conscientiousness",
    "extraversion",
    "honesty_humility",
    "openness",
    "neuroticism",
    "modesty", # I want people to know that I am an important person of high status, I am an ordinary person who is no better than others. , I wouldn’t want people to treat me as though I were superior to them. I think that I am entitled to more respect than the average person is.
   # "religion_religious", # Do you identify with a religion and/or spiritual group?
   # "religion_identification_level", #How important is your religion to how you see yourself?"  # note this is not a great measure of virtue, virtue is a mean between extremes.
   "religion_scripture_coarsen", # for prediction
    # "religion_religious", # perfectly colinear
   "religion_spiritual_identification",   
   "religion_identification_level",
   "religion_church_binary",
   "religion_prayer_binary",
  # "religion_scripture",
   "religion_scripture_binary",
   "religion_believe_god",
   "religion_believe_spirit",
    "sample_weights",
  "alert_level_combined_lead" # lead to make it 2019
)
# check
baseline_vars


# set exposure variable, can be both the continuous and the coarsened, if needed
exposure_var = c("religion_scripture_binary") 

# set outcomes for prosocial domain
outcome_vars_donate = c(
   "modesty",
   "honesty_humility",
   "vengeful_rumin",
   "gratitude",
   "hours_charity",
   "charity_donate"
  )


# set outcome for the acceptance domain 
outcome_vars_warmth = c(
    "warm_asians",
    "warm_chinese",
   # "warm_disabled" , not at time 10
    # begins w9
    "warm_immigrants",
    "warm_indians",
    "warm_elderly",
    # warm_lgbtq starts w12
    "warm_maori",
    "warm_mental_illness",
    "warm_muslims",
    "warm_nz_euro",
    "warm_overweight",
    "warm_pacific",
    "warm_refugees",
    "religion_perceive_religious_discrim"
  )

# set outcomes for the report received domain
outcome_vars_support = c(
    "family_time",
    "friends_time",
    "community_time",
    "family_money",
    "friends_money",
    "community_money",
    "support_help",
    # 'There are people I can depend on to help me if I really need it.
    "support_turnto",
    # There is no one I can turn to for guidance in times of stress.
    "support_rnoguidance"
    #There is no one I can turn to for guidance in times of stress.
)

prep_donate <- margot_wide(dat_long_t, 
  baseline_vars = baseline_vars, 
  exposure_var = exposure_var,
  outcome_vars = outcome_vars_donate)

#check must be a dataframe
str(prep_donate)
nrow(prep_donate)

prep_warmth <- margot_wide(dat_long_t, 
  baseline_vars = baseline_vars, 
  exposure_var = exposure_var,
  outcome_vars = outcome_vars_warmth)

#check must be a dataframe
str(prep_warmth)
nrow(prep_warmth)


prep_support <- margot_wide(dat_long_t, 
  baseline_vars = baseline_vars, 
  exposure_var = exposure_var,
  outcome_vars = outcome_vars_support)

#check must be a dataframe
str(prep_support)
nrow(prep_support)


## data for mice
exposure_vars = c("t1_religion_scripture_binary")

here_save(exposure_vars , "exposure_vars" )

prep_multiple_donate <- margot_filter(prep_donate, exposure_vars = exposure_vars) 
prep_multiple_warmth <- margot_filter(prep_warmth, exposure_vars = exposure_vars) 
prep_multiple_support <- margot_filter(prep_support, exposure_vars = exposure_vars) 

#test 
# a <- nrow( prep_multiple_support$zero)
# b <- nrow( prep_multiple_support$one)
# c <- nrow( prep_multiple_support$less_four)
# d <-nrow( prep_multiple_support$four_up)
# 
# 
# # check
# a + b + c + d == nrow(prep_support)
```


```{r}
#| label: imputations-donate
#| echo: false
#| include: false
#| eval: false

naniar::vis_miss(prep_donate, warn_large_data = FALSE)

# check for collinear vars
mice:::find.collinear(prep_donate)

push_mods
# impute
mice_donate <- impute_and_combine(prep_multiple_donate, m = 10)

#check
push_mods

# save imputed data
saveRDS(mice_donate,
        here::here(push_mods, "mice_donate"))

# read if needed
mice_donate <- readRDS(here::here(push_mods, "mice_donate"))

# complete
mice_donate_c  <- mice::complete(mice_donate, action = 'long', include = TRUE)

# spit an shine
mice_donate_c <-mice_donate_c |> select(-c(.id.1, .imp.1))

# check data
#skimr::skim(mice_donate_c)

# prepare: spit and shine
row.names(mice_donate_c) <- NULL

# note that poisson models for rates inference await development.  Evalues are invalid, and se estimates are invalid.
# we keep the code here for that day
# poisson models do work for binary data though.

mice_donate_mids <- mice_donate_c %>%
  arrange(.imp, id) |> 
  rename(sample_weights = t0_sample_weights) |> 
  mutate(t0_eth_cat = as.factor(t0_eth_cat),
        t0_education_level_coarsen = as.factor(t0_education_level_coarsen),
        t0_hours_charity_log =   log(t0_hours_charity+1),# to improve model convergence
        t2_hours_charity_log =   log(t2_hours_charity+1),# to improve model convergence
        t0_charity_donate_log =  log(t0_charity_donate+1), # to improve model convergence
        t2_charity_donate_log =   log(t2_charity_donate+1),# to improve model convergence
        t2_volunteers = as.integer(ifelse(t2_hours_charity > 0,1,0)),
        t2_hours_charity_ord = as.integer(round(t2_hours_charity,0)), 
        t2_charity_donate_ord = as.integer(round(t2_charity_donate,0))) |> 
  select(-t0_hours_charity, -t0_charity_donate) %>%
  dplyr::group_by(.imp) |>
  rowwise() |>
  dplyr::ungroup() |> 
  dplyr::mutate(across(where(is.numeric) & !sample_weights & !t2_volunteers, ~ scale(.x), .names = "{col}_z")) %>%
  select(-c(.imp_z, .id_z)) %>%
   select(
    where(is.factor),
    sample_weights,
    t2_hours_charity_log,
    t2_charity_donate_log,
    t2_volunteers,
    t2_hours_charity_ord,
    t2_charity_donate_ord,
    ends_with("_z"),
    .imp,
    .id
  ) |> 
  relocate(id, .before = sample_weights)  %>%
  relocate(sample_weights, .before = starts_with("t1_"))  %>%
  relocate(starts_with("t0_"), .before = starts_with("t1_"))  %>%
  relocate(starts_with("t2_"), .after = starts_with("t1_"))  %>%
  mutate_if(is.matrix, as.vector) %>%
  droplevels() |> 
  as.mids()
  
# need long for getting var names and such
mice_donate_long <- mice::complete(mice_donate_mids, "long", inc = TRUE)

# checks
skim(mice_donate_long)


# save
saveRDS(mice_donate_mids, here::here(push_mods, "mice_donate_mids"))
saveRDS(mice_donate_long, here::here(push_mods, "mice_donate_long"))
```
```{r}
#| label: imputations-warmth
#| echo: false
#| include: false
#| eval: false

naniar::vis_miss(prep_warmth, warn_large_data = FALSE)

# check for collinear vars
mice:::find.collinear(prep_warmth)

# impute
mice_warmth <- impute_and_combine(prep_multiple_warmth, m = 10)

# check
push_mods

# save imputed data
saveRDS(mice_warmth,
        here::here(push_mods, "mice_warmth"))

# read (if needed)
#mice_warmth <- readRDS(here::here(push_mods, "mice_warmth"))

#spit and shine
mice_warmth_c  <- mice::complete(mice_warmth, action = 'long', include = TRUE)

#spit and shine
mice_warmth_c <-mice_warmth_c |> select(-c(.id.1, .imp.1))

# check data
#skimr::skim(mice_warmth_c)

# #spit and shine
row.names(mice_warmth_c) <- NULL

# post-impute data wrangling
mice_warmth_mids <- mice_warmth_c %>%
  arrange(.imp, id) |> 
  rename(sample_weights = t0_sample_weights) |> 
mutate(t0_eth_cat = as.factor(t0_eth_cat),
        t0_education_level_coarsen = as.factor(t0_education_level_coarsen)
         )|>
  dplyr::group_by(.imp) |>
  rowwise() |>
  dplyr::ungroup() |> 
  dplyr::mutate(across(where(is.numeric) & !sample_weights, ~ scale(.x), .names = "{col}_z")) |>
  select(-c(.imp_z, .id_z)) %>%
   select(
    where(is.factor),
    sample_weights,
    ends_with("_z"),
    .imp,
    .id
  ) |> 
  relocate(id, .before = sample_weights)  %>%
  relocate(sample_weights, .before = starts_with("t1_"))  %>%
  relocate(starts_with("t0_"), .before = starts_with("t1_"))  %>%
  relocate(starts_with("t2_"), .after = starts_with("t1_"))  %>%
  mutate_if(is.matrix, as.vector) %>%
  droplevels() |> 
  as.mids()
  
# needed for getting var names and checks
mice_warmth_long <- mice::complete(mice_warmth_mids, "long", inc = TRUE)

# save
saveRDS(mice_warmth_mids, here::here(push_mods, "mice_warmth_mids"))
saveRDS(mice_warmth_long, here::here(push_mods, "mice_warmth_long"))
```
```{r}
#| label: imputations-support
#| echo: false
#| include: false
#| eval: false

naniar::vis_miss(prep_support, warn_large_data = FALSE)
#dev.off()

# check for collinear vars
mice:::find.collinear(prep_support)

# impute
mice_support <- impute_and_combine(prep_multiple_support, m = 10)

# check
push_mods

# save imputed data
saveRDS(mice_support,
        here::here(push_mods, "mice_support"))

# complete
mice_support_c  <- mice::complete(mice_support, action = 'long', include = TRUE)

#spit and shine
mice_support_c <-mice_support_c |> select(-c(.id.1, .imp.1))

# check data
#skimr::skim(mice_support_c)

# prepare
row.names(mice_support_c) <- NULL


# note that poisson models for rates inference await development.  Evalues are invalid, and se estimates are invalid.
# we keep the code here for that day
# poisson models do work for binary data though.

mice_support_mids <- mice_support_c %>%
  arrange(.imp, id) |> 
  rename(sample_weights = t0_sample_weights) |> 
  mutate(t0_eth_cat = as.factor(t0_eth_cat),
        t0_education_level_coarsen = as.factor(t0_education_level_coarsen),
        t0_family_time_log =   log(t0_family_time+1),# to improve model convergence
        t2_family_time_log =   log(t2_family_time+1),# to improve model convergence
        t0_friends_time_log =   log(t0_friends_time+1),# to improve model convergence
        t2_friends_time_log =   log(t2_friends_time+1),# to improve model convergence
        t0_community_time_log =   log(t0_community_time+1),# to improve model convergence
        t2_community_time_log =   log(t2_community_time+1),# to improve model convergence
        t0_family_money_log =   log(t0_family_money+1),# to improve model convergence
        t2_family_money_log =   log(t2_family_money+1),# to improve model convergence
        t0_friends_money_log =   log(t0_friends_money+1),# to improve model convergence
        t2_friends_money_log =   log(t2_friends_money+1),# to improve model convergence
        t0_community_money_log =   log(t0_community_money+1),# to improve model convergence
        t2_community_money_log =   log(t2_community_money+1),# to improve model convergence
        t2_family_time_binary = as.integer(ifelse(t2_family_time > 0, 1, 0)),
        t2_friends_time_binary = as.integer(ifelse(t2_friends_time > 0, 1, 0)),
        t2_community_time_binary = as.integer(ifelse(t2_community_time > 0, 1, 0)),
        t2_family_money_binary = as.integer(ifelse(t2_family_money > 0, 1, 0)),
        t2_friends_money_binary = as.integer(ifelse(t2_friends_money > 0, 1, 0)),
        t2_community_money_binary = as.integer(ifelse(t2_community_money > 0, 1, 0)),
        t2_family_time_ord = as.integer(round(t2_family_time,0)), 
        t2_family_money_ord = as.integer(round(t2_family_money,0)), 
        t2_friends_time_ord = as.integer(round(t2_friends_time,0)), 
        t2_friends_money_ord = as.integer(round(t2_friends_money,0)), 
        t2_community_time_ord = as.integer(round(t2_community_time,0)), 
        t2_community_money_ord = as.integer(round(t2_community_money,0)))|>
  dplyr::select(-t0_family_time, -t0_friends_time, -t0_community_time, -t0_family_money, -t0_friends_money,-t0_community_money) |>  # we only worry about removing unneccessary baseline measures, because  the outcomes will not be used for prediction
  dplyr::group_by(.imp) |>
  rowwise() |> # group by id within .imp 
  dplyr::mutate(t2_support = mean(
    c(t2_support_rnoguidance,
      t2_support_turnto,
      t2_support_help),
    na.rm = TRUE
  )) |>
  dplyr::ungroup() |>
  dplyr::mutate(across(where(is.numeric) & !sample_weights & 
        !t2_family_time_binary &
        !t2_friends_time_binary &
        !t2_community_time_binary &
        !t2_family_money_binary &
        !t2_friends_money_binary &
        !t2_community_money_binary &
        !t2_family_time_ord & 
        !t2_family_money_ord & 
        !t2_friends_time_ord & 
        !t2_friends_money_ord & 
        !t2_community_time_ord & 
        !t2_community_money_ord, 
      ~ scale(.x),
      .names = "{col}_z"
    )
  ) %>%
  select(-c(.imp_z, .id_z)) %>%
  select(
    where(is.factor),
    sample_weights,
    t2_family_time_binary,
    t2_friends_time_binary,
    t2_community_time_binary,
    t2_family_money_binary,
    t2_friends_money_binary,
    t2_community_money_binary,
    t2_family_time_ord,
    t2_family_money_ord,
    t2_friends_time_ord,
    t2_friends_money_ord,
    t2_community_time_ord, 
    t2_community_money_ord,
    ends_with("_z"),
    .imp,
    .id
  ) |> 
  relocate(id, .before = sample_weights)  %>%
  relocate(sample_weights, .before = starts_with("t1_"))  %>%
  relocate(starts_with("t0_"), .before = starts_with("t1_"))  %>%
  relocate(starts_with("t2_"), .after = starts_with("t1_"))  %>%
  mutate_if(is.matrix, as.vector) %>%
  droplevels() |> 
  as.mids()
  
# needed for checks
mice_support_long <- mice::complete(mice_support_mids, "long", inc = TRUE)

# check
skim(mice_support_long)


# save
saveRDS(mice_support_mids, here::here(push_mods, "mice_support_mids"))
saveRDS(mice_support_long, here::here(push_mods, "mice_support_long"))
  ```

```{r}
#| label: models-donate
#| eval: false

mice_donate_mids <- readRDS(here::here(push_mods, "mice_donate_mids"))

# long form data if necessary
mice_donate_long <- readRDS(here::here(push_mods, "mice_donate_long"))

# check
skim(mice_donate_long)

#name exposure

# Set exposure 
X <- "t1_religion_scripture_binary" # #levels( mice_donate_long$t1_religion_scripture_binary )


# we have insufficient overlap of religion variables. so we focus on religion

baseline_vars_donate = mice_donate_long |>
  dplyr::select(
    starts_with("t0"),
    -t0_religion_scripture_coarsen,
    -t0_religion_believe_god_z,
    -t0_religion_believe_spirit_z,
    -t0_religion_identification_level_z,
    -t0_religion_spiritual_identification_z#,
  #  -t0_bigger_doms
  )  |> colnames() # strange to include these -- as they  are income by other names


# we have insufficient overlap of religion variables. so we focus on religion
baseline_vars

# keep outcome vars
outcome_vars_donate = mice_donate_long |> dplyr::select(starts_with("t2")) |> colnames()

outcome_vars_donate

# set estimand
estimand = "ATE"

# ebalance
match_donate_ebal <- match_mi_general(data = mice_donate_mids, 
                                 X = X, 
                                 baseline_vars = baseline_vars_donate, 
                                 estimand = estimand,  
                                # focal = "zero",
                                 method = "ebal", 
                                 sample_weights = NULL)
saveRDS(match_donate_ebal, here::here(push_mods, "match_donate_ebal"))


# match_donate_energy <- match_mi_general(data = mice_donate_mids,
#                                  X = X,
#                                  baseline_vars = baseline_vars_donate,
#                                  estimand = estimand,
#                                 # focal = "zero",
#                                  method = "energy",
#                                  sample_weights = NULL)
# saveRDS(match_donate_energy, here::here(push_mods, "match_donate_energy"))


# match_donate_energy <- match_mi_general(data = mice_donate_mids, 
#                                  X = X, 
#                                  baseline_vars = baseline_vars_donate, 
#                                  estimand = estimand,  
#                                 # focal = "zero",
#                                  method = "energy", 
#                                  sample_weights = NULL)
# saveRDS(match_donate_energy, here::here(push_mods, "match_donate_energy"))


# match_donate_cbps <- match_mi_general(data = mice_donate_mids, 
#                                  X = X, 
#                                  baseline_vars = baseline_vars_donate, 
#                                  estimand = estimand,  
#                                 # focal = "zero",
#                                  method = "cbps", 
#                                  sample_weights = NULL)
# saveRDS(match_donate_cbps, here::here(push_mods, "match_donate_cbps"))

# summary
dev.off()
# check ebal
sum_ebal <- summary(match_donate_ebal)
sum_ebal

#graphs
plot(sum_ebal)
bal.tab(match_donate_ebal)
love.plot(match_donate_ebal, binary = "std", thresholds = c(m = .1)) # 

# # if trim is needed
match_donate_ebal_trim <- WeightIt::trim(match_donate_ebal, at = .9999)
here_save(match_donate_ebal_trim,"match_donate_ebal_trim")
sum_ebal_trim <- summary(match_donate_ebal_trim)
sum_ebal_trim

# graphs
plot(sum_ebal_trim)
cobalt::bal.tab(match_donate_ebal_trim, stats = c("m", "v"), binary = "std", thresholds = c(m = .1))
love.plot(match_donate_ebal_trim, binary = "std", thresholds = c(m = .1),  var.order = "unadjusted") # 

# set dataframe
dt_donate = match_donate_ebal_trim


# set cores
cl =  parallel::detectCores () 
cores =  parallel::detectCores () 
#
#nsims = 1000

nsims = 200

#check
treat_0 = "0"

#check
treat_1 = "1" 

# check X
X
 
### Models 
baseline_vars_donate

#### Volunteering Hours
mod_donate_volunteers_gauss_rd  <- double_robust(
  df = dt_donate,  # note change
  Y = "t2_hours_charity_log_z",
  X = X,
  baseline_vars = 1,#baseline_vars_donate,
  treat_0 = treat_0,
  estimand = estimand,
  scale = "RD",
  nsims = nsims,
  cores = cores,
  family = "gaussian",
  weights = TRUE,
  continuous_X = FALSE,
  splines = FALSE, 
  vcov = "HC",
  new_name =  "Volunteers (sd)"
)
mod_donate_volunteers_gauss_rd
saveRDS(mod_donate_volunteers_gauss_rd, here::here(push_mods, "mod_donate_volunteers_gauss_rd"))

# volunteer
mod_donate_volunteer_binary_rr  <- double_robust(
  df = dt_donate,  # note change
  Y = "t2_volunteers",
  X = X, 
  baseline_vars = 1,# baseline_vars_donate,# baseline_vars_donate,# will not converge
  treat_1 = treat_1,
  treat_0 = treat_0,
  estimand = estimand,
  scale = "RR",
  nsims = nsims,
  cores = cores,
  family = binomial(link = "logit"),
  weights = TRUE,
  continuous_X = FALSE,
  splines = FALSE, 
  new_name = "Volunteers (y/n)",
  vcov ="HC"
)
mod_donate_volunteer_binary_rr
saveRDS(mod_donate_volunteer_binary_rr, here::here(push_mods, "mod_donate_volunteer_binary_rr"))


# annual charity donations
mod_donate_charity_dollars_gauss_rd  <- double_robust(
  df = dt_donate,  # note change
  Y = "t2_charity_donate_log_z",
  X = X,
  baseline_vars = baseline_vars_donate,
  treat_1 = treat_1,
  treat_0 = treat_0,
  estimand = estimand,
  scale = "RD",
  nsims = nsims,
  cores = cores,
  family = "gaussian",
  weights = TRUE,
  continuous_X = FALSE,
  splines = FALSE, 
  vcov = "HC",
  new_name =  "Annual charity (sd)"
)
mod_donate_charity_dollars_gauss_rd
saveRDS(mod_donate_charity_dollars_gauss_rd, here::here(push_mods, "mod_donate_charity_dollars_gauss_rd"))

# modesty
mod_donate_modesty  <- double_robust(
  df = dt_donate, 
  Y = "t2_modesty_z",
  X = X,
  baseline_vars = baseline_vars_donate,
  treat_1 = treat_1,
  treat_0 = treat_0,
  estimand = estimand,
  scale = "RD",
  nsims = nsims,
  cores = cores,
  family = "gaussian",
  weights = TRUE,
  continuous_X = FALSE,
  splines = FALSE,
  vcov = "HC",
  new_name = "Modesty/Humility (sd)"
)
mod_donate_modesty
saveRDS(mod_donate_modesty, here::here(push_mods, "mod_donate_modesty"))

# humility
mod_donate_honesty_humility  <- double_robust(
  df = dt_donate, 
  Y = "t2_honesty_humility_z",
  X = X,
  baseline_vars = baseline_vars_donate,
  treat_1 = treat_1,
  treat_0 = treat_0,
  estimand = estimand,
  scale = "RD",
  nsims = nsims,
  cores = cores,
  family = "gaussian",
  weights = TRUE,
  continuous_X = FALSE,
  splines = FALSE,
  vcov = "HC",
  new_name = "Honesty/Humility (sd)"
)
mod_donate_honesty_humility
saveRDS(mod_donate_honesty_humility, here::here(push_mods, "mod_donate_honesty_humility"))

# veng_rumin/ humilty 
mod_donate_vengeful_rumin  <- double_robust(
  df = dt_donate, 
  Y = "t2_vengeful_rumin_z",
  X = X,
  baseline_vars = baseline_vars_donate,
  treat_1 = treat_1,
  treat_0 = treat_0,
  estimand = estimand,
  scale = "RD",
  nsims = nsims,
  cores = cores,
  family = "gaussian",
  weights = TRUE,
  continuous_X = FALSE,
  splines = FALSE,
  vcov = "HC",
  new_name = "Vengeful (sd)"
)
mod_donate_vengeful_rumin
saveRDS(mod_donate_vengeful_rumin, here::here(push_mods, "mod_donate_vengeful_rumin"))

# gratitude
mod_donate_gratitude <- double_robust(
  df = dt_donate, 
  Y = "t2_gratitude_z",
  X = X,
  baseline_vars = baseline_vars_donate,
  treat_1 = treat_1,
  treat_0 = treat_0,
  estimand = estimand,
  scale = "RD",
  nsims = nsims,
  cores = cores,
  family = "gaussian",
  weights = TRUE,
  continuous_X = FALSE,
  splines = FALSE,
  vcov = "HC",
  new_name = "Gratitude (sd)"
)
mod_donate_gratitude
saveRDS(mod_donate_gratitude, here::here(push_mods, "mod_donate_gratitude"))
```
```{r}
#|label: models-warmth
# read imputations
mice_warmth_mids <- readRDS(here::here(push_mods, "mice_warmth_mids"))
mice_warmth_long <- readRDS(here::here(push_mods, "mice_warmth_long"))

# check
skim(mice_warmth_long)



baseline_vars_warmth = mice_warmth_long |>
  dplyr::select(
    starts_with("t0"),
    -t0_religion_scripture_coarsen,
    -t0_religion_believe_god_z,
    -t0_religion_believe_spirit_z,
    -t0_religion_identification_level_z,
    -t0_religion_spiritual_identification_z#,
  ) |> colnames() # strange to include these -- as they  are income by other names

baseline_vars_warmth


# create outcome vars
outcome_vars_warmth = mice_warmth_long |> dplyr::select(starts_with("t2")) |> colnames()
outcome_vars_warmth

# estimand
estimand = "ATE"

# ebalance weights
mice_warmth_ebal <- match_mi_general(data = mice_warmth_mids, 
                                 X = X, 
                                 baseline_vars = baseline_vars_warmth, 
                                 estimand = estimand,  
                                # focal = "zero",
                                 method = "ebal", 
                                 sample_weights = "sample_weights")
saveRDS(mice_warmth_ebal, here::here(push_mods, "mice_warmth_ebal"))
mice_warmth_ebal<- here_read( "mice_warmth_ebal")

# summary
sum_ebal <- summary(mice_warmth_ebal)
sum_ebal

push_mods
# graphs
plot(sum_ebal)
bal.tab(mice_warmth_ebal)

# if trim (if needed)
mice_warmth_ebal_trim <- WeightIt::trim(mice_warmth_ebal, at = .999)
sum_ebal_trim <- summary(mice_warmth_ebal_trim)
sum_ebal_trim

# graphs
plot(sum_ebal_trim)
bal.tab(mice_warmth_ebal_trim,stats = c("m", "ks"), abs = TRUE)
love.plot(mice_warmth_ebal_trim, binary = "std", thresholds = c(m = .1),  var.order = "unadjusted")

# settings 
dt_warmth = mice_warmth_ebal_trim

# cores
cl =  parallel::detectCores () 
cores =  parallel::detectCores () 

nsims = 200
#check treatments
# treat_0 = "zero"
# #check
# treat_1 = "seven_up" 
#  
treat_0
treat_1
# models

# asians
mod_warmth_asians  <- double_robust(
  df = dt_warmth,  # note change
  Y = "t2_warm_asians_z",
  X = X,
  baseline_vars = baseline_vars_warmth,
  treat_1 = treat_1,
  treat_0 = treat_0,
  estimand = estimand,
  scale = "RD",
  nsims = nsims,
  cores = cores,
  family = "gaussian",
  weights = TRUE,
  continuous_X = FALSE,
  splines = FALSE, 
  vcov = "HC",
  new_name = "Warmth Asians (sd)"
)
mod_warmth_asians
saveRDS(mod_warmth_asians, here::here(push_mods, "mod_warmth_asians"))

# chinese
mod_warmth_chinese  <- double_robust(
  df = dt_warmth,  # note change
  Y = "t2_warm_chinese_z",
  X = X,
  baseline_vars = baseline_vars_warmth,
  treat_1 = treat_1,
  treat_0 = treat_0,
  estimand = estimand,
  scale = "RD",
  nsims = nsims,
  cores = cores,
  family = "gaussian",
  weights = TRUE,
  continuous_X = FALSE,
  splines = FALSE, 
  vcov = "HC",
  new_name = "Warmth Chinese (sd)"
)

mod_warmth_chinese
saveRDS(mod_warmth_chinese, here::here(push_mods, "mod_warmth_chinese"))

# migrants
mod_warmth_immigrants  <- double_robust(
  df = dt_warmth,  # note change
  Y = "t2_warm_immigrants_z",
  X = X,
  baseline_vars = baseline_vars_warmth,
  treat_1 = treat_1,
  treat_0 = treat_0,
  estimand = estimand,
  scale = "RD",
  nsims = nsims,
  cores = cores,
  family = "gaussian",
  weights = TRUE,
  continuous_X = FALSE,
  splines = FALSE, 
  vcov = "HC",
  new_name = "Warmth Immigrants (sd)"
)
mod_warmth_immigrants
saveRDS(mod_warmth_immigrants, here::here(push_mods, "mod_warmth_immigrants"))


# indians
mod_warmth_indians  <- double_robust(
  df = dt_warmth,  # note change
  Y = "t2_warm_indians_z",
  X = X,
  baseline_vars = baseline_vars_warmth,
  treat_1 = treat_1,
  treat_0 = treat_0,
  estimand = estimand,
  scale = "RD",
  nsims = nsims,
  cores = cores,
  family = "gaussian",
  weights = TRUE,
  continuous_X = FALSE,
  splines = FALSE, 
  vcov = "HC",
  new_name = "Warmth Indians (sd)"
)


mod_warmth_indians
saveRDS(mod_warmth_indians, here::here(push_mods, "mod_warmth_indians"))

# elderly
mod_warmth_elderly  <- double_robust(
  df = dt_warmth,  # note change
  Y = "t2_warm_elderly_z",
  X = X,
  baseline_vars = baseline_vars_warmth,
  treat_1 = treat_1,
  treat_0 = treat_0,
  estimand = estimand,
  scale = "RD",
  nsims = nsims,
  cores = cores,
  family = "gaussian",
  weights = TRUE,
  continuous_X = FALSE,
  splines = FALSE, 
  vcov = "HC",
  new_name = "Warmth Elderly (sd)"
)


mod_warmth_elderly
saveRDS(mod_warmth_elderly, here::here(push_mods, "mod_warmth_elderly"))

# maori
mod_warmth_maori  <- double_robust(
  df = dt_warmth,  # note change
  Y = "t2_warm_maori_z",
  X = X,
  baseline_vars = baseline_vars_warmth,
  treat_1 = treat_1,
  treat_0 = treat_0,
  estimand = estimand,
  scale = "RD",
  nsims = nsims,
  cores = cores,
  family = "gaussian",
  weights = TRUE,
  continuous_X = FALSE,
  splines = FALSE, 
  vcov = "HC",
  new_name = "Warmth Māori (sd)"
)


mod_warmth_maori
saveRDS(mod_warmth_maori, here::here(push_mods, "mod_warmth_maori"))

# mental health
mod_warmth_mental  <- double_robust(
  df = dt_warmth,  # note change
  Y = "t2_warm_mental_illness_z",
  X = X,
  baseline_vars = baseline_vars_warmth,
  treat_1 = treat_1,
  treat_0 = treat_0,
  estimand = estimand,
  scale = "RD",
  nsims = nsims,
  cores = cores,
  family = "gaussian",
  weights = TRUE,
  continuous_X = FALSE,
  splines = FALSE, 
  vcov = "HC",
  new_name = "Warmth Mental Illness (sd)"
)


mod_warmth_mental
saveRDS(mod_warmth_mental, here::here(push_mods, "mod_warmth_mental"))


# muslims
mod_warmth_muslims  <- double_robust(
  df = dt_warmth,  # note change
  Y = "t2_warm_muslims_z",
  X = X,
  baseline_vars = baseline_vars_warmth,
  treat_1 = treat_1,
  treat_0 = treat_0,
  estimand = estimand,
  scale = "RD",
  nsims = nsims,
  cores = cores,
  family = "gaussian",
  weights = TRUE,
  continuous_X = FALSE,
  splines = FALSE, 
  vcov = "HC",
  new_name = "Warmth Muslims (sd)"
)

mod_warmth_muslims
saveRDS(mod_warmth_muslims, here::here(push_mods, "mod_warmth_muslims"))

# nzeuro
mod_warmth_nzeuro  <- double_robust(
  df = dt_warmth,  # note change
  Y = "t2_warm_nz_euro_z",
  X = X,
  baseline_vars = baseline_vars_warmth,
  treat_1 = treat_1,
  treat_0 = treat_0,
  estimand = estimand,
  scale = "RD",
  nsims = nsims,
  cores = cores,
  family = "gaussian",
  weights = TRUE,
  continuous_X = FALSE,
  splines = FALSE, 
  vcov = "HC",
  new_name = "Warmth NZ Europeans (sd)"
)


mod_warmth_nzeuro
saveRDS(mod_warmth_nzeuro, here::here(push_mods, "mod_warmth_nzeuro"))


# overweight
mod_warmth_overweight  <- double_robust(
  df = dt_warmth,  # note change
  Y = "t2_warm_overweight_z",
  X = X,
  baseline_vars = baseline_vars_warmth,
  treat_1 = treat_1,
  treat_0 = treat_0,
  estimand = estimand,
  scale = "RD",
  nsims = nsims,
  cores = cores,
  family = "gaussian",
  weights = TRUE,
  continuous_X = FALSE,
  splines = FALSE, 
  vcov = "HC",
  new_name = "Warmth Overweight (sd)"
)


mod_warmth_overweight
saveRDS(mod_warmth_overweight, here::here(push_mods, "mod_warmth_overweight"))

# pacific
mod_warmth_pacific  <- double_robust(
  df = dt_warmth,  # note change
  Y = "t2_warm_pacific_z",
  X = X,
  baseline_vars = baseline_vars_warmth,
  treat_1 = treat_1,
  treat_0 = treat_0,
  estimand = estimand,
  scale = "RD",
  nsims = nsims,
  cores = cores,
  family = "gaussian",
  weights = TRUE,
  continuous_X = FALSE,
  splines = FALSE, 
  vcov = "HC",
  new_name = "Warmth Pacific (sd)"
)


mod_warmth_pacific
saveRDS(mod_warmth_pacific, here::here(push_mods, "mod_warmth_pacific"))

# refugees
mod_warmth_refugees  <- double_robust(
  df = dt_warmth,  # note change
  Y = "t2_warm_refugees_z",
  X = X,
  baseline_vars = baseline_vars_warmth,
  treat_1 = treat_1,
  treat_0 = treat_0,
  estimand = estimand,
  scale = "RD",
  nsims = nsims,
  cores = cores,
  family = "gaussian",
  weights = TRUE,
  continuous_X = FALSE,
  splines = FALSE, 
  vcov = "HC",
  new_name = "Warmth Refugees (sd)"
)


mod_warmth_refugees
saveRDS(mod_warmth_refugees, here::here(push_mods, "mod_warmth_refugees"))

# perceived discrimination
mod_warmth_per_rel_discrimination  <- double_robust(
  df = dt_warmth,  # note change
  Y = "t2_religion_perceive_religious_discrim_z",
  X = X,
  baseline_vars = baseline_vars_warmth,
  treat_1 = treat_1,
  treat_0 = treat_0,
  estimand = estimand,
  scale = "RD",
  nsims = nsims,
  cores = cores,
  family = "gaussian",
  weights = TRUE,
  continuous_X = FALSE,
  splines = FALSE, 
  vcov = "HC",
  new_name = "Perceived Religious Discrimination (sd)"
)

mod_warmth_per_rel_discrimination
saveRDS(mod_warmth_per_rel_discrimination, here::here(push_mods, "mod_warmth_per_rel_discrimination"))
```



```{r}
#|label: models-support
# read data
mice_support_mids <- readRDS(here::here(push_mods, "mice_support_mids"))

# longform data for getting names and datachecks
mice_support_long <- readRDS(here::here(push_mods, "mice_support_long"))

# check
skim(mice_support_long)

# set exposure 
X <- "t1_religion_scripture_binary"

# create baseline variables
baseline_vars_support = mice_support_long |>
  dplyr::select(
    starts_with("t0"),
    -t0_religion_scripture_coarsen,
    -t0_religion_believe_god_z,
    -t0_religion_believe_spirit_z,
    -t0_religion_identification_level_z,
    -t0_religion_spiritual_identification_z#,
   # -t0_bigger_doms
  ) |> colnames() # used for imputation -- fully co-linear

# view
baseline_vars_support


# look at outcomes
outcome_vars_support = mice_support_long |> dplyr::select(starts_with("t2")) |> colnames()

# outcomes vars
outcome_vars_support

# set estimand
estimand = "ATE"


# energy matching
# match_support_energy <- match_mi_general(data = mice_support_mids, 
#                                  X = X, 
#                                  baseline_vars = baseline_vars_support, 
#                                  estimand = estimand,  
#                                 # focal = "zero",
#                                  method = "energy", 
#                                  sample_weights = "sample_weights")
# saveRDS(match_support_energy, here::here(push_mods, "match_support_energy"))
# love.plot(match_support_energy, binary = "std", thresholds = c(m = .1))


# read if needed
#mice_support_ebal <- readRDS(here::here(push_mods, "mice_support_ebal"))


# ebalance matching
match_support_ebal <- match_mi_general(data = mice_support_mids, 
                                 X = X, 
                                 baseline_vars = baseline_vars_support, 
                                 estimand = estimand,  
                                # focal = "zero",
                                 method = "ebal", 
                                 sample_weights = "sample_weights")
saveRDS(match_support_ebal, here::here(push_mods, "match_support_ebal"))
love.plot(match_support_ebal, binary = "std", thresholds = c(m = .1),var.order = "unadjusted") 
match_support_ebal <- here_read("match_support_ebal")

# summary
sum_ebal <- summary(match_support_ebal)

# view
sum_ebal

# graphs
plot(sum_ebal)
bal.tab(match_support_ebal)

# trim if needed
match_support_ebal_trim <- WeightIt::trim(match_support_ebal, at = .999)
sum_trim_ebal <- summary(match_support_ebal_trim)

# view
sum_trim_ebal

# graphs
plot(sum_trim_ebal)
bal.tab(match_support_ebal_trim,stats = c("m", "ks"), abs = TRUE)
love.plot(match_support_ebal_trim, binary = "std", thresholds = c(m = .1),var.order = "unadjusted") # 

# settings 
# dataframe
dt_support = match_support_ebal_trim #mice_support_ebal

# cores
cl =  parallel::detectCores () 
cores =  parallel::detectCores () 

nsims = 200

#check
treat_0 = "0"
#check
treat_1 = "1" 

X <-here_read("exposure_vars")
# view X 
X


## models
## family time rr
mod_support_family_time_binary_rr  <- double_robust(
  df = dt_support,  # note change
  Y = "t2_family_time_binary",
  X = X,
  baseline_vars = 1, #baseline_vars_support, 
  treat_1 = treat_1,
  treat_0 = treat_0,
  estimand = estimand,
  scale = "RR",
  nsims = nsims,
  cores = cores,
  family = binomial (link = "log"),
  weights = TRUE,
  continuous_X = FALSE,
  splines = FALSE, 
  vcov = "HC",
  new_name = "Family time (y/n)"
)

mod_support_family_time_binary_rr
saveRDS(mod_support_family_time_binary_rr, here::here(push_mods, "mod_support_family_time_binary_rr"))

# friends time rr
mod_support_friends_time_binary_rr  <- double_robust(
  df = dt_support,  # note change
  Y = "t2_friends_time_binary",
  X = X,
  baseline_vars = 1, #baseline_vars_support, 
  treat_1 = treat_1,
  treat_0 = treat_0,
  estimand = estimand,
  scale = "RR",
  nsims = nsims,
  cores = cores,
  family = binomial (link = "log"),
  weights = TRUE,
  continuous_X = FALSE,
  splines = FALSE, 
  vcov = "HC",
  new_name = "Friends time (y/n)"
)

mod_support_friends_time_binary_rr
saveRDS(mod_support_friends_time_binary_rr, here::here(push_mods, "mod_support_friends_time_binary_rr"))
# 
# # community time rr/  not converging so use prop scores only
# mod_support_community_time_binary_rr  <- double_robust(
#   df = dt_support,  # note change
#   Y = "t2_community_time_binary",
#   X = X,
#   baseline_vars = 1, #baseline_vars_support, 
#   treat_1 = treat_1,
#   treat_0 = treat_0,
#   estimand = estimand,
#   scale = "RR",
#   nsims = nsims,
#   cores = cores,
#   family = binomial (link = "log"),
#   weights = TRUE,
#   continuous_X = FALSE,
#   splines = FALSE, 
#   vcov = "HC",
#   new_name = "Community time (y/n)"
# )
# 
# mod_support_community_time_binary_rr
# saveRDS(mod_support_community_time_binary_rr, here::here(push_mods, "mod_support_community_time_binary_rr"))
# 

mod_support_community_time_binary_rr  <- double_robust(
  df = dt_support,  # note change
  Y = "t2_community_time_binary",
  X = X,
  baseline_vars = 1, #baseline_vars_support, 
  treat_1 = treat_1,
  treat_0 = treat_0,
  estimand = estimand,
  scale = "RR",
  nsims = nsims,
  cores = cores,
  family = binomial(link = "log"),
  weights = TRUE,
  continuous_X = FALSE,
  splines = FALSE, 
  vcov = "HC",
  new_name = "Community time (y/n)"
)

mod_support_community_time_binary_rr
saveRDS(mod_support_community_time_binary_rr, here::here(push_mods, "mod_support_community_time_binary_rr"))

# 
# # family money rr
# mod_support_family_money_binary_rr  <- double_robust(
#   df = dt_support,  # note change
#   Y = "t2_family_money_binary",
#   X = X,
#   baseline_vars = 1,#baseline_vars_support,  ## always check
#   treat_1 = treat_1,
#   treat_0 = treat_0,
#   estimand = estimand,
#   scale = "RR",
#   nsims = nsims,
#   cores = cores,
#   family = binomial (link = "log"),
#   weights = TRUE,
#   continuous_X = FALSE,
#   splines = FALSE, 
#   vcov = "HC",
#   new_name = "Family money (y/n)"
# )
# 
# mod_support_family_money_binary_rr
# saveRDS(mod_support_family_money_binary_rr, here::here(push_mods, "mod_support_family_money_binary_rr"))
# 
# 
# # friends money rr
# mod_support_friends_money_binary_rr  <- double_robust(
#   df = dt_support,  # note change
#   Y = "t2_friends_money_binary",
#   X = X,
#   baseline_vars = 1, #baseline_vars_support,  ## always check
#   treat_1 = treat_1,
#   treat_0 = treat_0,
#   estimand = estimand,
#   scale = "RR",
#   nsims = nsims,
#   cores = cores,
#   family = binomial (link = "log"),
#   weights = TRUE,
#   continuous_X = FALSE,
#   splines = FALSE, 
#   vcov = "HC",
#   new_name = "Friends money (y/n)"
# )
# 
# mod_support_friends_money_binary_rr
# saveRDS(mod_support_friends_money_binary_rr, here::here(push_mods, "mod_support_friends_money_binary_rr"))
# 
# mod_support_friends_money_binary_rr <- here_read("mod_support_friends_money_binary_rr")
# 
# # comunity money rr
# mod_support_community_money_binary_rr  <- double_robust(
#   df = dt_support,  # note change
#   Y = "t2_community_money_binary",
#   X = X,
#   baseline_vars = 1, #baseline_vars_support,  ## always check
#   treat_1 = treat_1,
#   treat_0 = treat_0,
#   estimand = estimand,
#   scale = "RR",
#   nsims = nsims,
#   cores = cores,
#   family = binomial (link = "log"),
#   weights = TRUE,
#   continuous_X = FALSE,
#   splines = FALSE, 
#   vcov = "HC",
#   new_name = "Community money (y/n)"
# )
# 
# mod_support_community_money_binary_rr
# saveRDS(mod_support_community_money_binary_rr, here::here(push_mods, "mod_support_community_money_binary_rr"))
# #mod_support_community_money_binary_rr<- here_read("mod_support_community_money_binary_rr")
# ### support continuous 
# # mod_donate_support <- double_robust(
# #   df = dt_support,
# #   Y = "t2_support_z",
# #   X = X,
# #   baseline_vars = baseline_vars_support,
# #   treat_1 = treat_1,
# #   treat_0 = treat_0,
# #   estimand = estimand,
# #   scale = "RD",
# #   nsims = nsims,
# #   cores = cores,
# #   family = "gaussian",
# #   weights = TRUE,
# #   continuous_X = FALSE,
# #   splines = FALSE,
# #   vcov = "HC",
# #   new_name = "Social Support (sd)"
# # )

#'There are people I can depend on to help me if I really need it.
mod_support_support_help  <- double_robust(
  df = dt_support,  # note change
  Y = "t2_support_help_z",
  X = X,
  baseline_vars = baseline_vars_support,  ## always check
  treat_1 = treat_1,
  treat_0 = treat_0,
  estimand = estimand,
  scale = "RD",
  nsims = nsims,
  cores = cores,
  family = "gaussian",
  weights = TRUE,
  continuous_X = FALSE,
  splines = FALSE,
    vcov = vcov,
  new_name = "Support help (sd)"
)
# save model
mod_support_support_help
saveRDS(mod_support_support_help, here::here(push_mods, "mod_support_support_help"))
# 
# #There are people I can depend on to help me if I really need it.
# mod_support_support_turnto  <- double_robust(
#   df = dt_support,  # note change
#   Y = "t2_support_turnto_z",
#   X = X,
#   baseline_vars = baseline_vars_support,  ## always check
#   treat_1 = treat_1,
#   treat_0 = treat_0,
#   estimand = estimand,
#   scale = "RD",
#   nsims = nsims,
#   cores = cores,
#   family = "gaussian",
#   weights = TRUE,
#   continuous_X = FALSE,
#   splines = FALSE,
#     vcov = vcov,
#   new_name = "Support turnto (sd)"
# )
# # save model
# mod_support_support_turnto
# saveRDS(mod_support_support_turnto, here::here(push_mods, "mod_support_support_turnto"))
# 
# #There is no one I can turn to for guidance in times of stress.
# mod_support_support_rnoguidance  <- double_robust(
#   df = dt_support,  # note change
#   Y = "t2_support_rnoguidance_z",
#   X = X,
#   baseline_vars = baseline_vars_support,  ## always check
#   treat_1 = treat_1,
#   treat_0 = treat_0,
#   estimand = estimand,
#   scale = "RD",
#   nsims = nsims,
#   cores = cores,
#   family = "gaussian",
#   weights = TRUE,
#   continuous_X = FALSE,
#   splines = FALSE, 
#     vcov = vcov,
#   new_name = "Support noguidance (reversed, sd)"
# )
# # save model
# mod_support_support_rnoguidance
# saveRDS(mod_support_support_rnoguidance, here::here(push_mods, "mod_support_support_rnoguidance"))
# 

mod_support_support_combo  <- double_robust(
  df = dt_support,  # note change
  Y = "t2_support_z",
  X = X,
  baseline_vars = baseline_vars_support,  ## always check
  treat_1 = treat_1,
  treat_0 = treat_0,
  estimand = estimand,
  scale = "RD",
  nsims = nsims,
  cores = cores,
  family = "gaussian",
  weights = TRUE,
  continuous_X = FALSE,
  splines = FALSE,
    vcov = vcov,
  new_name = "Support Construct (sd)"
)
# save model
mod_support_support_combo
saveRDS(mod_support_support_combo, here::here(push_mods, "mod_support_support_combo"))

```


## Method

```{r}
#| label: verify-positivity-data
#| eval: true
#| echo: false

# dt_positivity_full<- dat_long_t |>
#   filter(wave == 2018 | wave == 2019)
# here_save(dt_positivity_full, "dt_positivity_full")

# for subset study

dt_positivity_full <- readRDS(here::here(push_mods,"dt_positivity_full"))

out <- msm::statetable.msm(religion_scripture_binary, id, data = dt_positivity_full)
#state_names <-c("zero", "one", "less_four", "four_up")
state_names <-c("scripture-no", "scripture-yes")

# transition_table <- function(data, state_names = NULL) {
#   # Ensure the data is a dataframe
#   if (!is.data.frame(data)) {
#     data <- as.data.frame(data)
#   }
# 
#   # Check if state names are provided
#   if (is.null(state_names)) {
#     state_names <- paste0("State ", sort(unique(c(
#       data$from, data$to
#     ))))
#   }
# 
#   # Convert the data frame to a wide format
#   df <- data %>%
#     pivot_wider(names_from = to, values_from = Freq) %>%
#     mutate(from = factor(from, levels = sort(unique(from)))) %>%
#     arrange(from) %>%
#     mutate(from = state_names[from]) %>%
#     setNames(c("From", state_names))
# 
#   # Create the markdown table using knitr's kable function
#   markdown_table <- df %>%
#     kbl(format = "markdown", align = 'c')
# 
#   # Create the explanation
#   explanation <- paste(
#     "This transition matrix describes the shifts from one state to another between the baseline wave and the following wave.",
#     "The numbers in the cells represent the number of individuals who transitioned from one state (rows) to another (columns).",
#     "For example, the cell in the first row and second column shows the number of individuals who transitioned from the first state (indicated by the left-most cell in the row) to the second state.",
#     "The top left cell shows the number of individuals who remained in the first state."
#   )
# 
#   list(explanation = explanation, table = markdown_table)
# }


# transition table
t_tab <- transition_table(out, state_names)

# print 
cat(t_tab$explanation)
print(t_tab$table)
```


## Results

```{r}
#| label: fig-results-virtue
#| fig-cap: "Causal effects of scripture gain on virtue"
#| eval: true
#| include: true
#| echo: false
#mod_donate_volunteers_gauss_rd<- here_read("mod_donate_volunteers_gauss_rd")
mod_donate_charity_dollars_gauss_rd<- here_read( "mod_donate_charity_dollars_gauss_rd")
mod_donate_modesty <- here_read( "mod_donate_modesty")
mod_donate_honesty_humility<- here_read( "mod_donate_honesty_humility")
mod_donate_gratitude<- here_read( "mod_donate_gratitude")
mod_donate_vengeful_rumin <-here_read("mod_donate_vengeful_rumin")



tab_virtue <- rbind(
 # mod_donate_volunteers_gauss_rd,
  mod_donate_charity_dollars_gauss_rd,
  mod_donate_modesty,
  mod_donate_honesty_humility,
  mod_donate_gratitude,
  mod_donate_vengeful_rumin
)
group_tab_virtue <- group_tab(tab_virtue, type = "RD")


title = "ATE: +1 year causal effect from gain of scripture"
subtitle_warmth_rd = "Virtues (population)"

group_plot_virtue <- margot_plot(group_tab_virtue,    
                           type = "RD",
                           title = title, 
                           subtitle = subtitle_warmth_rd, 
                           xlab = "(sd units)", 
                           ylab = "test",
                           estimate_scale = 1,
                           base_size = 10,
                           text_size = 2.5,
                           point_size = .5,
                           title_size = 10,
                           subtitle_size = 09,
                           legend_text_size = 6,
                           legend_title_size = 6,
                           x_offset = -1.75,
                           x_lim_lo = -1.75,
                           x_lim_hi =  1)  

group_plot_virtue

# ggsave(
#   group_plot_virtue,
#   path = here::here(here::here(push_mods, "group_plot_virtue_scripture_POP")),
#   width = 8,
#   height = 4.5,
#   units = "in",
#   filename = "group_plot_virtue-scripture-POP.png",
#   device = 'png',
#   limitsize = FALSE,
#   dpi = 600
# )
# 
# 
# ggsave(
#   group_plot_virtue,
#   path = here::here(here::here("figs", "godin", "group_plot_virtue_scripture_POP")),
#   width = 8,
#   height = 4.5,
#   units = "in",
#   filename = "group_plot_virtue_scripture_POP",
#   device = 'png',
#   limitsize = FALSE,
#   dpi = 600
# )
```




```{r}
#| label: tbl-results-virtue
#| tbl-cap: "Causal effects of scripture gain on virtues"
#| eval: true
#| include: true
#| echo: false

group_tab_virtue |> 
  kbl(format="markdown")

#interpret_table(group_tab_support_rr, "causal_risk_ratio", "PATE")
```


```{r}
#| label: fig-results-virtue-binary
#| fig-cap: "Causal effects of scripture gain on volunteering (y/n)"
#| eval: true
#| include: true
#| echo: false
### Risk variables
mod_donate_volunteer_binary_rr<- here_read("mod_donate_volunteer_binary_rr")

# table

tab_vitue_rr <- rbind(
mod_donate_volunteer_binary_rr
)



gr_tab_virtue_rr <- group_tab(tab_vitue_rr, type = "RR")


subtitle_support_rr = "Volunteers (population)"
title = title

gr_plot_virtue_rr <- margot_plot(
  gr_tab_virtue_rr,
  type = "RR",
  title = title,
  subtitle = subtitle_support_rr,
  xlab = "(sd units)",
  ylab = "test",
  estimate_scale = 1,
  base_size = 11,
  text_size = 3,
  point_size = .5,
  title_size = 12,
  subtitle_size = 11,
  legend_text_size = 8,
  legend_title_size = 10,
  x_offset = -1.5,
  x_lim_lo = -1.5,
  x_lim_hi = 3.5
)
gr_plot_virtue_rr


# ggsave(
#   gr_plot_virtue_rr,
#   path = here::here(here::here(push_mods, "gr_plot_virtue_rr-volunteers-POP")),
#   width = 8,
#   height = 4.5,
#   units = "in",
#   filename = "group_plot_ate_support_rr-volunteers_scripture_population.png",
#   device = 'png',
#   limitsize = FALSE,
#   dpi = 600
# )
# 
# ggsave(
#   gr_plot_virtue_rr,
#   path = here::here(here::here("figs", "godin", "gr_plot_virtue_rr-volunteers-POP")),
#   width = 8,
#   height = 4.5,
#   units = "in",
#   filename = "group_plot_ate_support_rr-volunteers_scripture_population.png",
#   device = 'png',
#   limitsize = FALSE,
#   dpi = 600
# )
 
```

```{r}
#| label: tbl-results-volunteer
#| tbl-cap: "Causal effects of scripture gain on revealed social support"
#| eval: true
#| include: true
#| echo: false

gr_tab_virtue_rr |> 
  kbl(format="markdown")

#interpret_table(group_tab_support_rr, "causal_risk_ratio", "PATE")
```




### Warmth


```{r}
#| label: fig-results-warmth
#| fig-cap: "Causal effects of scripture gain on warmth"
#| eval: true
#| include: true
#| echo: false
# donate continuou
mod_warmth_asians<- readRDS(here::here(push_mods, "mod_warmth_asians"))
mod_warmth_chinese <- readRDS(here::here(push_mods, "mod_warmth_chinese"))
mod_warmth_immigrants<- readRDS(here::here(push_mods, "mod_warmth_immigrants"))
mod_warmth_indians<- readRDS(here::here(push_mods, "mod_warmth_indians"))
mod_warmth_elderly<- readRDS(here::here(push_mods, "mod_warmth_elderly"))
mod_warmth_maori<- readRDS(here::here(push_mods, "mod_warmth_maori"))
mod_warmth_mental<- readRDS(here::here(push_mods, "mod_warmth_mental"))
mod_warmth_muslims<- readRDS(here::here(push_mods, "mod_warmth_muslims"))
mod_warmth_nzeuro<- readRDS(here::here(push_mods, "mod_warmth_nzeuro"))
mod_warmth_overweight<- readRDS(here::here(push_mods, "mod_warmth_overweight"))
mod_warmth_pacific<- readRDS(here::here(push_mods, "mod_warmth_pacific"))
mod_warmth_refugees<- readRDS(here::here(push_mods, "mod_warmth_refugees"))
mod_warmth_per_rel_discrimination<- readRDS(here::here(push_mods, "mod_warmth_per_rel_discrimination"))


tab_warmth <- rbind(
mod_warmth_asians,
mod_warmth_chinese,
mod_warmth_immigrants,
mod_warmth_indians,
mod_warmth_elderly,
mod_warmth_maori,
mod_warmth_mental,
mod_warmth_muslims,
mod_warmth_nzeuro,
mod_warmth_overweight,
mod_warmth_pacific,
mod_warmth_refugees,
mod_warmth_per_rel_discrimination   
)
group_tab_warmth <- group_tab(tab_warmth, type = "RD")


title = "ATE: +1 year causal effect from gain of scripture"
subtitle_warmth_rd = "Warmth/Prejudice (population)"

group_plot_ate_warmth_rd <- margot_plot(group_tab_warmth,    
                           type = "RD",
                           title = title, 
                           subtitle = subtitle_warmth_rd, 
                           xlab = "(sd units)", 
                           ylab = "test",
                           estimate_scale = 1,
                           base_size = 8,
                           text_size = 2.5,
                           point_size = .5,
                           title_size = 10,
                           subtitle_size = 09,
                           legend_text_size = 6,
                           legend_title_size = 6,
                           x_offset = -1.75,
                           x_lim_lo = -1.75,
                           x_lim_hi =  1)  
group_plot_ate_warmth_rd
# ggsave(
#   group_plot_ate_warmth_rd,
#   path = here::here(here::here(push_mods, "group_plot_ate_warmth_rd_scripture_POP")),
#   width = 8,
#   height = 4,
#   units = "in",
#   filename = "group_plot_ate_warmth_rd_scripture_POP.png",
#   device = 'png',
#   limitsize = FALSE,
#   dpi = 600
# )

# ggsave(
#   group_plot_ate_warmth_rd,
#   path = here::here(here::here("figs", "godin", "group_plot_ate_warmth_rd_scripture_POP")),
#   width = 8,
#   height = 4,
#   units = "in",
#   filename = "group_plot_ate_warmth_rd_scripture_POP.png",
#   device = 'png',
#   limitsize = FALSE,
#   dpi = 600
# )



```


```{r}
#| label: tbl-results-warmth
#| tbl-cap: "Causal effects of scripture gain on warmth"
#| eval: true
#| include: true
#| echo: false

group_tab_warmth |> 
  kbl(format="markdown")

#interpret_table(group_tab_support_rr, "causal_risk_ratio", "PATE")

```



### Support

```{r}
#| label: fig-results-support-continous
#| fig-cap: "Causal effects of scripture gain on perceived social support"
#| eval: true
#| include: true
#| echo: false

#mod_support_support_help <- readRDS( here::here(push_mods, "mod_support_support_help"))
#mod_support_support_turnto <- readRDS( here::here(push_mods, "mod_support_support_turnto"))
#mod_support_support_rnoguidance <- readRDS( here::here(push_mods, "mod_support_support_rnoguidance"))
mod_support_support_combo <- readRDS( here::here(push_mods, "mod_support_support_combo"))

tab_support_rd <- rbind(
  # mod_support_support_help,
  # mod_support_support_turnto,
  # mod_support_support_rnoguidance,
  mod_support_support_combo
)

group_tab_support_rd <- group_tab(tab_support_rd, type = "RD")

#title = "ATE: +1 year causal effect of scripture gain"
subtitle_social = "Social support: perceived (population)"

group_plot_support_rd <- margot_plot(group_tab_support_rd,    
                           type = "RD",
                           title = title, 
                           subtitle = subtitle_social, 
                           xlab = "(sd units)", 
                           ylab = "test",
                           estimate_scale = 1,
                           base_size = 8,
                           text_size = 2.5,
                           point_size = .5,
                           title_size = 12,
                           subtitle_size = 11,
                           legend_text_size = 8,
                           legend_title_size = 10,
                           x_offset = -.5,
                           x_lim_lo = -.5,
                           x_lim_hi =  .3)  

#check
group_plot_support_rd


# ggsave(
#   group_plot_support_rd,
#   path = here::here(here::here(push_mods, "group_plot_support_rd_scripture_POP")),
#   width = 8,
#   height = 4.5,
#   units = "in",
#   filename = "group_plot_support_rd_scripture_POP.png",
#   device = 'png',
#   limitsize = FALSE,
#   dpi = 600
# )
# 
# ggsave(
#   group_plot_support_rd,
#   path = here::here(here::here("figs", "godin", "group_plot_support_rd_scripture_POP.png")),
#   width = 8,
#   height = 4.5,
#   units = "in",
#   filename = "group_plot_support_rd_scripture_POP.png",
#   device = 'png',
#   limitsize = FALSE,
#   dpi = 600
# )



```


```{r}
#| label: tbl-results-support-continous
#| tbl-cap: "Causal effects of scripture gain on perceived social support"
#| eval: true
#| include: true
#| echo: false

group_tab_support_rd |> 
  kbl(format="markdown")

#interpret_table(group_tab_support_rr, "causal_risk_ratio", "PATE")

```




```{r}
#| label: fig-results-support-binary
#| fig-cap: "Causal effects of scripture gain on revealed social support"
#| eval: true
#| include: true
#| echo: false
### Risk variables

mod_support_family_time_binary_rr <- readRDS( here::here(push_mods, "mod_support_family_time_binary_rr"))
mod_support_friends_time_binary_rr <- readRDS( here::here(push_mods, "mod_support_friends_time_binary_rr"))
mod_support_community_time_binary_rr <- readRDS( here::here(push_mods, "mod_support_community_time_binary_rr"))

# mod_support_family_money_binary_rr <- readRDS( here::here(push_mods, "mod_support_family_money_binary_rr"))
# mod_support_friends_money_binary_rr <- readRDS( here::here(push_mods, "mod_support_friends_money_binary_rr"))
# mod_support_community_money_binary_rr <- readRDS( here::here(push_mods, "mod_support_community_money_binary_rr"))


# table

tab_support_rr <- rbind(
  mod_support_family_time_binary_rr,
  mod_support_friends_time_binary_rr,
  mod_support_community_time_binary_rr
)



group_tab_support_rr <- group_tab(tab_support_rr, type = "RR")


subtitle_support_rr = "Social support received (population)"
title = title

group_plot_ate_support_rr <- margot_plot(
  group_tab_support_rr,
  type = "RR",
  title = title,
  subtitle = subtitle_support_rr,
  xlab = "(sd units)",
  ylab = "test",
  estimate_scale = 1,
  base_size = 11,
  text_size = 3,
  point_size = .5,
  title_size = 12,
  subtitle_size = 11,
  legend_text_size = 8,
  legend_title_size = 10,
  x_offset = -1.5,
  x_lim_lo = -1.5,
  x_lim_hi = 3.5
)
group_plot_ate_support_rr

#

# ggsave(
#   group_plot_ate_support_rr,
#   path = here::here(here::here(push_mods, "group_plot_ate_support_rr_scripture_POP")),
#   width = 8,
#   height = 4.5,
#   units = "in",
#   filename = "group_plot_ate_support_rr-scripture-POP.png",
#   device = 'png',
#   limitsize = FALSE,
#   dpi = 600
# )

# 

# ggsave(
#   group_plot_ate_support_rr,
#   path = here::here(here::here("figs","godin", "group_plot_ate_support_rr_scripture_POP")),
#   width = 8,
#   height = 4.5,
#   units = "in",
#   filename = "group_plot_ate_support_rr_scripture_POP.png",
#   device = 'png',
#   limitsize = FALSE,
#   dpi = 600
# )

```

```{r}
#| label: tbl-results-support-binary
#| tbl-cap: "Causal effects of scripture gain on revealed social support"
#| eval: true
#| include: true
#| echo: false

group_tab_support_rr |> 
  kbl(format="markdown")

#interpret_table(group_tab_support_rr, "causal_risk_ratio", "PATE")
```


## STUDY 2 





```{r}
#| label: prepare-dataX
# prepare on basis of positivity chack

dat_long <- here_read("dat_long")

# get ids of people who are religious
dt_18_religious <- dat_long %>% 
  dplyr::filter(wave == 2018 & religion_religious == 1) |> 
  droplevels()

# check n
nrow(dt_18_religious)

# prepare data for modelling
# get unique identifiers of these individuals (replace `id` with your actual id variable)
religious_ids <- dt_18_religious$id

#  select data of these individuals from the entire dataset
# also create meaningful exposure variable

dat_long_tX  <- dat_long %>%
  filter(id %in% religious_ids) %>%
  mutate(
    religion_scripture_coarsen = cut(
      religion_scripture,
      breaks = c(-Inf, 0, 1, 6.99, Inf),
      labels = c("zero", "one", "less_seven", "seven_up"),
      include.lowest = TRUE,
      right = TRUE
    )
  ) %>%
  mutate(religion_scripture_coarsen_n = as.numeric(religion_scripture_coarsen) -
           1) |>
  mutate(
    religion_scripture_coarsen_n = as.numeric(religion_scripture_coarsen) - 1,
    religion_scripture_binary_n = as.numeric(religion_scripture_binary)
  ) |>
  mutate(
    religion_scripture_binary = as.factor(religion_scripture_binary),
    eth_cat = as.integer(eth_cat),
    urban = as.numeric(urban),
    education_level_coarsen = as.integer(education_level_coarsen)
  ) |>
  droplevels() |>
  arrange(id, wave) |>
  data.frame()


# check n again
n_unique(dat_long_tX$id)

# double check path
push_mods


# save
#saveRDS(dat_long_tX, here::here(push_mods, "dat_long_tX"))

# read if needed
#dat_long_t <- readRDS(here::here(push_mods, "dat_long_t"))
```

```{r}
#|label: data-wrangling-for-imputationsX
# Create wide data frame

baseline_varsX = c(
    "male",
    "age",
    "education_level_coarsen", # factors
    "eth_cat", #factor(EthCat, labels = c("Euro", "Maori", "Pacific", "Asian")),
   # "employed", # Are you currently employed? (this includes self-employment or casual work)
    #"gen_cohort", #age
    "bigger_doms",
    "nz_dep2018",
    "nzsei13",
    "have_siblings",# added: needed because we are dealing with family giving/receiving
    "born_nz",  # added 
    "hlth_disability",  # added 
     "hlth_bmi",
    "household_inc_log", # added: measured with error but OK for imputations
    "partner",
   # "parent",  # newly changed - have information in child number
    "pol_orient", #Please rate how politically liberal versus conservative you see yourself as being.
    "pol_wing", # Please rate how politically left-wing versus right-wing you see yourself as being.
    "sample_origin",    # Sample origin names combined
    "urban",
    "children_num",
    "household_inc_log", # new from previous study. needed because we are dealing with family giving/receiving
    "hours_children_log", # new
    "hours_work_log", # new
    "hours_housework_log", #new
    "agreeableness", 
    "conscientiousness",
    "extraversion",
    "honesty_humility",
    "openness",
    "neuroticism",
    "modesty", # I want people to know that I am an important person of high status, I am an ordinary person who is no better than others. , I wouldn’t want people to treat me as though I were superior to them. I think that I am entitled to more respect than the average person is.
   # "religion_religious", # Do you identify with a religion and/or spiritual group?
   # "religion_identification_level", #How important is your religion to how you see yourself?"  # note this is not a great measure of virtue, virtue is a mean between extremes.
   "religion_scripture_coarsen", # for prediction
    # "religion_religious", # perfectly colinear
   "religion_spiritual_identification",   
   "religion_identification_level",
   "religion_church_binary",
   "religion_prayer_binary",
  # "religion_scripture",
   "religion_scripture_binary",
   "religion_believe_god",
   "religion_believe_spirit",
    "sample_weights",
  "alert_level_combined_lead" # lead to make it 2019
)
# check
baseline_vars
# check
baseline_varsX

# set exposure variable, can be both the continuous and the coarsened, if needed
exposure_varX = c("religion_scripture_coarsen") # we could construct this after imputation. # "perfectionism_high" to be replace by "perfectionism_coarsen" - do the data wrangling after imputation.


# set outcomes for prosocial domain
outcome_vars_donateX = c(
"modesty",
"honesty_humility",
"vengeful_rumin",
"gratitude",
"hours_charity",
"charity_donate"
)


# set outcome for the acceptance domain
outcome_vars_warmthX = c(
"warm_asians",
"warm_chinese",
# "warm_disabled" , not at time 10
# begins w9
"warm_immigrants",
"warm_indians",
"warm_elderly",
# warm_lgbtq starts w12
"warm_maori",
"warm_mental_illness",
"warm_muslims",
"warm_nz_euro",
"warm_overweight",
"warm_pacific",
"warm_refugees",
"religion_perceive_religious_discrim"
)

# set outcomes for the report received domain
outcome_vars_supportX = c(
"family_time",
"friends_time",
"community_time",
"family_money",
"friends_money",
"community_money",
"support_help",
# 'There are people I can depend on to help me if I really need it.
"support_turnto",
# There is no one I can turn to for guidance in times of stress.
"support_rnoguidance"
#There is no one I can turn to for guidance in times of stress.
)


exposure_varX
prep_donateX <- margot_wide(
dat_long_tX,
baseline_vars = baseline_varsX,
exposure_var = exposure_varX,
outcome_vars = outcome_vars_donateX
)

#check must be a dataframe
str(prep_donateX)
nrow(prep_donateX)

prep_warmthX <- margot_wide(
dat_long_tX,
baseline_vars = baseline_varsX,
exposure_var = exposure_varX,
outcome_vars = outcome_vars_warmthX
)

#check must be a dataframe
str(prep_warmthX)
nrow(prep_warmthX)


prep_supportX <- margot_wide(
dat_long_tX,
baseline_vars = baseline_varsX,
exposure_var = exposure_varX,
outcome_vars = outcome_vars_supportX
)

#check must be a dataframe
str(prep_supportX)
nrow(prep_supportX)

## data for mice
exposure_varsX = c("t1_religion_scripture_coarsen")

here_save(exposure_varsX , "exposure_varsX")


prep_multiple_donateX <-
margot_filter(prep_donateX, exposure_vars = exposure_varsX)
prep_multiple_warmthX <-
margot_filter(prep_warmthX, exposure_vars = exposure_varsX)
prep_multiple_supportX <-
margot_filter(prep_supportX, exposure_vars = exposure_varsX)
#test 
# a <- nrow( prep_multiple_support$zero)
# b <- nrow( prep_multiple_support$one)
# c <- nrow( prep_multiple_support$less_four)
# d <-nrow( prep_multiple_support$four_up)
# 
# 
# # check
# a + b + c + d == nrow(prep_support)
```


```{r}
#| label: imputations-donateX
#| echo: false
#| include: false
#| eval: false

naniar::vis_miss(prep_donateX, warn_large_data = FALSE)

# check for collinear vars
mice:::find.collinear(prep_donateX)

# impute
mice_donateX <- impute_and_combine(prep_multiple_donateX, m = 10)

#check
push_mods

# save imputed data
saveRDS(mice_donateX,
        here::here(push_mods, "mice_donateX"))

# complete
mice_donate_cX  <- mice::complete(mice_donateX, action = 'long', include = TRUE)

# spit an shine
mice_donate_cX <-mice_donate_cX |> select(-c(.id.1, .imp.1))

# check data
#skimr::skim(mice_donate_cX)

# prepare: spit and shine
row.names(mice_donate_cX) <- NULL

# note that poisson models for rates inference await development.  Evalues are invalid, and se estimates are invalid.
# we keep the code here for that day
# poisson models do work for binary data though.

mice_donate_midsX <- mice_donate_cX %>%
  arrange(.imp, id) |> 
  rename(sample_weights = t0_sample_weights) |> 
  mutate(t0_eth_cat = as.factor(t0_eth_cat),
        t0_education_level_coarsen = as.factor(t0_education_level_coarsen),
        t0_hours_charity_log =   log(t0_hours_charity+1),# to improve model convergence
        t2_hours_charity_log =   log(t2_hours_charity+1),# to improve model convergence
        t0_charity_donate_log =  log(t0_charity_donate+1), # to improve model convergence
        t2_charity_donate_log =   log(t2_charity_donate+1),# to improve model convergence
        t2_volunteers = as.integer(ifelse(t2_hours_charity > 0,1,0)),
        t2_hours_charity_ord = as.integer(round(t2_hours_charity,0)), 
        t2_charity_donate_ord = as.integer(round(t2_charity_donate,0))) |> 
  select(-t0_hours_charity, -t0_charity_donate) %>%
  dplyr::group_by(.imp) |>
  rowwise() |>
  dplyr::ungroup() |> 
  dplyr::mutate(across(where(is.numeric) & !sample_weights & !t2_volunteers, ~ scale(.x), .names = "{col}_z")) %>%
  select(-c(.imp_z, .id_z)) %>%
   select(
    where(is.factor),
    sample_weights,
    t2_hours_charity_log,
    t2_charity_donate_log,
    t2_volunteers,
    t2_hours_charity_ord,
    t2_charity_donate_ord,
    ends_with("_z"),
    .imp,
    .id
  ) |> 
  relocate(id, .before = sample_weights)  %>%
  relocate(sample_weights, .before = starts_with("t1_"))  %>%
  relocate(starts_with("t0_"), .before = starts_with("t1_"))  %>%
  relocate(starts_with("t2_"), .after = starts_with("t1_"))  %>%
  mutate_if(is.matrix, as.vector) %>%
  droplevels() |> 
  as.mids()
  
# need long for getting var names and such
mice_donate_longX <- mice::complete(mice_donate_midsX, "long", inc = TRUE)

# checks
skim(mice_donate_longX)

# save
saveRDS(mice_donate_midsX, here::here(push_mods, "mice_donate_midsX"))
saveRDS(mice_donate_longX, here::here(push_mods, "mice_donate_longX"))
```
```{r}
#| label: imputations-warmthX
#| echo: false
#| include: false
#| eval: false

naniar::vis_miss(prep_warmthX, warn_large_data = FALSE)

# check for collinear vars
mice:::find.collinear(prep_warmthX)

# impute
mice_warmthX <- impute_and_combine(prep_multiple_warmthX, m = 10)

# check
push_mods

# save imputed data
saveRDS(mice_warmthX,
        here::here(push_mods, "mice_warmthX"))

#spit and shine
mice_warmth_cX  <- mice::complete(mice_warmthX, action = 'long', include = TRUE)

#spit and shine
mice_warmth_cX <-mice_warmth_cX |> select(-c(.id.1, .imp.1))

# check data
#skimr::skim(mice_warmth_c)

# #spit and shine
row.names(mice_warmth_cX) <- NULL

# post-impute data wrangling
mice_warmth_midsX <- mice_warmth_cX %>%
  arrange(.imp, id) |> 
  rename(sample_weights = t0_sample_weights) |> 
mutate(t0_eth_cat = as.factor(t0_eth_cat),
        t0_education_level_coarsen = as.factor(t0_education_level_coarsen)
         )|>
  dplyr::group_by(.imp) |>
  rowwise() |>
  dplyr::ungroup() |> 
  dplyr::mutate(across(where(is.numeric) & !sample_weights, ~ scale(.x), .names = "{col}_z")) |>
  select(-c(.imp_z, .id_z)) %>%
   select(
    where(is.factor),
    sample_weights,
    ends_with("_z"),
    .imp,
    .id
  ) |> 
  relocate(id, .before = sample_weights)  %>%
  relocate(sample_weights, .before = starts_with("t1_"))  %>%
  relocate(starts_with("t0_"), .before = starts_with("t1_"))  %>%
  relocate(starts_with("t2_"), .after = starts_with("t1_"))  %>%
  mutate_if(is.matrix, as.vector) %>%
  droplevels() |> 
  as.mids()
  
# needed for getting var names and checks
mice_warmth_longX <- mice::complete(mice_warmth_midsX, "long", inc = TRUE)

# save
saveRDS(mice_warmth_midsX, here::here(push_mods, "mice_warmth_midsX"))
saveRDS(mice_warmth_longX, here::here(push_mods, "mice_warmth_longX"))
```
```{r}
#| label: imputations-supportX
#| echo: false
#| include: false
#| eval: false

naniar::vis_miss(prep_supportX, warn_large_data = FALSE)
#dev.off()

# check for collinear vars
mice:::find.collinear(prep_supportX)

# impute
mice_supportX <- impute_and_combine(prep_multiple_supportX, m = 10)

# check
push_mods

# save imputed data
saveRDS(mice_supportX,
        here::here(push_mods, "mice_supportX"))

# complete
mice_support_cX  <- mice::complete(mice_supportX, action = 'long', include = TRUE)

#spit and shine
mice_support_cX <-mice_support_cX |> select(-c(.id.1, .imp.1))

# check data
#skimr::skim(mice_support_c)

# prepare
row.names(mice_support_cX) <- NULL


# note that poisson models for rates inference await development.  Evalues are invalid, and se estimates are invalid.
# we keep the code here for that day
# poisson models do work for binary data though.

mice_support_midsX<- mice_support_cX %>%
  arrange(.imp, id) |> 
  rename(sample_weights = t0_sample_weights) |> 
  mutate(t0_eth_cat = as.factor(t0_eth_cat),
        t0_education_level_coarsen = as.factor(t0_education_level_coarsen),
        t0_family_time_log =   log(t0_family_time+1),# to improve model convergence
        t2_family_time_log =   log(t2_family_time+1),# to improve model convergence
        t0_friends_time_log =   log(t0_friends_time+1),# to improve model convergence
        t2_friends_time_log =   log(t2_friends_time+1),# to improve model convergence
        t0_community_time_log =   log(t0_community_time+1),# to improve model convergence
        t2_community_time_log =   log(t2_community_time+1),# to improve model convergence
        t0_family_money_log =   log(t0_family_money+1),# to improve model convergence
        t2_family_money_log =   log(t2_family_money+1),# to improve model convergence
        t0_friends_money_log =   log(t0_friends_money+1),# to improve model convergence
        t2_friends_money_log =   log(t2_friends_money+1),# to improve model convergence
        t0_community_money_log =   log(t0_community_money+1),# to improve model convergence
        t2_community_money_log =   log(t2_community_money+1),# to improve model convergence
        t2_family_time_binary = as.integer(ifelse(t2_family_time > 0, 1, 0)),
        t2_friends_time_binary = as.integer(ifelse(t2_friends_time > 0, 1, 0)),
        t2_community_time_binary = as.integer(ifelse(t2_community_time > 0, 1, 0)),
        t2_family_money_binary = as.integer(ifelse(t2_family_money > 0, 1, 0)),
        t2_friends_money_binary = as.integer(ifelse(t2_friends_money > 0, 1, 0)),
        t2_community_money_binary = as.integer(ifelse(t2_community_money > 0, 1, 0)),
        t2_family_time_ord = as.integer(round(t2_family_time,0)), 
        t2_family_money_ord = as.integer(round(t2_family_money,0)), 
        t2_friends_time_ord = as.integer(round(t2_friends_time,0)), 
        t2_friends_money_ord = as.integer(round(t2_friends_money,0)), 
        t2_community_time_ord = as.integer(round(t2_community_time,0)), 
        t2_community_money_ord = as.integer(round(t2_community_money,0)))|>
  dplyr::select(-t0_family_time, -t0_friends_time, -t0_community_time, -t0_family_money, -t0_friends_money,-t0_community_money) |>  # we only worry about removing unneccessary baseline measures, because  the outcomes will not be used for prediction
  dplyr::group_by(.imp) |>
  rowwise() |> # group by id within .imp 
  dplyr::mutate(t2_support = mean(
    c(t2_support_rnoguidance,
      t2_support_turnto,
      t2_support_help),
    na.rm = TRUE
  )) |>
  dplyr::ungroup() |>
  dplyr::mutate(across(where(is.numeric) & !sample_weights & 
        !t2_family_time_binary &
        !t2_friends_time_binary &
        !t2_community_time_binary &
        !t2_family_money_binary &
        !t2_friends_money_binary &
        !t2_community_money_binary &
        !t2_family_time_ord & 
        !t2_family_money_ord & 
        !t2_friends_time_ord & 
        !t2_friends_money_ord & 
        !t2_community_time_ord & 
        !t2_community_money_ord, 
      ~ scale(.x),
      .names = "{col}_z"
    )
  ) %>%
  select(-c(.imp_z, .id_z)) %>%
  select(
    where(is.factor),
    sample_weights,
    t2_family_time_binary,
    t2_friends_time_binary,
    t2_community_time_binary,
    t2_family_money_binary,
    t2_friends_money_binary,
    t2_community_money_binary,
    t2_family_time_ord,
    t2_family_money_ord,
    t2_friends_time_ord,
    t2_friends_money_ord,
    t2_community_time_ord, 
    t2_community_money_ord,
    ends_with("_z"),
    .imp,
    .id
  ) |> 
  relocate(id, .before = sample_weights)  %>%
  relocate(sample_weights, .before = starts_with("t1_"))  %>%
  relocate(starts_with("t0_"), .before = starts_with("t1_"))  %>%
  relocate(starts_with("t2_"), .after = starts_with("t1_"))  %>%
  mutate_if(is.matrix, as.vector) %>%
  droplevels() |> 
  as.mids()
  
# needed for checks
mice_support_longX <- mice::complete(mice_support_midsX, "long", inc = TRUE)

# check
skim(mice_support_longX)

# save
saveRDS(mice_support_midsX, here::here(push_mods, "mice_support_midsX"))
saveRDS(mice_support_longX, here::here(push_mods, "mice_support_longX"))
```

```{r}
#| label: models-donateX
#| eval: false

mice_donate_midsX <- readRDS(here::here(push_mods, "mice_donate_midsX"))

# long form data if necessary
mice_donate_longX <- readRDS(here::here(push_mods, "mice_donate_longX"))


levels( mice_donate_longX$t1_religion_scripture_coarsen)
# check
skim(mice_donate_longX)

#name exposure
#levels( mice_donate_longX$t1_religion_scripture_coarsen )
# Set exposure 
X <- "t1_religion_scripture_coarsen" #"t1_religion_scripture_coarsen" 
X

baseline_vars_donateX = mice_donate_longX |>
  dplyr::select(
    starts_with("t0"),
    -t0_religion_believe_god_z,
    -t0_religion_believe_spirit_z,
    -t0_religion_identification_level_z,
    -t0_religion_spiritual_identification_z
  )|> colnames() # strange to include these -- as they  are income by other names

# check
baseline_vars_donateX

# keep outcome vars
outcome_vars_donateX = mice_donate_longX |> dplyr::select(starts_with("t2")) |> colnames()

outcome_vars_donateX 

# set estimand
estimand = "ATE"

# ebalance
match_donate_ebalX <- match_mi_general(data = mice_donate_midsX, 
                                 X = X, 
                                 baseline_vars = baseline_vars_donateX, 
                                 estimand = estimand,  
                                # focal = "zero",
                                 method = "ebal", 
                                 sample_weights = NULL)
saveRDS(match_donate_ebalX, here::here(push_mods, "match_donate_ebalX"))
match_donate_ebalX <- here_read( "match_donate_ebalX") 
# match_donate_energy <- match_mi_general(data = mice_donate_mids, 
#                                  X = X, 
#                                  baseline_vars = baseline_vars_donate, 
#                                  estimand = estimand,  
#                                 # focal = "zero",
#                                  method = "energy", 
#                                  sample_weights = NULL)
# saveRDS(match_donate_energy, here::here(push_mods, "match_donate_energy"))


# match_donate_energy <- match_mi_general(data = mice_donate_mids, 
#                                  X = X, 
#                                  baseline_vars = baseline_vars_donate, 
#                                  estimand = estimand,  
#                                 # focal = "zero",
#                                  method = "energy", 
#                                  sample_weights = NULL)
# saveRDS(match_donate_energy, here::here(push_mods, "match_donate_energy"))


# match_donate_cbps <- match_mi_general(data = mice_donate_mids, 
#                                  X = X, 
#                                  baseline_vars = baseline_vars_donate, 
#                                  estimand = estimand,  
#                                 # focal = "zero",
#                                  method = "cbps", 
#                                  sample_weights = NULL)
# saveRDS(match_donate_cbps, here::here(push_mods, "match_donate_cbps"))

# summary

# check ebal
sum_ebalX <- summary(match_donate_ebalX)
sum_ebalX

#graphs
plot(sum_ebalX)
bal.tab(match_donate_ebalX)

# # if trim is needed
match_donate_ebal_trimX <- WeightIt::trim(match_donate_ebalX, at = .999)
here_save(match_donate_ebal_trimX,"match_donate_ebal_trimX")
sum_ebal_trimX <- summary(match_donate_ebal_trimX)
sum_ebal_trimX
levels( mice_donate_longX$t1_religion_scripture_coarsen)

# graphs
cobalt::bal.tab(match_donate_ebalX, stats = c("m", "v"), binary = "std", thresholds = c(m = .1), which.treat = c("zero", "seven_up"))
love.plot(match_donate_ebal_trimX, binary = "std", thresholds = c(m = .1),  var.order = "unadjusted", which.treat = c("zero", "seven_up")) 

# settings
# set dataframe
dt_donateX = match_donate_ebalX


# set cores
cl =  parallel::detectCores () 
cores =  parallel::detectCores () 



#
#nsims = 1000

nsims = 200

levels( mice_donate_longX$t1_religion_scripture_coarsen)

#check
treat_0 = "zero"

#check
treat_1 = "seven_up" 

# check X
X
 
### Models 

#### Volunteering Hours
# mod_donate_volunteers_gauss_rdX  <- double_robust(
#   df = dt_donateX,  # note change
#   Y = "t2_hours_charity_log_z",
#   X = X,
#   baseline_vars = baseline_vars_donateX,
#   treat_1 = treat_1,
#   treat_0 = treat_0,
#   estimand = estimand,
#   scale = "RD",
#   nsims = nsims,
#   cores = cores,
#   family = "gaussian",
#   weights = TRUE,
#   continuous_X = FALSE,
#   splines = FALSE, 
#   vcov = "HC",
#   new_name =  "Volunteers (sd)"
# )
# mod_donate_volunteers_gauss_rdX
# saveRDS(mod_donate_volunteers_gauss_rdX, here::here(push_mods, "mod_donate_volunteers_gauss_rdX"))
# 
# # volunteer
mod_donate_volunteer_binary_rrX  <- double_robust(
  df = dt_donateX,  # note change
  Y = "t2_volunteers",
  X = X, 
  baseline_vars = 1,# baseline_vars_donateX,# baseline_vars_donateX,# will not converge
  treat_1 = treat_1,
  treat_0 = treat_0,
  estimand = estimand,
  scale = "RR",
  nsims = nsims,
  cores = cores,
  family = binomial(link = "log"),
  weights = TRUE,
  continuous_X = FALSE,
  splines = FALSE, 
  new_name = "Volunteers (y/n)",
  vcov ="HC"
)
mod_donate_volunteer_binary_rrX
saveRDS(mod_donate_volunteer_binary_rrX, here::here(push_mods, "mod_donate_volunteer_binary_rrX"))


# annual charity donations
mod_donate_charity_dollars_gauss_rdX  <- double_robust(
  df = dt_donateX,  # note change
  Y = "t2_charity_donate_log_z",
  X = X,
  baseline_vars = baseline_vars_donateX,
  treat_1 = treat_1,
  treat_0 = treat_0,
  estimand = estimand,
  scale = "RD",
  nsims = nsims,
  cores = cores,
  family = "gaussian",
  weights = TRUE,
  continuous_X = FALSE,
  splines = FALSE, 
  vcov = "HC",
  new_name =  "Annual charity (sd)"
)
mod_donate_charity_dollars_gauss_rdX
saveRDS(mod_donate_charity_dollars_gauss_rdX, here::here(push_mods, "mod_donate_charity_dollars_gauss_rdX"))

# modesty
mod_donate_modestyX  <- double_robust(
  df = dt_donateX, 
  Y = "t2_modesty_z",
  X = X,
  baseline_vars = baseline_vars_donateX,
  treat_1 = treat_1,
  treat_0 = treat_0,
  estimand = estimand,
  scale = "RD",
  nsims = nsims,
  cores = cores,
  family = "gaussian",
  weights = TRUE,
  continuous_X = FALSE,
  splines = FALSE,
  vcov = "HC",
  new_name = "Modesty/Humility (sd)"
)
mod_donate_modestyX
saveRDS(mod_donate_modestyX, here::here(push_mods, "mod_donate_modestyX"))

# humility
mod_donate_honesty_humilityX  <- double_robust(
  df = dt_donateX, 
  Y = "t2_honesty_humility_z",
  X = X,
  baseline_vars = baseline_vars_donateX,
  treat_1 = treat_1,
  treat_0 = treat_0,
  estimand = estimand,
  scale = "RD",
  nsims = nsims,
  cores = cores,
  family = "gaussian",
  weights = TRUE,
  continuous_X = FALSE,
  splines = FALSE,
  vcov = "HC",
  new_name = "Honesty/Humility (sd)"
)
mod_donate_honesty_humilityX
saveRDS(mod_donate_honesty_humilityX, here::here(push_mods, "mod_donate_honesty_humilityX"))

# veng_rumin/ humilty 
mod_donate_vengeful_ruminX  <- double_robust(
  df = dt_donateX, 
  Y = "t2_vengeful_rumin_z",
  X = X,
  baseline_vars = baseline_vars_donateX,
  treat_1 = treat_1,
  treat_0 = treat_0,
  estimand = estimand,
  scale = "RD",
  nsims = nsims,
  cores = cores,
  family = "gaussian",
  weights = TRUE,
  continuous_X = FALSE,
  splines = FALSE,
  vcov = "HC",
  new_name = "Vengeful (sd)"
)
mod_donate_vengeful_ruminX
saveRDS(mod_donate_vengeful_ruminX, here::here(push_mods, "mod_donate_vengeful_ruminX"))

# gratitude
mod_donate_gratitudeX <- double_robust(
  df = dt_donateX, 
  Y = "t2_gratitude_z",
  X = X,
  baseline_vars = baseline_vars_donateX,
  treat_1 = treat_1,
  treat_0 = treat_0,
  estimand = estimand,
  scale = "RD",
  nsims = nsims,
  cores = cores,
  family = "gaussian",
  weights = TRUE,
  continuous_X = FALSE,
  splines = FALSE,
  vcov = "HC",
  new_name = "Gratitude (sd)"
)
mod_donate_gratitudeX
saveRDS(mod_donate_gratitudeX, here::here(push_mods, "mod_donate_gratitudeX"))
```
```{r}
#|label: models-warmthX
# read imputations
mice_warmth_midsX <- readRDS(here::here(push_mods, "mice_warmth_midsX"))
mice_warmth_longX <- readRDS(here::here(push_mods, "mice_warmth_longX"))

# check
skim(mice_warmth_longX)

# Set exposure 
#X <- "t1_religion_scripture_coarsen"

# create baseline vars
baseline_vars_warmthX = mice_warmth_longX |>  dplyr::select(
    starts_with("t0"),
    -t0_religion_believe_god_z,
    -t0_religion_believe_spirit_z,
    -t0_religion_identification_level_z,
    -t0_religion_spiritual_identification_z
  )|> colnames() # strange to include these -- as they  are income by other names


baseline_vars_warmthX

# create outcome vars
outcome_vars_warmthX = mice_warmth_longX |> dplyr::select(starts_with("t2")) |> colnames()
outcome_vars_warmthX

# estimand
estimand = "ATE"

# ebalance weights
mice_warmth_ebalX <- match_mi_general(data = mice_warmth_midsX, 
                                 X = X, 
                                 baseline_vars = baseline_vars_warmthX, 
                                 estimand = estimand,  
                                # focal = "zero",
                                 method = "ebal", 
                                 sample_weights = "sample_weights")
saveRDS(mice_warmth_ebalX, here::here(push_mods, "mice_warmth_ebalX"))
mice_warmth_ebalX<-here_read( "mice_warmth_ebalX")


# summary
sum_ebal <- summary(mice_warmth_ebalX)
sum_ebal

# graphs
plot(sum_ebal)
bal.tab(mice_warmth_ebalX)

# if trim (if needed)
mice_warmth_ebal_trimX <- WeightIt::trim(mice_warmth_ebalX, at = .999)
sum_ebal_trimX <- summary(mice_warmth_ebal_trimX)
sum_ebal_trimX

# graphs
plot(sum_ebal_trimX)
bal.tab(mice_warmth_ebal_trimX,stats = c("m", "ks"), abs = TRUE, var.order = "unadjusted", which.treat = c("zero", "seven_up"))
love.plot(mice_warmth_ebal_trimX, binary = "std", thresholds = c(m = .1),var.order = "unadjusted", which.treat = c("zero", "seven_up")) # not great

# settings 
dt_warmth = mice_warmth_ebal_trimX

# cores
cl =  parallel::detectCores () 
cores =  parallel::detectCores () 

#levels(dat_long_t$religion_scripture_coarsen)
nsims = 200
#check treatments
#treat_0 = "zero"
# #check
#treat_1 = "four_up" 
#  
treat_0
treat_1
# models

# asians
mod_warmth_asiansX  <- double_robust(
  df = dt_warmth,  # note change
  Y = "t2_warm_asians_z",
  X = X,
  baseline_vars = baseline_vars_warmthX,
  treat_1 = treat_1,
  treat_0 = treat_0,
  estimand = estimand,
  scale = "RD",
  nsims = nsims,
  cores = cores,
  family = "gaussian",
  weights = TRUE,
  continuous_X = FALSE,
  splines = FALSE, 
  vcov = "HC",
  new_name = "Warmth Asians (sd)"
)
mod_warmth_asiansX
saveRDS(mod_warmth_asiansX, here::here(push_mods, "mod_warmth_asiansX"))

# chinese
mod_warmth_chineseX  <- double_robust(
  df = dt_warmth,  # note change
  Y = "t2_warm_chinese_z",
  X = X,
  baseline_vars = baseline_vars_warmthX,
  treat_1 = treat_1,
  treat_0 = treat_0,
  estimand = estimand,
  scale = "RD",
  nsims = nsims,
  cores = cores,
  family = "gaussian",
  weights = TRUE,
  continuous_X = FALSE,
  splines = FALSE, 
  vcov = "HC",
  new_name = "Warmth Chinese (sd)"
)

mod_warmth_chineseX
saveRDS(mod_warmth_chineseX, here::here(push_mods, "mod_warmth_chineseX"))

# migrants
mod_warmth_immigrantsX  <- double_robust(
  df = dt_warmth,  # note change
  Y = "t2_warm_immigrants_z",
  X = X,
  baseline_vars = baseline_vars_warmthX,
  treat_1 = treat_1,
  treat_0 = treat_0,
  estimand = estimand,
  scale = "RD",
  nsims = nsims,
  cores = cores,
  family = "gaussian",
  weights = TRUE,
  continuous_X = FALSE,
  splines = FALSE, 
  vcov = "HC",
  new_name = "Warmth Immigrants (sd)"
)
mod_warmth_immigrantsX
saveRDS(mod_warmth_immigrantsX, here::here(push_mods, "mod_warmth_immigrantsX"))


# indians
mod_warmth_indiansX  <- double_robust(
  df = dt_warmth,  # note change
  Y = "t2_warm_indians_z",
  X = X,
  baseline_vars = baseline_vars_warmthX,
  treat_1 = treat_1,
  treat_0 = treat_0,
  estimand = estimand,
  scale = "RD",
  nsims = nsims,
  cores = cores,
  family = "gaussian",
  weights = TRUE,
  continuous_X = FALSE,
  splines = FALSE, 
  vcov = "HC",
  new_name = "Warmth Indians (sd)"
)


mod_warmth_indiansX
saveRDS(mod_warmth_indiansX, here::here(push_mods, "mod_warmth_indiansX"))

# elderly
mod_warmth_elderlyX  <- double_robust(
  df = dt_warmth,  # note change
  Y = "t2_warm_elderly_z",
  X = X,
  baseline_vars = baseline_vars_warmthX,
  treat_1 = treat_1,
  treat_0 = treat_0,
  estimand = estimand,
  scale = "RD",
  nsims = nsims,
  cores = cores,
  family = "gaussian",
  weights = TRUE,
  continuous_X = FALSE,
  splines = FALSE, 
  vcov = "HC",
  new_name = "Warmth Elderly (sd)"
)


mod_warmth_elderlyX
saveRDS(mod_warmth_elderlyX, here::here(push_mods, "mod_warmth_elderlyX"))

# maori
mod_warmth_maoriX  <- double_robust(
  df = dt_warmth,  # note change
  Y = "t2_warm_maori_z",
  X = X,
  baseline_vars = baseline_vars_warmthX,
  treat_1 = treat_1,
  treat_0 = treat_0,
  estimand = estimand,
  scale = "RD",
  nsims = nsims,
  cores = cores,
  family = "gaussian",
  weights = TRUE,
  continuous_X = FALSE,
  splines = FALSE, 
  vcov = "HC",
  new_name = "Warmth Māori (sd)"
)


mod_warmth_maoriX
saveRDS(mod_warmth_maoriX, here::here(push_mods, "mod_warmth_maoriX"))

# mental health
mod_warmth_mentalX  <- double_robust(
  df = dt_warmth,  # note change
  Y = "t2_warm_mental_illness_z",
  X = X,
  baseline_vars = baseline_vars_warmthX,
  treat_1 = treat_1,
  treat_0 = treat_0,
  estimand = estimand,
  scale = "RD",
  nsims = nsims,
  cores = cores,
  family = "gaussian",
  weights = TRUE,
  continuous_X = FALSE,
  splines = FALSE, 
  vcov = "HC",
  new_name = "Warmth Mental Illness (sd)"
)


mod_warmth_mentalX
saveRDS(mod_warmth_mentalX, here::here(push_mods, "mod_warmth_mentalX"))


# muslims
mod_warmth_muslimsX  <- double_robust(
  df = dt_warmth,  # note change
  Y = "t2_warm_muslims_z",
  X = X,
  baseline_vars = baseline_vars_warmthX,
  treat_1 = treat_1,
  treat_0 = treat_0,
  estimand = estimand,
  scale = "RD",
  nsims = nsims,
  cores = cores,
  family = "gaussian",
  weights = TRUE,
  continuous_X = FALSE,
  splines = FALSE, 
  vcov = "HC",
  new_name = "Warmth Muslims (sd)"
)

mod_warmth_muslimsX
saveRDS(mod_warmth_muslimsX, here::here(push_mods, "mod_warmth_muslimsX"))

# nzeuro
mod_warmth_nzeuroX  <- double_robust(
  df = dt_warmth,  # note change
  Y = "t2_warm_nz_euro_z",
  X = X,
  baseline_vars = baseline_vars_warmthX,
  treat_1 = treat_1,
  treat_0 = treat_0,
  estimand = estimand,
  scale = "RD",
  nsims = nsims,
  cores = cores,
  family = "gaussian",
  weights = TRUE,
  continuous_X = FALSE,
  splines = FALSE, 
  vcov = "HC",
  new_name = "Warmth NZ Europeans (sd)"
)


mod_warmth_nzeuroX
saveRDS(mod_warmth_nzeuroX, here::here(push_mods, "mod_warmth_nzeuroX"))


# overweight
mod_warmth_overweightX  <- double_robust(
  df = dt_warmth,  # note change
  Y = "t2_warm_overweight_z",
  X = X,
  baseline_vars = baseline_vars_warmthX,
  treat_1 = treat_1,
  treat_0 = treat_0,
  estimand = estimand,
  scale = "RD",
  nsims = nsims,
  cores = cores,
  family = "gaussian",
  weights = TRUE,
  continuous_X = FALSE,
  splines = FALSE, 
  vcov = "HC",
  new_name = "Warmth Overweight (sd)"
)


mod_warmth_overweightX
saveRDS(mod_warmth_overweightX, here::here(push_mods, "mod_warmth_overweightX"))

# pacific
mod_warmth_pacificX  <- double_robust(
  df = dt_warmth,  # note change
  Y = "t2_warm_pacific_z",
  X = X,
  baseline_vars = baseline_vars_warmthX,
  treat_1 = treat_1,
  treat_0 = treat_0,
  estimand = estimand,
  scale = "RD",
  nsims = nsims,
  cores = cores,
  family = "gaussian",
  weights = TRUE,
  continuous_X = FALSE,
  splines = FALSE, 
  vcov = "HC",
  new_name = "Warmth Pacific (sd)"
)


mod_warmth_pacificX
saveRDS(mod_warmth_pacificX, here::here(push_mods, "mod_warmth_pacificX"))

# refugees
mod_warmth_refugeesX  <- double_robust(
  df = dt_warmth,  # note change
  Y = "t2_warm_refugees_z",
  X = X,
  baseline_vars = baseline_vars_warmthX,
  treat_1 = treat_1,
  treat_0 = treat_0,
  estimand = estimand,
  scale = "RD",
  nsims = nsims,
  cores = cores,
  family = "gaussian",
  weights = TRUE,
  continuous_X = FALSE,
  splines = FALSE, 
  vcov = "HC",
  new_name = "Warmth Refugees (sd)"
)


mod_warmth_refugeesX
saveRDS(mod_warmth_refugeesX, here::here(push_mods, "mod_warmth_refugeesX"))

# perceived discrimination
mod_warmth_per_rel_discriminationX  <- double_robust(
  df = dt_warmth,  # note change
  Y = "t2_religion_perceive_religious_discrim_z",
  X = X,
  baseline_vars = baseline_vars_warmthX,
  treat_1 = treat_1,
  treat_0 = treat_0,
  estimand = estimand,
  scale = "RD",
  nsims = nsims,
  cores = cores,
  family = "gaussian",
  weights = TRUE,
  continuous_X = FALSE,
  splines = FALSE, 
  vcov = "HC",
  new_name = "Perceived Religious Discrimination (sd)"
)

mod_warmth_per_rel_discriminationX
saveRDS(mod_warmth_per_rel_discriminationX, here::here(push_mods, "mod_warmth_per_rel_discriminationX"))
```



```{r}
#|label: models-supportX
# read data
mice_support_midsX <- readRDS(here::here(push_mods, "mice_support_midsX"))

# longform data for getting names and datachecks
mice_support_longX <- readRDS(here::here(push_mods, "mice_support_longX"))

exposure_varsX <- here_read("exposure_varsX")
exposure_varsX
# check
skim(mice_support_longX)

# create baseline variables
baseline_vars_supportX = mice_support_longX |>  dplyr::select(
    starts_with("t0"),
    -t0_religion_believe_god_z,
    -t0_religion_believe_spirit_z,
    -t0_religion_identification_level_z,
    -t0_religion_spiritual_identification_z,
    -t0_religion_scripture_binary_z
  )|> colnames() # strange to include these -- as they  are income by other names



# view
baseline_vars_supportX

# look at outcomes
outcome_vars_supportX = mice_support_longX |> dplyr::select(starts_with("t2")) |> colnames()

# outcomes vars
outcome_vars_supportX

# set estimand
estimand = "ATE"

X
# energy matching
# match_support_energy <- match_mi_general(data = mice_support_mids, 
#                                  X = X, 
#                                  baseline_vars = baseline_vars_support, 
#                                  estimand = estimand,  
#                                 # focal = "zero",
#                                  method = "energy", 
#                                  sample_weights = "sample_weights")
# saveRDS(match_support_energy, here::here(push_mods, "match_support_energy"))
# love.plot(match_support_energy, binary = "std", thresholds = c(m = .1))


# read if needed
#mice_support_ebal <- readRDS(here::here(push_mods, "mice_support_ebal"))


# ebalance matching
match_support_ebalX <- match_mi_general(data = mice_support_midsX, 
                                 X = exposure_varsX, 
                                 baseline_vars = baseline_vars_supportX, 
                                 estimand = estimand,  
                                # focal = "zero",
                                 method = "ebal", 
                                 sample_weights = "sample_weights")
saveRDS(match_support_ebalX, here::here(push_mods, "match_support_ebalX"))
match_support_ebalX <- here_read("match_support_ebalX")
love.plot(match_support_ebalX, binary = "std", thresholds = c(m = .1),var.order = "unadjusted", which.treat = c("zero", "seven_up")) # not great

# summary
sum_ebalX <- summary(match_support_ebalX)

# view
sum_ebalX

# graphs
plot(sum_ebalX)
bal.tab(match_support_ebalX)

# trim if needed
match_support_ebal_trimX <- WeightIt::trim(match_support_ebalX, at = .999)
sum_trim_ebalX <- summary(match_support_ebal_trimX)

# view
sum_trim_ebalX

# graphs
plot(sum_trim_ebalX)
bal.tab(match_support_ebal_trimX,stats = c("m", "ks"), abs = TRUE)
love.plot(match_support_ebal_trimX, binary = "std",  thresholds = c(m = .1),var.order = "unadjusted", which.treat = c("zero", "seven_up")) # not great



# settings 
# dataframe
dt_supportX = match_support_ebal_trimX #mice_support_ebal

# cores
cl =  parallel::detectCores () 
cores =  parallel::detectCores () 

#levels(dat_long_t$religion_scripture_coarsen)
nsims = 200

#check
treat_0  ="zero"
#check
treat_1  = "seven_up"

X <-here_read("exposure_varsX")
# view X 
X


## models

## family time rr
mod_support_family_time_binary_rrX  <- double_robust(
  df = dt_supportX,  # note change
  Y = "t2_family_time_binary",
  X = X,
  baseline_vars = baseline_vars_supportX, 
  treat_1 = treat_1,
  treat_0 = treat_0,
  estimand = estimand,
  scale = "RR",
  nsims = nsims,
  cores = cores,
  family = binomial(link = "log"),
  weights = TRUE,
  continuous_X = FALSE,
  splines = FALSE, 
  vcov = "HC",
  new_name = "Family time (y/n)"
)

mod_support_family_time_binary_rrX
saveRDS(mod_support_family_time_binary_rrX, here::here(push_mods, "mod_support_family_time_binary_rrX"))

# treat_0 = "zero"
# treat_1 = "four_up"
# friends time rr
#cores = 10
mod_support_friends_time_binary_rrX  <- double_robust(
  df = dt_supportX,  # note change
  Y = "t2_friends_time_binary",
  X = X,
  baseline_vars = 1, #baseline_vars_supportX, 
  treat_1 = treat_1,
  treat_0 = treat_0,
  estimand = estimand,
  scale = "RR",
  nsims = 1000,
  cores = cores,
  family = binomial(link = "log"),
  weights = TRUE,
  continuous_X = FALSE,
  splines = FALSE, 
  vcov = "HC",
  new_name = "Friends time (y/n)"
)

mod_support_friends_time_binary_rrX
saveRDS(mod_support_friends_time_binary_rrX, here::here(push_mods, "mod_support_friends_time_binary_rrX"))

# community time rr/  not converging so use prop scores only
mod_support_community_time_binary_rrX  <- double_robust(
  df = dt_supportX,  # note change
  Y = "t2_community_time_binary",
  X = X,
  baseline_vars = 1, #baseline_vars_supportX, 
  treat_1 = treat_1,
  treat_0 = treat_0,
  estimand = estimand,
  scale = "RR",
  nsims = nsims,
  cores = cores,
  family = binomial(link = "log"),
  weights = TRUE,
  continuous_X = FALSE,
  splines = FALSE, 
  vcov = "HC",
  new_name = "Community time (y/n)"
)

mod_support_community_time_binary_rrX
saveRDS(mod_support_community_time_binary_rrX, here::here(push_mods, "mod_support_community_time_binary_rrX"))

# 
# #'There are people I can depend on to help me if I really need it.
# mod_support_support_helpX  <- double_robust(
#   df = dt_supportX,  # note change
#   Y = "t2_support_help_z",
#   X = X,
#   baseline_vars = 1,  ## always check
#   treat_1 = treat_1,
#   treat_0 = treat_0,
#   estimand = estimand,
#   scale = "RD",
#   nsims = nsims,
#   cores = cores,
#   family = "gaussian",
#   weights = TRUE,
#   continuous_X = FALSE,
#   splines = FALSE,
#     vcov = vcov,
#   new_name = "Support help (sd)"
# )
# # save model
# mod_support_support_helpX
# saveRDS(mod_support_support_helpX, here::here(push_mods, "mod_support_support_helpX"))
# 
# #There are people I can depend on to help me if I really need it.
# mod_support_support_turntoX  <- double_robust(
#   df = dt_supportX,  # note change
#   Y = "t2_support_turnto_z",
#   X = X,
#   baseline_vars = 1,  ## always check
#   treat_1 = treat_1,
#   treat_0 = treat_0,
#   estimand = estimand,
#   scale = "RD",
#   nsims = nsims,
#   cores = cores,
#   family = "gaussian",
#   weights = TRUE,
#   continuous_X = FALSE,
#   splines = FALSE,
#     vcov = vcov,
#   new_name = "Support turnto (sd)"
# )
# # save model
# mod_support_support_turntoX
# saveRDS(mod_support_support_turntoX, here::here(push_mods, "mod_support_support_turntoX"))
# 
# #There is no one I can turn to for guidance in times of stress.
# mod_support_support_rnoguidanceX  <- double_robust(
#   df = dt_supportX,  # note change
#   Y = "t2_support_rnoguidance_z",
#   X = X,
#   baseline_vars = 1,  ## always check
#   treat_1 = treat_1,
#   treat_0 = treat_0,
#   estimand = estimand,
#   scale = "RD",
#   nsims = nsims,
#   cores = cores,
#   family = "gaussian",
#   weights = TRUE,
#   continuous_X = FALSE,
#   splines = FALSE, 
#     vcov = vcov,
#   new_name = "Support noguidance (reversed, sd)"
# )
# # save model
# mod_support_support_rnoguidanceX
# saveRDS(mod_support_support_rnoguidanceX, here::here(push_mods, "mod_support_support_rnoguidanceX"))


mod_support_support_comboX  <- double_robust(
  df = dt_supportX,  # note change
  Y = "t2_support_z",
  X = X,
  baseline_vars = baseline_vars_supportX,  ## always check
  treat_1 = treat_1,
  treat_0 = treat_0,
  estimand = estimand,
  scale = "RD",
  nsims = nsims,
  cores = cores,
  family = "gaussian",
  weights = TRUE,
  continuous_X = FALSE,
  splines = FALSE,
    vcov = vcov,
  new_name = "Support Construct (sd)"
)
# save model
mod_support_support_comboX
saveRDS(mod_support_support_comboX, here::here(push_mods, "mod_support_support_comboX"))
```


## Method

```{r}
#| label: verify-positivity-dataX
#| eval: true
#| echo: false


# dt_positivity_fullX<- dat_long_tX |>
#   filter(wave == 2018 | wave == 2019)
# here_save(dt_positivity_fullX, "dt_positivity_fullX")

# for subset study

dt_positivity_fullX <- readRDS(here::here(push_mods,"dt_positivity_fullX"))

out <- msm::statetable.msm(religion_scripture_coarsen, id, data = dt_positivity_fullX)
state_names <-c("zero", "one", "less_four", "four_up")
#state_names <-c("scripture-no", "scripture-yes")

# transition table
t_tab <- transition_table(out, state_names)

# print 
cat(t_tab$explanation)
print(t_tab$table)
```


## Results

```{r}
#| label: fig-results-virtueX
#| fig-cap: "Causal effects of scripture gain on virtue"
#| eval: true
#| include: true
#| echo: false
mod_donate_volunteers_gauss_rdX<- here_read("mod_donate_volunteers_gauss_rdX")
mod_donate_charity_dollars_gauss_rdX<- here_read( "mod_donate_charity_dollars_gauss_rdX")
mod_donate_modestyX <- here_read( "mod_donate_modestyX")
mod_donate_honesty_humilityX<- here_read( "mod_donate_honesty_humilityX")
mod_donate_gratitudeX<- here_read( "mod_donate_gratitudeX")
mod_donate_vengeful_ruminX <-here_read("mod_donate_vengeful_ruminX")



tab_virtueX <- rbind(
#  mod_donate_volunteers_gauss_rdX,
  mod_donate_charity_dollars_gauss_rdX,
  mod_donate_modestyX,
  mod_donate_honesty_humilityX,
  mod_donate_gratitudeX,
  mod_donate_vengeful_ruminX
)
group_tab_virtueX <- group_tab(tab_virtueX, type = "RD")


titleX = "ATE: +1 year causal effect of +4 scripture gain (RELIGIOUS ONLY)"
subtitle_warmth_rdX = "Virtues (religious baseline)"

group_plot_virtueX <- margot_plot(group_tab_virtueX,    
                           type = "RD",
                           title = titleX, 
                           subtitle = subtitle_warmth_rdX, 
                           xlab = "(sd units)", 
                           ylab = "test",
                           estimate_scale = 1,
                           base_size = 8,
                           text_size = 2.5,
                           point_size = .5,
                           title_size = 10,
                           subtitle_size = 09,
                           legend_text_size = 6,
                           legend_title_size = 6,
                           x_offset = -1.75,
                           x_lim_lo = -1.75,
                           x_lim_hi =  1)  
group_plot_virtueX
# ggsave(
#   group_plot_virtueX,
#   path = here::here(here::here(push_mods, "group_plot_virtueX_scripture_REL")),
#   width = 8,
#   height = 4.5,
#   units = "in",
#   filename = "group_plot_virtueX_scripture_REL.png",
#   device = 'png',
#   limitsize = FALSE,
#   dpi = 600
# )
# 
# 
# ggsave(
#   group_plot_virtueX,
#   path = here::here(here::here('figs', "godin", "group_plot_virtueX_scripture_REL")),
#   width = 8,
#   height = 4.5,
#   units = "in",
#   filename = "group_plot_virtueX_scripture_REL.png",
#   device = 'png',
#   limitsize = FALSE,
#   dpi = 600
# )



```




```{r}
#| label: tbl-results-virtueX
#| tbl-cap: "Causal effects of scripture gain on virtues"
#| eval: true
#| include: true
#| echo: false

group_tab_virtueX |> 
  kbl(format="markdown")

#interpret_table(group_tab_support_rr, "causal_risk_ratio", "PATE")

```


```{r}
#| label: fig-results-virtue-binaryX
#| fig-cap: "Causal effects of scripture gain on volunteering (y/n)"
#| eval: true
#| include: true
#| echo: false
### Risk variables
mod_donate_volunteer_binary_rrX<- here_read("mod_donate_volunteer_binary_rrX")

# table

tab_vitue_rrX <- rbind(
mod_donate_volunteer_binary_rrX
)

gr_tab_virtue_rrX <- group_tab(tab_vitue_rrX, type = "RR")


subtitle_support_rrX = "Volunteers (religious baseline)"

gr_plot_virtue_rrX <- margot_plot(
  gr_tab_virtue_rrX,
  type = "RR",
  title = titleX,
  subtitle = subtitle_support_rrX,
  xlab = "(sd units)",
  ylab = "test",
  estimate_scale = 1,
  base_size = 11,
  text_size = 3,
  point_size = .5,
  title_size = 12,
  subtitle_size = 11,
  legend_text_size = 8,
  legend_title_size = 10,
  x_offset = -1.5,
  x_lim_lo = -1.5,
  x_lim_hi = 3.5
)
gr_plot_virtue_rrX

ggsave(
  gr_plot_virtue_rrX,
  path = here::here(here::here(push_mods, "gr_plot_virtue_rrX_scripture_REL")),
  width = 8,
  height = 4.5,
  units = "in",
  filename = "gr_plot_virtue_rrX_scripture_REL.png",
  device = 'png',
  limitsize = FALSE,
  dpi = 600
)

# 
# ggsave(
#   gr_plot_virtue_rrX,
#   path = here::here(here::here('figs', "godin",  "gr_plot_virtue_rrX_scripture_REL")),
#   width = 8,
#   height = 4.5,
#   units = "in",
#   filename = "gr_plot_virtue_rrX_scripture_REL.png",
#   device = 'png',
#   limitsize = FALSE,
#   dpi = 600
# )

 
```

```{r}
#| label: tbl-results-volunteerX
#| tbl-cap: "Causal effects of scripture gain on revealed social support"
#| eval: true
#| include: true
#| echo: false

gr_tab_virtue_rrX |> 
  kbl(format="markdown")

#interpret_table(group_tab_support_rrX, "causal_risk_ratio", "PATE")
```




### Warmth


```{r}
#| label: fig-results-warmthX
#| fig-cap: "Causal effects of scripture gain on warmth"
#| eval: true
#| include: true
#| echo: false


mod_warmth_asiansX<- readRDS(here::here(push_mods, "mod_warmth_asiansX"))
mod_warmth_chineseX <- readRDS(here::here(push_mods, "mod_warmth_chineseX"))
mod_warmth_immigrantsX <- readRDS(here::here(push_mods, "mod_warmth_immigrantsX"))
mod_warmth_indiansX <- readRDS(here::here(push_mods, "mod_warmth_indiansX"))
mod_warmth_elderlyX <- readRDS(here::here(push_mods, "mod_warmth_elderlyX"))
mod_warmth_maoriX <- readRDS(here::here(push_mods, "mod_warmth_maoriX"))
mod_warmth_mentalX <- readRDS(here::here(push_mods, "mod_warmth_mentalX"))
mod_warmth_muslimsX <- readRDS(here::here(push_mods, "mod_warmth_muslimsX"))
mod_warmth_nzeuroX <- readRDS(here::here(push_mods, "mod_warmth_nzeuroX"))
mod_warmth_overweightX <- readRDS(here::here(push_mods, "mod_warmth_overweightX"))
mod_warmth_pacificX <- readRDS(here::here(push_mods, "mod_warmth_pacificX"))
mod_warmth_refugeesX<- readRDS(here::here(push_mods, "mod_warmth_refugeesX"))
mod_warmth_per_rel_discriminationX <- readRDS(here::here(push_mods, "mod_warmth_per_rel_discriminationX"))


tab_warmthX <- rbind(
mod_warmth_asiansX,
mod_warmth_chineseX,
mod_warmth_immigrantsX,
mod_warmth_indiansX,
mod_warmth_elderlyX,
mod_warmth_maoriX,
mod_warmth_mentalX,
mod_warmth_muslimsX,
mod_warmth_nzeuroX,
mod_warmth_overweightX,
mod_warmth_pacificX,
mod_warmth_refugeesX,
mod_warmth_per_rel_discriminationX   
)
group_tab_warmthX <- group_tab(tab_warmthX, type = "RD")


#titleX = "ATE: +1 year causal effect of +4 scripture gain"
subtitle_warmth_rdX = "Warmth/Prejudice (religious baseline)"

group_plot_ate_warmth_rdX <- margot_plot(group_tab_warmthX,    
                           type = "RD",
                           title = titleX, 
                           subtitle = subtitle_warmth_rdX, 
                           xlab = "(sd units)", 
                           ylab = "test",
                           estimate_scale = 1,
                           base_size = 8,
                           text_size = 2.5,
                           point_size = .5,
                           title_size = 10,
                           subtitle_size = 09,
                           legend_text_size = 6,
                           legend_title_size = 6,
                           x_offset = -1.75,
                           x_lim_lo = -1.75,
                           x_lim_hi =  1)  

group_plot_ate_warmth_rdX 
ggsave(
  group_plot_ate_warmth_rdX,
  path = here::here(here::here(push_mods, "group_plot_warmth_rdX_scripture_REL")),
  width = 8,
  height = 4.5,
  units = "in",
  filename = "group_plot_warmth_rdX_scripture_REL.png",
  device = 'png',
  limitsize = FALSE,
  dpi = 600
)

# ggsave(
#   group_plot_ate_warmth_rdX,
#   path = here::here(here::here('figs', "godin",  "group_plot_warmth_rdX_scripture_REL")),
#   width = 8,
#   height = 4.5,
#   units = "in",
#   filename = "group_plot_warmth_rdX_scripture_REL.png",
#   device = 'png',
#   limitsize = FALSE,
#   dpi = 600
# )


```


```{r}
#| label: tbl-results-warmthX
#| tbl-cap: "Causal effects of scripture gain on warmth"
#| eval: true
#| include: true
#| echo: false

group_tab_warmthX |> 
  kbl(format="markdown")

#interpret_table(group_tab_support_rrX, "causal_risk_ratio", "PATE")

```



### Support

```{r}
#| label: fig-results-support-continousX
#| fig-cap: "Causal effects of scripture gain on perceived social support"
#| eval: true
#| include: true
#| echo: false

# mod_support_support_helpX <- readRDS( here::here(push_mods, "mod_support_support_helpX"))
# mod_support_support_turntoX <- readRDS( here::here(push_mods, "mod_support_support_turntoX"))
# mod_support_support_rnoguidanceX <- readRDS( here::here(push_mods, "mod_support_support_rnoguidanceX"))
mod_support_support_comboX <- readRDS( here::here(push_mods, "mod_support_support_comboX"))


tab_support_rdX <- rbind(
  # mod_support_support_helpX,
  # mod_support_support_turntoX,
  # mod_support_support_rnoguidanceX
  mod_support_support_comboX
)

group_tab_support_rdX <- group_tab(tab_support_rdX, type = "RD")

#titleX = "ATE: +1 year causal effect of +4 scripture gain"
subtitle_socialX = "Social support: perceived (religious at baseline)"

group_plot_support_rdX <- margot_plot(group_tab_support_rdX,    
                           type = "RD",
                           title = titleX, 
                           subtitle = subtitle_socialX, 
                           xlab = "(sd units)", 
                           ylab = "test",
                           estimate_scale = 1,
                           base_size = 11,
                           text_size = 2.5,
                           point_size = .5,
                           title_size = 12,
                           subtitle_size = 11,
                           legend_text_size = 8,
                           legend_title_size = 10,
                           x_offset = -.5,
                           x_lim_lo = -.5,
                           x_lim_hi =  .3)  

#check
group_plot_support_rdX

# ggsave(
#   group_plot_support_rdX,
#   path = here::here(here::here(push_mods, "group_plot_support_rdX_scripture_REL")),
#   width = 8,
#   height = 4.5,
#   units = "in",
#   filename = "group_plot_support_rdX_scripture_REL.png",
#   device = 'png',
#   limitsize = FALSE,
#   dpi = 600
# )
group_plot_support_rdX
# ggsave(
#   group_plot_support_rdX,
#   path = here::here(here::here('figs', "godin",  "group_plot_support_rdX_scripture_REL")),
#   width = 8,
#   height = 4.5,
#   units = "in",
#   filename = "group_plot_support_rdX_scripture_REL.png",
#   device = 'png',
#   limitsize = FALSE,
#   dpi = 600
# )




```


```{r}
#| label: tbl-results-support-continousX
#| tbl-cap: "Causal effects of scripture gain on perceived social support"
#| eval: true
#| include: true
#| echo: false

group_tab_support_rdX |> 
  kbl(format="markdown")

#interpret_table(group_tab_support_rr, "causal_risk_ratio", "PATE")

```




```{r}
#| label: fig-results-support-binaryX
#| fig-cap: "Causal effects of scripture gain on revealed social supportX"
#| eval: true
#| include: true
#| echo: false
### Risk variables

mod_support_family_time_binary_rrX <- readRDS( here::here(push_mods, "mod_support_family_time_binary_rrX"))
mod_support_friends_time_binary_rrX <- readRDS( here::here(push_mods, "mod_support_friends_time_binary_rrX"))
mod_support_community_time_binary_rrX <- readRDS( here::here(push_mods, "mod_support_community_time_binary_rrX"))

mod_support_family_money_binary_rrX <- readRDS( here::here(push_mods, "mod_support_family_money_binary_rrX"))
mod_support_friends_money_binary_rrX <- readRDS( here::here(push_mods, "mod_support_friends_money_binary_rrX"))
mod_support_community_money_binary_rrX <- readRDS( here::here(push_mods, "mod_support_community_money_binary_rrX"))


# table

tab_support_rrX <- rbind(
  mod_support_family_time_binary_rrX,
  mod_support_friends_time_binary_rrX,
  mod_support_community_time_binary_rrX
)



group_tab_support_rrX <- group_tab(tab_support_rrX, type = "RR")


subtitle_support_rrX = "Social support received (religious at baseline)"


group_plot_ate_support_rrX <- margot_plot(
  group_tab_support_rrX,
  type = "RR",
  title = titleX,
  subtitle = subtitle_support_rr,
  xlab = "(sd units)",
  ylab = "test",
  estimate_scale = 1,
  base_size = 11,
  text_size = 3,
  point_size = .5,
  title_size = 12,
  subtitle_size = 11,
  legend_text_size = 8,
  legend_title_size = 10,
  x_offset = -1.5,
  x_lim_lo = -1.5,
  x_lim_hi = 3.5
)
group_plot_ate_support_rrX

 
ggsave(
  group_plot_ate_support_rrX,
  path = here::here(here::here(push_mods, "group_plot_ate_support_rrX_scripture_REL")),
  width = 8,
  height = 4.5,
  units = "in",
  filename = "group_plot_ate_support_rrX_scripture_REL.png",
  device = 'png',
  limitsize = FALSE,
  dpi = 600
)
# 
#  ggsave(
#   group_plot_ate_support_rrX,
#   path = here::here(here::here('figs', "godin", "group_plot_ate_support_rrX_scripture_REL")),
#   width = 8,
#   height = 4.5,
#   units = "in",
#   filename = "group_plot_ate_support_rrX_scripture_REL.png",
#   device = 'png',
#   limitsize = FALSE,
#   dpi = 600
# )





```

```{r}
#| label: tbl-results-support-binaryX
#| tbl-cap: "Causal effects of scripture gain on revealed social support"
#| eval: true
#| include: true
#| echo: false

group_tab_support_rrX |> 
  kbl(format="markdown")

#interpret_table(group_tab_support_rr, "causal_risk_ratio", "PATE")
```



### Modified Treatment Policy


```{r}
# for modified treatment policies # causal effects on volunteering/ charity
library("lmtp")

# # get ids of people who are religious
dt_18_religious <- dat_long %>%
  dplyr::filter(wave == 2018 & religion_religious == 1) |>
  droplevels()

# # check n
# nrow(dt_18_religious)
# 
# # prepare data for modelling
# # get unique identifiers of these individuals (replace `id` with your actual id variable)
# religious_ids <- dt_18_religious$id

#  select data of these individuals from the entire dataset
#  also create meaningful exposure variable

## first the general population 
dat_long_tX1  <- dat %>%
  filter(id %in% religious_ids) %>%
  arrange(id, wave) |>
  mutate(urban = factor(
    ifelse(
      rural_gch2018 == "Medium Urban Accessibility" |
        # Define urban condition
        rural_gch2018 == "High Urban Accessibility",
      "urban",
      # Label 'urban' if condition is met
      "rural"  # Label 'rural' if condition is not met
    )
  )) |>
  # select variables
  # mutate(across(where(is.double), as.numeric)) |>
  mutate(male = as.numeric(male) - 1) |>
  mutate(total_siblings_factor = ordered(round(ifelse(total_siblings > 7, 7, total_siblings), 0))) |> 
  rename(religion_religious = religious) |>  # religious yes/no
  mutate(religion_prayer_binary = ifelse(religion_prayer > 0, 1, 0)) |>
  mutate(religion_church_binary = ifelse(religion_church > 0, 1, 0)) |>
  mutate(religion_scripture_binary = ifelse(religion_scripture > 0, 1, 0)) |>
  mutate(religion_religious = as.numeric(religion_religious) - 1) |>
  mutate(
    religion_scripture_round = round( ifelse(religion_scripture >=8, 8, religion_scripture), 0) )|> 
  mutate(
    eth_cat = as.integer(eth_cat),
    urban = as.numeric(urban),
    education_level_coarsen = as.integer(education_level_coarsen)
  ) |>
 dplyr::filter((wave == 2018 & year_measured  == 1) |
                  (wave == 2019  &
                     year_measured  == 1) |
                  (wave == 2020 )) |>  # Eligibility criteria  Observed in 2018/2019 & Outcomes in 2020 or 2021
  group_by(id) |>
  dplyr::mutate(k_18 =  ifelse(wave == 2018 &
                                 !is.na(religion_church), 1, 0)) |>   # creating an indicator for the first wave. Inclusion criteria
  dplyr::mutate(h_18 = mean(k_18, na.rm = TRUE)) |>   # Hack
  dplyr::mutate(k_19 =  ifelse(wave == 2019 &
                                 year_measured == 1 &
                                 !is.na(religion_church), #  Inclusion criteria
                               1,
                               0)) |>   # creating an indicator for the first wave; note that we allow people t
  dplyr::mutate(h_19 = mean(k_19, na.rm = TRUE)) |>  # Hack
  dplyr::filter(h_18 > 0) |>  # hack to enable repeat of baseline
  dplyr::filter(h_19 > 0) |>  # hack to enable repeat of baseline
    mutate(
    not_censored = ifelse(lead(year_measured) == 1, 1, 0),
    # not_censored = ifelse(lead(year_measured)== -1, 0, not_censored,
    # not_censored = ifelse(lead(year_measured) == 0, 0, not_censored,
    not_censored = ifelse(is.na(not_censored) &
                            year_measured == 1, 1, not_censored),
    not_censored = ifelse(is.na(not_censored), 0, not_censored)

  ) |>
  ungroup() |> 
   dplyr::mutate(
    friends_money = ifelse(friends_money < 0, 0, friends_money), # someone gave neg number
    household_inc_log = log(household_inc + 1),
    hours_children_log = log(hours_children + 1),
    hours_work_log = log(hours_work + 1),
    hours_housework_log = log(hours_housework + 1),
  ) |> 
  dplyr::rename(sample_weights = w_gend_age_euro) |>
  dplyr::mutate(sample_origin = sample_origin_names_combined) |>  #shorter name
  arrange(id, wave) |> 
  droplevels() |> 
  select(-h_18,-k_18,-h_19,-k_19) |> 
  data.frame() |> 
  droplevels() |>
  arrange(id, wave) |>
    mutate(
    religion_scripture_coarsen = cut(
      religion_scripture,
      breaks = c(-Inf, 0, 1, 6.99, Inf),
      labels = c("zero", "one", "less_seven", "seven_up"),
      include.lowest = TRUE,
      right = TRUE
    )
  ) %>%
  mutate(
    religion_scripture_coarsen_n = as.numeric(religion_scripture_coarsen) - 1,
    religion_scripture_binary_n = as.numeric(religion_scripture_binary)
  ) |>
  mutate(
    religion_scripture_binary = as.factor(religion_scripture_binary),
    eth_cat = as.integer(eth_cat),
    urban = as.numeric(urban),
    education_level_coarsen = as.integer(education_level_coarsen)
  ) |>
  droplevels() |>
  arrange(id, wave) |>
  data.frame()



# check n again
n_unique(dat_long_tX1$id)

# double check path
push_mods




# save
saveRDS(dat_long_tX1, here::here(push_mods, "dat_long_tX1"))

baseline_varsX1 = c(
    "male",
    "age",
    "education_level_coarsen", # factors
    "eth_cat", #factor(EthCat, labels = c("Euro", "Maori", "Pacific", "Asian")),
   # "employed", # Are you currently employed? (this includes self-employment or casual work)
    #"gen_cohort", #age
    "bigger_doms",
    "nz_dep2018",
    "nzsei13",
    "have_siblings",# added: needed because we are dealing with family giving/receiving
    "born_nz",  # added 
    "hlth_disability",  # added 
     "hlth_bmi",
    "household_inc_log", # added: measured with error but OK for imputations
    "partner",
   # "parent",  # newly changed - have information in child number
    "pol_orient", #Please rate how politically liberal versus conservative you see yourself as being.
    "pol_wing", # Please rate how politically left-wing versus right-wing you see yourself as being.
    "sample_origin",    # Sample origin names combined
    "urban",
    "children_num",
    "household_inc_log", # new from previous study. needed because we are dealing with family giving/receiving
    "hours_children_log", # new
    "hours_work_log", # new
    "hours_housework_log", #new
    "agreeableness", 
    "conscientiousness",
    "extraversion",
    "honesty_humility",
    "openness",
    "neuroticism",
    "modesty", # I want people to know that I am an important person of high status, I am an ordinary person who is no better than others. , I wouldn’t want people to treat me as though I were superior to them. I think that I am entitled to more respect than the average person is.
   # "religion_religious", # Do you identify with a religion and/or spiritual group?
   # "religion_identification_level", #How important is your religion to how you see yourself?"  # note this is not a great measure of virtue, virtue is a mean between extremes.
   "religion_scripture_coarsen", # for prediction
    # "religion_religious", # perfectly colinear
   "religion_spiritual_identification",   
   "religion_identification_level",
   "religion_church_binary",
  # "religion_church_binary2",
  # "religion_scripture",
   "religion_scripture_binary",
   "religion_believe_god",
   "religion_believe_spirit",
    "sample_weights",
  "alert_level_combined_lead" # lead to make it 2019
)
# check
baseline_varsX1

# set exposure variable, can be both the continuous and the coarsened, if needed
exposure_varX1 = c("religion_scripture_round","not_censored") # 


# set outcomes for prosocial domain
outcome_vars_donateX1 = c(
"modesty",
"honesty_humility",
"vengeful_rumin",
"gratitude",
"hours_charity",
"charity_donate"
)


exposure_varX1
prep_donateX1 <- margot_wide_impute_baseline(
dat_long_tX1,
baseline_vars = baseline_varsX1,
exposure_var = exposure_varX1,
outcome_vars = outcome_vars_donateX1
)

# 
# imputed_data <- mice(data, method='pmm', m=5)
# complete_data <- complete(imputed_data, 1)


#check must be a dataframe
str(prep_donateX1)
nrow(prep_donateX1)


df_wide_censored_donate<- 
  prep_donateX1 |> 
  relocate("t0_not_censored", .before = starts_with("t1_"))  %>%
  relocate("t1_not_censored", .before = starts_with("t2_"))


# check missingness
naniar::vis_miss(df_wide_censored_donate, warn_large_data = FALSE)

df_clean_donate <- df_wide_censored_donate %>%
  mutate(t2_na_flag = rowSums(is.na(select(., starts_with("t2_")))) > 0) %>%
  mutate(t1_not_censored = ifelse(t2_na_flag, 0, t1_not_censored)) %>%
 # select(-t2_na_flag) %>%
  filter(!rowSums(is.na(select(., starts_with("t0_"))))) |> 
  dplyr::mutate(across(where(is.numeric) &
                        !t0_not_censored & !t1_not_censored & !t0_sample_weights & !t1_religion_scripture_round & !t2_charity_donate & 
                         !t2_gratitude & !t2_hours_charity, ~ scale(.x), .names = "{col}_z"))|>
  select(where(is.factor), t0_not_censored, t1_not_censored, t0_sample_weights, t1_religion_scripture_round, t2_gratitude,  t2_charity_donate,t2_hours_charity, ends_with("_z")) |>
  relocate(starts_with("t0_"), .before = starts_with("t1_"))  %>%
  relocate(starts_with("t2_"), .after = starts_with("t1_"))  %>%
  relocate("t0_not_censored", .before = starts_with("t1_"))  %>%
  relocate("t1_not_censored", .before = starts_with("t2_")) |> 
  mutate(t0_sample_weights = as.numeric(t0_sample_weights)) |> 
  data.frame()

# few checks
mean(df_clean_donate$t2_charity_donate, na.rm = TRUE)
table(df_wide_censored_donate$t1_religion_church_round)
colnames(df_clean_donate)
n_unique(df_clean_donate$id)#33198


naniar::vis_miss(df_clean_donate, warn_large_data = FALSE)
#dev.off()

# save data
push_mods
here_save(df_clean_donate,"df_clean_donate")

df_clean_donate <-here_read("df_clean_donate")

# get names
names_base_donate <- df_clean_donate |> select( starts_with("t0"), - t0_sample_weights,-t0_not_censored )|> colnames()
names_base_donate2 <- df_clean_donate |> select( starts_with("t2"))|> colnames()

# check
names_base_donate
names_base_donate2

# check: 
df_clean_donate$t1_religion_scripture_round


# exposure_varX1
outcome_vars



#  model
A <- c( "t1_religion_scripture_round")
C <- c( "t1_not_censored")

#L <- list(c("L1"), c("L2")) 
W <- c(paste(names_base_donate, collapse = ", "))

# check 
print(W) 


#baseline confounders
#L <- as.list(names_base)
table(df_clean_donate$t1_religion_scripture_round)

# shift function -- what if everyone increased by .5 standard deviation, except those above 2 

# possible shift
# f <- function(data, trt){
#   ifelse( data[[trt]] < 4,  data[[trt]] + 1,  data[[trt]] )
# }

# simple shift, everyone goes to church at least 4 times per week
f <- function(data, trt){
  ifelse( data[[trt]] <= 7, 7,  data[[trt]] )
}


# Create a vector indicating what algorithms should be R. # used in the SuperLearner 

# libraries
library(SuperLearner)
library(xgboost)
listWrappers()


# "SL.earth" refers to a wrapper for the 'earth' function from the 'earth' R package in the SuperLearner library. This function implements Multivariate Adaptive Regression Splines (MARS), a non-parametric regression method that extends linear models by allowing for interactions and non-linear relationships between variables.
# MARS models can handle high-dimensional data well and can be a useful tool for capturing complex patterns in the data. They work by fitting piecewise linear models to the data, which allows for flexible and potentially non-linear relationships between predictors and the outcome.

# super learner libraries
sl_lib <- c(
           "SL.glmnet", 
           "SL.ranger", # faster implementation of random forest
           "SL.earth") #


# BONUS: progressr progress bars!
progressr::handlers(global = TRUE)

# we will only assess behaviour 
names_base_donate2
# recomend tmle for single time point
# recommend sdr for multiple time points
f
A
C
names_base_donate


# model charitable giving in population 
m_t2_hours_charity <- lmtp_tmle(
  data = df_clean_donate,
  trt = A,
  baseline = names_base_donate,
  outcome = "t2_hours_charity",
  cens = C,
  shift = f,
  mtp = TRUE,
  folds = 5,
  # ideally use ten
  #.trim = 0.99,
  # time_vary = NULL,
  outcome_type = "continuous",
  #  id = "id",
  weights = df_clean_donate$t0_sample_weights,
  learners_trt = "SL.ranger",
  learners_outcome = "SL.ranger"
)

here_save(m_t2_hours_charity, "m_t2_hours_charity")
m_t2_hours_charity <- here_read("m_t2_hours_charity")




m_t2_hours_charity_null <- lmtp_tmle(
  data = df_clean_donate,
  trt = A,
  baseline = names_base_donate,
  outcome = "t2_hours_charity",
  cens = C,
  shift = NULL,
  k = 1,
  mtp = TRUE,
  folds = 5,
  # ideally use ten
  #trim = 0.99,
  # time_vary = NULL,
  outcome_type = "continuous",
  #  id = "id",
  weights = df_clean_donate$t0_sample_weights,
  learners_trt = "SL.ranger",
  learners_outcome = "SL.ranger"
)

here_save(m_t2_hours_charity_null, "m_t2_hours_charity_null")
m_t2_hours_charity_null <- here_read( "m_t2_hours_charity_null")

str(m_t2_hours_charity_null)



# caluclate contrast 
contrast_hours_full <- lmtp_contrast(m_t2_hours_charity,ref = m_t2_hours_charity_null, type = "additive")
str(contrast_hours_full)
contrast_hours_full




# not right
church_four <- format_tab_tmle(church_four, scale = "RD", new_name = "church_four")
church_four


margot_tab_lmtp <- function(tmtp_output, scale = c("RD", "RR"), new_name = "character_string") {

  scale <- match.arg(scale)

  require(dplyr)

  tab_tmle <- cbind.data.frame(
    tmtp_output$vals$theta,
    tmtp_output$vals$std.error,
    tmtp_output$vals$conf.low,
    tmtp_output$vals$conf.high
  )

  if (scale == "RD") {
    colnames(tab_tmle) <- c("E[Y(1)]-E[Y(0)]", "standard_error", "2.5 %", "97.5 %")
  } else if (scale == "RR") {
    colnames(tab_tmle) <- c("E[Y(1)]/E[Y(0)]", "standard_error", "2.5 %", "97.5 %")
  }

  tab_tmle_round <- tab_tmle |>
    dplyr::mutate(across(where(is.numeric), round, digits = 4))

  rownames(tab_tmle_round)[1] <- paste0(new_name)

  return(tab_tmle_round)
}

church_four_hours <- margot_tab_lmtp(contrast_hours_full, scale = "RD", new_name = "LMTP + 4")
grouped_outcomes <- group_tab( contrast_hours_full, contrast_hours_full,  scale = "RD") 



theta <- contrast_hours_full$vals$theta
# adult population
nz_adult_population = 3989000

# min wage workers 
min_wage_2023 = 22.70

# off the cuff
hours_volunteering_gained = theta * nz_adult_population
hours_volunteering_gained

# cash value of intervention
hours_volunteering_gained * min_wage_2023


## donation model 
m_t2_charity_donate <- lmtp_tmle(
  data = df_clean_donate,
  trt = A,
  baseline = names_base_donate,
  outcome = "t2_charity_donate",
  cens = C,
  shift = f,
  k = 1,
  mtp = TRUE,
  folds = 5,
  # ideally use ten
  .trim = 0.99,
  # time_vary = NULL,
  outcome_type = "continuous",
  #  id = "id",
  weights = df_clean_donate$t0_sample_weights,
  learners_trt = sl_lib,
  learners_outcome = sl_lib
)
here_save(m_t2_charity_donate, "m_t2_charity_donate")
m_t2_charity_donate


# under null
m_t2_charity_donate_null <- lmtp_tmle(
  data = df_clean_donate,
  trt = A,
  baseline = names_base_donate,
  outcome = "t2_charity_donate",
  cens = C,
  shift = NULL,
  k = 1,
#  mtp = TRUE,
  folds = 5,
  # ideally use ten
  .trim = 0.99,
  # time_vary = NULL,
  outcome_type = "continuous",
  #  id = "id",
  weights = df_clean_donate$t0_sample_weights,
  learners_trt = sl_lib,
  learners_outcome =  sl_lib
)
here_save(m_t2_charity_donate_null, "m_t2_charity_donate_null")
m_t2_charity_donate_null

contrast_donate <- lmtp_contrast(m_t2_charity_donate,ref = m_t2_charity_donate_null, type = "additive")

#sd(df_wide_censored_donate$t2_charity_donate, na.rm=TRUE) * .0175


# calculate proportion 4 or greater
proportion = sum(df_clean_donate$t1_religion_scripture_round >= 8) / nrow(df_clean_donate)
proportion
 
theta_donate <- contrast_donate$vals$theta
theta_donate
# adult population
nz_adult_population = 3989000



# # min wage workers 
# min_wage_2023 = 22.70

# off the cuff
dollars_donate_gained = theta_donate * nz_adult_population
dollars_donate_gained
# 832193252
hours_volunteering_gained

# cash value of intervention
opportunity_hours_donate <- dollars_donate_gained / min_wage_2023

opportunity_hours_donate

mean ( df_clean_donate$t2_charity_donate, na.rm = TRUE)

```


